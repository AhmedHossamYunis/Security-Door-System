
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000102  00800060  000032f0  00003384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800162  00800162  00003486  2**0
                  ALLOC
  3 .stab         0000315c  00000000  00000000  00003488  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001628  00000000  00000000  000065e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b7a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b900  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bb8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c35b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__vector_3>
      10:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__vector_6>
      1c:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__vector_7>
      20:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__vector_8>
      24:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 36       	cpi	r26, 0x6E	; 110
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e4       	ldi	r26, 0x44	; 68
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 16 19 	jmp	0x322c	; 0x322c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 06 19 	jmp	0x320c	; 0x320c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 22 19 	jmp	0x3244	; 0x3244 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 06 19 	jmp	0x320c	; 0x320c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 22 19 	jmp	0x3244	; 0x3244 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 e4       	ldi	r24, 0x44	; 68
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 16 19 	jmp	0x322c	; 0x322c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 06 19 	jmp	0x320c	; 0x320c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 22 19 	jmp	0x3244	; 0x3244 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 06 19 	jmp	0x320c	; 0x320c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 22 19 	jmp	0x3244	; 0x3244 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 06 19 	jmp	0x320c	; 0x320c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 22 19 	jmp	0x3244	; 0x3244 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 26 19 	jmp	0x324c	; 0x324c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 *                               HMI ECU MAIN                                  *
 *******************************************************************************/


int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	ab 97       	sbiw	r28, 0x2b	; 43
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	 * 1- Bit rate = 9600.
	 * 2- Parity is disabled.
	 * 3- No of stop bits = 1.
	 * 4- No of data bit = 8 bits.
	 * */
	USART_configType config_UART = {9600, DISABLED, ONE_BIT, EIGHT_BITS};
     b5a:	ce 01       	movw	r24, r28
     b5c:	04 96       	adiw	r24, 0x04	; 4
     b5e:	9e 8f       	std	Y+30, r25	; 0x1e
     b60:	8d 8f       	std	Y+29, r24	; 0x1d
     b62:	ea e5       	ldi	r30, 0x5A	; 90
     b64:	f1 e0       	ldi	r31, 0x01	; 1
     b66:	f8 a3       	std	Y+32, r31	; 0x20
     b68:	ef 8f       	std	Y+31, r30	; 0x1f
     b6a:	f7 e0       	ldi	r31, 0x07	; 7
     b6c:	f9 a3       	std	Y+33, r31	; 0x21
     b6e:	ef 8d       	ldd	r30, Y+31	; 0x1f
     b70:	f8 a1       	ldd	r31, Y+32	; 0x20
     b72:	00 80       	ld	r0, Z
     b74:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b76:	98 a1       	ldd	r25, Y+32	; 0x20
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	98 a3       	std	Y+32, r25	; 0x20
     b7c:	8f 8f       	std	Y+31, r24	; 0x1f
     b7e:	ed 8d       	ldd	r30, Y+29	; 0x1d
     b80:	fe 8d       	ldd	r31, Y+30	; 0x1e
     b82:	00 82       	st	Z, r0
     b84:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b86:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	9e 8f       	std	Y+30, r25	; 0x1e
     b8c:	8d 8f       	std	Y+29, r24	; 0x1d
     b8e:	99 a1       	ldd	r25, Y+33	; 0x21
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	99 a3       	std	Y+33, r25	; 0x21
     b94:	e9 a1       	ldd	r30, Y+33	; 0x21
     b96:	ee 23       	and	r30, r30
     b98:	51 f7       	brne	.-44     	; 0xb6e <main+0x28>
	 * 3- Prescaler = F_CPU/1024
	 * 4- Normal port operation OC0 is disconnected
	 * 5- insert the initial value = 0.
	 * 6- Insert the channel in case of TIMER 1.
	 * */
	TIMER_ConfigType config_Timer_Motor = {255,NORMAL_MODE, F_CPU_1024, NORMAL_MATCH, 0,'A'};
     b9a:	ce 01       	movw	r24, r28
     b9c:	0b 96       	adiw	r24, 0x0b	; 11
     b9e:	9b a3       	std	Y+35, r25	; 0x23
     ba0:	8a a3       	std	Y+34, r24	; 0x22
     ba2:	e3 e5       	ldi	r30, 0x53	; 83
     ba4:	f1 e0       	ldi	r31, 0x01	; 1
     ba6:	fd a3       	std	Y+37, r31	; 0x25
     ba8:	ec a3       	std	Y+36, r30	; 0x24
     baa:	f7 e0       	ldi	r31, 0x07	; 7
     bac:	fe a3       	std	Y+38, r31	; 0x26
     bae:	ec a1       	ldd	r30, Y+36	; 0x24
     bb0:	fd a1       	ldd	r31, Y+37	; 0x25
     bb2:	00 80       	ld	r0, Z
     bb4:	8c a1       	ldd	r24, Y+36	; 0x24
     bb6:	9d a1       	ldd	r25, Y+37	; 0x25
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	9d a3       	std	Y+37, r25	; 0x25
     bbc:	8c a3       	std	Y+36, r24	; 0x24
     bbe:	ea a1       	ldd	r30, Y+34	; 0x22
     bc0:	fb a1       	ldd	r31, Y+35	; 0x23
     bc2:	00 82       	st	Z, r0
     bc4:	8a a1       	ldd	r24, Y+34	; 0x22
     bc6:	9b a1       	ldd	r25, Y+35	; 0x23
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	9b a3       	std	Y+35, r25	; 0x23
     bcc:	8a a3       	std	Y+34, r24	; 0x22
     bce:	9e a1       	ldd	r25, Y+38	; 0x26
     bd0:	91 50       	subi	r25, 0x01	; 1
     bd2:	9e a3       	std	Y+38, r25	; 0x26
     bd4:	ee a1       	ldd	r30, Y+38	; 0x26
     bd6:	ee 23       	and	r30, r30
     bd8:	51 f7       	brne	.-44     	; 0xbae <main+0x68>
	 * 3- Prescaler = F_CPU/1024
	 * 4- Normal port operation OC0 is disconnected
	 * 5- insert the initial value = 0.
	 * 6- Insert the channel in case of TIMER 1.
	 * */
	TIMER_ConfigType config_Timer_Buzzer = {255,COMPARE, F_CPU_1024, NORMAL_MATCH, 0,'A'};
     bda:	ce 01       	movw	r24, r28
     bdc:	42 96       	adiw	r24, 0x12	; 18
     bde:	98 a7       	std	Y+40, r25	; 0x28
     be0:	8f a3       	std	Y+39, r24	; 0x27
     be2:	ec e4       	ldi	r30, 0x4C	; 76
     be4:	f1 e0       	ldi	r31, 0x01	; 1
     be6:	fa a7       	std	Y+42, r31	; 0x2a
     be8:	e9 a7       	std	Y+41, r30	; 0x29
     bea:	f7 e0       	ldi	r31, 0x07	; 7
     bec:	fb a7       	std	Y+43, r31	; 0x2b
     bee:	e9 a5       	ldd	r30, Y+41	; 0x29
     bf0:	fa a5       	ldd	r31, Y+42	; 0x2a
     bf2:	00 80       	ld	r0, Z
     bf4:	89 a5       	ldd	r24, Y+41	; 0x29
     bf6:	9a a5       	ldd	r25, Y+42	; 0x2a
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	9a a7       	std	Y+42, r25	; 0x2a
     bfc:	89 a7       	std	Y+41, r24	; 0x29
     bfe:	ef a1       	ldd	r30, Y+39	; 0x27
     c00:	f8 a5       	ldd	r31, Y+40	; 0x28
     c02:	00 82       	st	Z, r0
     c04:	8f a1       	ldd	r24, Y+39	; 0x27
     c06:	98 a5       	ldd	r25, Y+40	; 0x28
     c08:	01 96       	adiw	r24, 0x01	; 1
     c0a:	98 a7       	std	Y+40, r25	; 0x28
     c0c:	8f a3       	std	Y+39, r24	; 0x27
     c0e:	9b a5       	ldd	r25, Y+43	; 0x2b
     c10:	91 50       	subi	r25, 0x01	; 1
     c12:	9b a7       	std	Y+43, r25	; 0x2b
     c14:	eb a5       	ldd	r30, Y+43	; 0x2b
     c16:	ee 23       	and	r30, r30
     c18:	51 f7       	brne	.-44     	; 0xbee <main+0xa8>

	uint8 state = INITIAL;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	8b 83       	std	Y+3, r24	; 0x03
	uint8 check = WRONG;
     c1e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 errorPass = 0;
     c20:	19 82       	std	Y+1, r1	; 0x01
	volatile uint32 cnt;

	LCD_init();
     c22:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_init>

	USART_init(&config_UART);
     c26:	ce 01       	movw	r24, r28
     c28:	04 96       	adiw	r24, 0x04	; 4
     c2a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <USART_init>
	/*Enable global interrupt*/
	sei();
     c2e:	78 94       	sei
     c30:	58 c0       	rjmp	.+176    	; 0xce2 <main+0x19c>
		/*In case of the system works in the first time or the user wants
		 * to change the password*/
		while((state == INITIAL) && (check == WRONG))
		{

			HMI_setNewPassword();
     c32:	0e 94 7e 07 	call	0xefc	; 0xefc <HMI_setNewPassword>
			while((HMI_confirmPass()) != READY);
     c36:	0e 94 4d 08 	call	0x109a	; 0x109a <HMI_confirmPass>
     c3a:	82 30       	cpi	r24, 0x02	; 2
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <main+0xf0>
			check = HMI_matchPass();
     c3e:	0e 94 33 0a 	call	0x1466	; 0x1466 <HMI_matchPass>
     c42:	8a 83       	std	Y+2, r24	; 0x02
			LCD_clearScreen();
     c44:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_clearScreen>
			if(check == MATCH)
     c48:	8a 81       	ldd	r24, Y+2	; 0x02
     c4a:	88 30       	cpi	r24, 0x08	; 8
     c4c:	21 f5       	brne	.+72     	; 0xc96 <main+0x150>
			{
				LCD_displayStringRowColumn(0,4, "Success");
     c4e:	20 e6       	ldi	r18, 0x60	; 96
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	64 e0       	ldi	r22, 0x04	; 4
     c56:	a9 01       	movw	r20, r18
     c58:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayStringRowColumn>
				for (cnt = 128000; cnt; cnt--);
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	94 ef       	ldi	r25, 0xF4	; 244
     c60:	a1 e0       	ldi	r26, 0x01	; 1
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	89 8f       	std	Y+25, r24	; 0x19
     c66:	9a 8f       	std	Y+26, r25	; 0x1a
     c68:	ab 8f       	std	Y+27, r26	; 0x1b
     c6a:	bc 8f       	std	Y+28, r27	; 0x1c
     c6c:	0b c0       	rjmp	.+22     	; 0xc84 <main+0x13e>
     c6e:	89 8d       	ldd	r24, Y+25	; 0x19
     c70:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c72:	ab 8d       	ldd	r26, Y+27	; 0x1b
     c74:	bc 8d       	ldd	r27, Y+28	; 0x1c
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	a1 09       	sbc	r26, r1
     c7a:	b1 09       	sbc	r27, r1
     c7c:	89 8f       	std	Y+25, r24	; 0x19
     c7e:	9a 8f       	std	Y+26, r25	; 0x1a
     c80:	ab 8f       	std	Y+27, r26	; 0x1b
     c82:	bc 8f       	std	Y+28, r27	; 0x1c
     c84:	89 8d       	ldd	r24, Y+25	; 0x19
     c86:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c88:	ab 8d       	ldd	r26, Y+27	; 0x1b
     c8a:	bc 8d       	ldd	r27, Y+28	; 0x1c
     c8c:	00 97       	sbiw	r24, 0x00	; 0
     c8e:	a1 05       	cpc	r26, r1
     c90:	b1 05       	cpc	r27, r1
     c92:	69 f7       	brne	.-38     	; 0xc6e <main+0x128>
     c94:	2d c0       	rjmp	.+90     	; 0xcf0 <main+0x1aa>
				break;
			}
			else
			{
				LCD_displayStringRowColumn(0,0, "In valid pass");
     c96:	28 e6       	ldi	r18, 0x68	; 104
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	a9 01       	movw	r20, r18
     ca0:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayStringRowColumn>
				state = INITIAL;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	8b 83       	std	Y+3, r24	; 0x03
				check = WRONG;
     ca8:	1a 82       	std	Y+2, r1	; 0x02
				for (cnt = 128000; cnt; cnt--);
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	94 ef       	ldi	r25, 0xF4	; 244
     cae:	a1 e0       	ldi	r26, 0x01	; 1
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	89 8f       	std	Y+25, r24	; 0x19
     cb4:	9a 8f       	std	Y+26, r25	; 0x1a
     cb6:	ab 8f       	std	Y+27, r26	; 0x1b
     cb8:	bc 8f       	std	Y+28, r27	; 0x1c
     cba:	0b c0       	rjmp	.+22     	; 0xcd2 <main+0x18c>
     cbc:	89 8d       	ldd	r24, Y+25	; 0x19
     cbe:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cc0:	ab 8d       	ldd	r26, Y+27	; 0x1b
     cc2:	bc 8d       	ldd	r27, Y+28	; 0x1c
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	a1 09       	sbc	r26, r1
     cc8:	b1 09       	sbc	r27, r1
     cca:	89 8f       	std	Y+25, r24	; 0x19
     ccc:	9a 8f       	std	Y+26, r25	; 0x1a
     cce:	ab 8f       	std	Y+27, r26	; 0x1b
     cd0:	bc 8f       	std	Y+28, r27	; 0x1c
     cd2:	89 8d       	ldd	r24, Y+25	; 0x19
     cd4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cd6:	ab 8d       	ldd	r26, Y+27	; 0x1b
     cd8:	bc 8d       	ldd	r27, Y+28	; 0x1c
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	a1 05       	cpc	r26, r1
     cde:	b1 05       	cpc	r27, r1
     ce0:	69 f7       	brne	.-38     	; 0xcbc <main+0x176>

	while(1)
	{
		/*In case of the system works in the first time or the user wants
		 * to change the password*/
		while((state == INITIAL) && (check == WRONG))
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	81 30       	cpi	r24, 0x01	; 1
     ce6:	21 f4       	brne	.+8      	; 0xcf0 <main+0x1aa>
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	88 23       	and	r24, r24
     cec:	09 f4       	brne	.+2      	; 0xcf0 <main+0x1aa>
     cee:	a1 cf       	rjmp	.-190    	; 0xc32 <main+0xec>
		/*After setting the new password the main menu starts to display
		 * In case of press + --> the door will open for 15 and close for 15 sec
		 * In case of press - --> Change the password
		 * In case of the password is wrong for 3 times --> Alarm will turn on for 1 minute
		 *  */
		HMI_mainOption();
     cf0:	0e 94 3f 0a 	call	0x147e	; 0x147e <HMI_mainOption>
		state = HMI_chooseOption();
     cf4:	0e 94 56 0a 	call	0x14ac	; 0x14ac <HMI_chooseOption>
     cf8:	8b 83       	std	Y+3, r24	; 0x03

		if(state == OPEN_DOOR)
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	83 30       	cpi	r24, 0x03	; 3
     cfe:	09 f0       	breq	.+2      	; 0xd02 <main+0x1bc>
     d00:	7b c0       	rjmp	.+246    	; 0xdf8 <main+0x2b2>
		{
			check = HMI_enterPass();
     d02:	0e 94 5f 09 	call	0x12be	; 0x12be <HMI_enterPass>
     d06:	8a 83       	std	Y+2, r24	; 0x02
			if(check == MATCH)
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	88 30       	cpi	r24, 0x08	; 8
     d0c:	81 f5       	brne	.+96     	; 0xd6e <main+0x228>
			{
				TIMER_SetCallBack(HMI_LCDProcessing);
     d0e:	89 ec       	ldi	r24, 0xC9	; 201
     d10:	9a e0       	ldi	r25, 0x0A	; 10
     d12:	0e 94 3a 13 	call	0x2674	; 0x2674 <TIMER_SetCallBack>
				errorPass = 0;
     d16:	19 82       	std	Y+1, r1	; 0x01
				USART_sendByte(MATCH);
     d18:	88 e0       	ldi	r24, 0x08	; 8
     d1a:	0e 94 10 14 	call	0x2820	; 0x2820 <USART_sendByte>
				TIMER_init(TIMER_0 ,&config_Timer_Motor);
     d1e:	9e 01       	movw	r18, r28
     d20:	25 5f       	subi	r18, 0xF5	; 245
     d22:	3f 4f       	sbci	r19, 0xFF	; 255
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	b9 01       	movw	r22, r18
     d28:	0e 94 50 11 	call	0x22a0	; 0x22a0 <TIMER_init>

				LCD_clearScreen();
     d2c:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Door is opening ");
     d30:	26 e7       	ldi	r18, 0x76	; 118
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	a9 01       	movw	r20, r18
     d3a:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayStringRowColumn>
				while(open_flag != 1);
     d3e:	80 91 64 01 	lds	r24, 0x0164
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	e1 f7       	brne	.-8      	; 0xd3e <main+0x1f8>

				stop_flag = 0;
     d46:	10 92 66 01 	sts	0x0166, r1
				LCD_displayStringRowColumn(0,0,"Door is closing");
     d4a:	27 e8       	ldi	r18, 0x87	; 135
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	a9 01       	movw	r20, r18
     d54:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayStringRowColumn>
				while(stop_flag != 1);
     d58:	80 91 66 01 	lds	r24, 0x0166
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	e1 f7       	brne	.-8      	; 0xd58 <main+0x212>

				TIMER_Deinit(TIMER_0);
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	0e 94 0c 13 	call	0x2618	; 0x2618 <TIMER_Deinit>

				open_flag = 0;
     d66:	10 92 64 01 	sts	0x0164, r1
				stop_flag = 0;
     d6a:	10 92 66 01 	sts	0x0166, r1

			}
			if (check == NOT_MATCH)
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	89 30       	cpi	r24, 0x09	; 9
     d72:	09 f0       	breq	.+2      	; 0xd76 <main+0x230>
     d74:	b6 cf       	rjmp	.-148    	; 0xce2 <main+0x19c>
			{
				errorPass++;
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	8f 5f       	subi	r24, 0xFF	; 255
     d7a:	89 83       	std	Y+1, r24	; 0x01
				LCD_clearScreen();
     d7c:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_clearScreen>
				TIMER_SetCallBack(HMI_buzzerProcessing);
     d80:	87 e0       	ldi	r24, 0x07	; 7
     d82:	9b e0       	ldi	r25, 0x0B	; 11
     d84:	0e 94 3a 13 	call	0x2674	; 0x2674 <TIMER_SetCallBack>
				if(errorPass >= 3)
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	83 30       	cpi	r24, 0x03	; 3
     d8c:	88 f0       	brcs	.+34     	; 0xdb0 <main+0x26a>
				{
					state = NOT_INITIAL;
     d8e:	8b e0       	ldi	r24, 0x0B	; 11
     d90:	8b 83       	std	Y+3, r24	; 0x03
					TIMER_init(TIMER_0, &config_Timer_Buzzer);
     d92:	9e 01       	movw	r18, r28
     d94:	2e 5e       	subi	r18, 0xEE	; 238
     d96:	3f 4f       	sbci	r19, 0xFF	; 255
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	b9 01       	movw	r22, r18
     d9c:	0e 94 50 11 	call	0x22a0	; 0x22a0 <TIMER_init>
					HMI_Buzzer();
     da0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <HMI_Buzzer>
					TIMER_Deinit(TIMER_0);
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	0e 94 0c 13 	call	0x2618	; 0x2618 <TIMER_Deinit>
					stop_buzzer = 0;
     daa:	10 92 67 01 	sts	0x0167, r1
     dae:	99 cf       	rjmp	.-206    	; 0xce2 <main+0x19c>
				}
				else
				{
					LCD_displayStringRowColumn(0,0, "In valid input");
     db0:	27 e9       	ldi	r18, 0x97	; 151
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	a9 01       	movw	r20, r18
     dba:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayStringRowColumn>
					for (cnt = 128000; cnt; cnt--);
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	94 ef       	ldi	r25, 0xF4	; 244
     dc2:	a1 e0       	ldi	r26, 0x01	; 1
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	89 8f       	std	Y+25, r24	; 0x19
     dc8:	9a 8f       	std	Y+26, r25	; 0x1a
     dca:	ab 8f       	std	Y+27, r26	; 0x1b
     dcc:	bc 8f       	std	Y+28, r27	; 0x1c
     dce:	0b c0       	rjmp	.+22     	; 0xde6 <main+0x2a0>
     dd0:	89 8d       	ldd	r24, Y+25	; 0x19
     dd2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     dd4:	ab 8d       	ldd	r26, Y+27	; 0x1b
     dd6:	bc 8d       	ldd	r27, Y+28	; 0x1c
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	a1 09       	sbc	r26, r1
     ddc:	b1 09       	sbc	r27, r1
     dde:	89 8f       	std	Y+25, r24	; 0x19
     de0:	9a 8f       	std	Y+26, r25	; 0x1a
     de2:	ab 8f       	std	Y+27, r26	; 0x1b
     de4:	bc 8f       	std	Y+28, r27	; 0x1c
     de6:	89 8d       	ldd	r24, Y+25	; 0x19
     de8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     dea:	ab 8d       	ldd	r26, Y+27	; 0x1b
     dec:	bc 8d       	ldd	r27, Y+28	; 0x1c
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	a1 05       	cpc	r26, r1
     df2:	b1 05       	cpc	r27, r1
     df4:	69 f7       	brne	.-38     	; 0xdd0 <main+0x28a>
     df6:	75 cf       	rjmp	.-278    	; 0xce2 <main+0x19c>
				}
			}
		}
		else if (state == CHANGE_PASS)
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	85 30       	cpi	r24, 0x05	; 5
     dfc:	09 f0       	breq	.+2      	; 0xe00 <main+0x2ba>
     dfe:	4f c0       	rjmp	.+158    	; 0xe9e <main+0x358>
		{
			check = HMI_enterPass();
     e00:	0e 94 5f 09 	call	0x12be	; 0x12be <HMI_enterPass>
     e04:	8a 83       	std	Y+2, r24	; 0x02
			if(check == MATCH)
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	88 30       	cpi	r24, 0x08	; 8
     e0a:	21 f4       	brne	.+8      	; 0xe14 <main+0x2ce>
			{
				errorPass = 0;
     e0c:	19 82       	std	Y+1, r1	; 0x01
				state = INITIAL;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	8b 83       	std	Y+3, r24	; 0x03
				check = WRONG;
     e12:	1a 82       	std	Y+2, r1	; 0x02
			}
			if (check == NOT_MATCH)
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	89 30       	cpi	r24, 0x09	; 9
     e18:	09 f0       	breq	.+2      	; 0xe1c <main+0x2d6>
     e1a:	63 cf       	rjmp	.-314    	; 0xce2 <main+0x19c>
			{
				errorPass++;
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	8f 5f       	subi	r24, 0xFF	; 255
     e20:	89 83       	std	Y+1, r24	; 0x01
				LCD_clearScreen();
     e22:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_clearScreen>
				TIMER_SetCallBack(HMI_buzzerProcessing);
     e26:	87 e0       	ldi	r24, 0x07	; 7
     e28:	9b e0       	ldi	r25, 0x0B	; 11
     e2a:	0e 94 3a 13 	call	0x2674	; 0x2674 <TIMER_SetCallBack>
				if(errorPass >= 3)
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	83 30       	cpi	r24, 0x03	; 3
     e32:	88 f0       	brcs	.+34     	; 0xe56 <main+0x310>
				{
					state = NOT_INITIAL;
     e34:	8b e0       	ldi	r24, 0x0B	; 11
     e36:	8b 83       	std	Y+3, r24	; 0x03
					TIMER_init(TIMER_0, &config_Timer_Buzzer);
     e38:	9e 01       	movw	r18, r28
     e3a:	2e 5e       	subi	r18, 0xEE	; 238
     e3c:	3f 4f       	sbci	r19, 0xFF	; 255
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	b9 01       	movw	r22, r18
     e42:	0e 94 50 11 	call	0x22a0	; 0x22a0 <TIMER_init>
					HMI_Buzzer();
     e46:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <HMI_Buzzer>
					TIMER_Deinit(TIMER_0);
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	0e 94 0c 13 	call	0x2618	; 0x2618 <TIMER_Deinit>
					stop_buzzer = 0;
     e50:	10 92 67 01 	sts	0x0167, r1
     e54:	46 cf       	rjmp	.-372    	; 0xce2 <main+0x19c>
				}
				else
				{
					LCD_displayStringRowColumn(0,0, "In valid input");
     e56:	27 e9       	ldi	r18, 0x97	; 151
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	a9 01       	movw	r20, r18
     e60:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayStringRowColumn>
					for (cnt = 128000; cnt; cnt--);
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	94 ef       	ldi	r25, 0xF4	; 244
     e68:	a1 e0       	ldi	r26, 0x01	; 1
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	89 8f       	std	Y+25, r24	; 0x19
     e6e:	9a 8f       	std	Y+26, r25	; 0x1a
     e70:	ab 8f       	std	Y+27, r26	; 0x1b
     e72:	bc 8f       	std	Y+28, r27	; 0x1c
     e74:	0b c0       	rjmp	.+22     	; 0xe8c <main+0x346>
     e76:	89 8d       	ldd	r24, Y+25	; 0x19
     e78:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e7a:	ab 8d       	ldd	r26, Y+27	; 0x1b
     e7c:	bc 8d       	ldd	r27, Y+28	; 0x1c
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	a1 09       	sbc	r26, r1
     e82:	b1 09       	sbc	r27, r1
     e84:	89 8f       	std	Y+25, r24	; 0x19
     e86:	9a 8f       	std	Y+26, r25	; 0x1a
     e88:	ab 8f       	std	Y+27, r26	; 0x1b
     e8a:	bc 8f       	std	Y+28, r27	; 0x1c
     e8c:	89 8d       	ldd	r24, Y+25	; 0x19
     e8e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e90:	ab 8d       	ldd	r26, Y+27	; 0x1b
     e92:	bc 8d       	ldd	r27, Y+28	; 0x1c
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	a1 05       	cpc	r26, r1
     e98:	b1 05       	cpc	r27, r1
     e9a:	69 f7       	brne	.-38     	; 0xe76 <main+0x330>
     e9c:	22 cf       	rjmp	.-444    	; 0xce2 <main+0x19c>
				}
			}
		}
		else if(state == NOT_INITIAL)
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	8b 30       	cpi	r24, 0x0B	; 11
     ea2:	41 f5       	brne	.+80     	; 0xef4 <main+0x3ae>
		{
			LCD_clearScreen();
     ea4:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"In valid input");
     ea8:	27 e9       	ldi	r18, 0x97	; 151
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	a9 01       	movw	r20, r18
     eb2:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayStringRowColumn>
			for (cnt = 128000; cnt; cnt--);
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	94 ef       	ldi	r25, 0xF4	; 244
     eba:	a1 e0       	ldi	r26, 0x01	; 1
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	89 8f       	std	Y+25, r24	; 0x19
     ec0:	9a 8f       	std	Y+26, r25	; 0x1a
     ec2:	ab 8f       	std	Y+27, r26	; 0x1b
     ec4:	bc 8f       	std	Y+28, r27	; 0x1c
     ec6:	0b c0       	rjmp	.+22     	; 0xede <main+0x398>
     ec8:	89 8d       	ldd	r24, Y+25	; 0x19
     eca:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ecc:	ab 8d       	ldd	r26, Y+27	; 0x1b
     ece:	bc 8d       	ldd	r27, Y+28	; 0x1c
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	a1 09       	sbc	r26, r1
     ed4:	b1 09       	sbc	r27, r1
     ed6:	89 8f       	std	Y+25, r24	; 0x19
     ed8:	9a 8f       	std	Y+26, r25	; 0x1a
     eda:	ab 8f       	std	Y+27, r26	; 0x1b
     edc:	bc 8f       	std	Y+28, r27	; 0x1c
     ede:	89 8d       	ldd	r24, Y+25	; 0x19
     ee0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ee2:	ab 8d       	ldd	r26, Y+27	; 0x1b
     ee4:	bc 8d       	ldd	r27, Y+28	; 0x1c
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	a1 05       	cpc	r26, r1
     eea:	b1 05       	cpc	r27, r1
     eec:	69 f7       	brne	.-38     	; 0xec8 <main+0x382>
			state = NOT_INITIAL;
     eee:	8b e0       	ldi	r24, 0x0B	; 11
     ef0:	8b 83       	std	Y+3, r24	; 0x03
     ef2:	f7 ce       	rjmp	.-530    	; 0xce2 <main+0x19c>
		}
		else
		{
			state = INITIAL;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	8b 83       	std	Y+3, r24	; 0x03
			check = WRONG;
     ef8:	1a 82       	std	Y+2, r1	; 0x02
     efa:	f3 ce       	rjmp	.-538    	; 0xce2 <main+0x19c>

00000efc <HMI_setNewPassword>:
/*
 * Description:
 *	Function to get the new password and send it to control EUC
 * */
void HMI_setNewPassword(void)
{
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	2c 97       	sbiw	r28, 0x0c	; 12
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
	char newPass_arr[ARR_SIZE + 2];
	uint8 counter;
	LCD_clearScreen();
     f14:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_clearScreen>
	LCD_setCurser(0,0);
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_setCurser>
	LCD_displayString("New Password");
     f20:	86 ea       	ldi	r24, 0xA6	; 166
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_displayString>

	for(counter = 0; counter<ARR_SIZE; counter++)
     f28:	19 82       	std	Y+1, r1	; 0x01
     f2a:	8b c0       	rjmp	.+278    	; 0x1042 <HMI_setNewPassword+0x146>
	{
		volatile uint32 cnt;
		newPass_arr[counter] = KEYPAD_getPressedKey();
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	08 2f       	mov	r16, r24
     f30:	10 e0       	ldi	r17, 0x00	; 0
     f32:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <KEYPAD_getPressedKey>
     f36:	28 2f       	mov	r18, r24
     f38:	ce 01       	movw	r24, r28
     f3a:	02 96       	adiw	r24, 0x02	; 2
     f3c:	fc 01       	movw	r30, r24
     f3e:	e0 0f       	add	r30, r16
     f40:	f1 1f       	adc	r31, r17
     f42:	20 83       	st	Z, r18
		for (cnt = 109000; cnt; cnt--);
     f44:	88 ec       	ldi	r24, 0xC8	; 200
     f46:	99 ea       	ldi	r25, 0xA9	; 169
     f48:	a1 e0       	ldi	r26, 0x01	; 1
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	89 87       	std	Y+9, r24	; 0x09
     f4e:	9a 87       	std	Y+10, r25	; 0x0a
     f50:	ab 87       	std	Y+11, r26	; 0x0b
     f52:	bc 87       	std	Y+12, r27	; 0x0c
     f54:	0b c0       	rjmp	.+22     	; 0xf6c <HMI_setNewPassword+0x70>
     f56:	89 85       	ldd	r24, Y+9	; 0x09
     f58:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5a:	ab 85       	ldd	r26, Y+11	; 0x0b
     f5c:	bc 85       	ldd	r27, Y+12	; 0x0c
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	a1 09       	sbc	r26, r1
     f62:	b1 09       	sbc	r27, r1
     f64:	89 87       	std	Y+9, r24	; 0x09
     f66:	9a 87       	std	Y+10, r25	; 0x0a
     f68:	ab 87       	std	Y+11, r26	; 0x0b
     f6a:	bc 87       	std	Y+12, r27	; 0x0c
     f6c:	89 85       	ldd	r24, Y+9	; 0x09
     f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f70:	ab 85       	ldd	r26, Y+11	; 0x0b
     f72:	bc 85       	ldd	r27, Y+12	; 0x0c
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	a1 05       	cpc	r26, r1
     f78:	b1 05       	cpc	r27, r1
     f7a:	69 f7       	brne	.-38     	; 0xf56 <HMI_setNewPassword+0x5a>

		if((newPass_arr[counter] >= 0) && (newPass_arr[counter] <= 9))
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	ce 01       	movw	r24, r28
     f84:	02 96       	adiw	r24, 0x02	; 2
     f86:	fc 01       	movw	r30, r24
     f88:	e2 0f       	add	r30, r18
     f8a:	f3 1f       	adc	r31, r19
     f8c:	80 81       	ld	r24, Z
     f8e:	8a 30       	cpi	r24, 0x0A	; 10
     f90:	28 f5       	brcc	.+74     	; 0xfdc <HMI_setNewPassword+0xe0>
		{
			if(newPass_arr[counter] == 0)
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	ce 01       	movw	r24, r28
     f9a:	02 96       	adiw	r24, 0x02	; 2
     f9c:	fc 01       	movw	r30, r24
     f9e:	e2 0f       	add	r30, r18
     fa0:	f3 1f       	adc	r31, r19
     fa2:	80 81       	ld	r24, Z
     fa4:	88 23       	and	r24, r24
     fa6:	91 f4       	brne	.+36     	; 0xfcc <HMI_setNewPassword+0xd0>
			{
				/* replace zero by -1 to avoid conflict with null*/
				newPass_arr[counter] = -1;
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	ce 01       	movw	r24, r28
     fb0:	02 96       	adiw	r24, 0x02	; 2
     fb2:	fc 01       	movw	r30, r24
     fb4:	e2 0f       	add	r30, r18
     fb6:	f3 1f       	adc	r31, r19
     fb8:	8f ef       	ldi	r24, 0xFF	; 255
     fba:	80 83       	st	Z, r24
				LCD_setCurser(1, counter);
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	69 81       	ldd	r22, Y+1	; 0x01
     fc0:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_setCurser>
				LCD_sendData('*');
     fc4:	8a e2       	ldi	r24, 0x2A	; 42
     fc6:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <LCD_sendData>
     fca:	38 c0       	rjmp	.+112    	; 0x103c <HMI_setNewPassword+0x140>
			}
			else
			{
				LCD_setCurser(1, counter);
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	69 81       	ldd	r22, Y+1	; 0x01
     fd0:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_setCurser>
				LCD_sendData('*');
     fd4:	8a e2       	ldi	r24, 0x2A	; 42
     fd6:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <LCD_sendData>
     fda:	30 c0       	rjmp	.+96     	; 0x103c <HMI_setNewPassword+0x140>
			}
		}
		else
		{
			LCD_clearScreen();
     fdc:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Invalid Data");
     fe0:	23 eb       	ldi	r18, 0xB3	; 179
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	a9 01       	movw	r20, r18
     fea:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayStringRowColumn>
			for (cnt = 109000; cnt; cnt--);
     fee:	88 ec       	ldi	r24, 0xC8	; 200
     ff0:	99 ea       	ldi	r25, 0xA9	; 169
     ff2:	a1 e0       	ldi	r26, 0x01	; 1
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	89 87       	std	Y+9, r24	; 0x09
     ff8:	9a 87       	std	Y+10, r25	; 0x0a
     ffa:	ab 87       	std	Y+11, r26	; 0x0b
     ffc:	bc 87       	std	Y+12, r27	; 0x0c
     ffe:	0b c0       	rjmp	.+22     	; 0x1016 <HMI_setNewPassword+0x11a>
    1000:	89 85       	ldd	r24, Y+9	; 0x09
    1002:	9a 85       	ldd	r25, Y+10	; 0x0a
    1004:	ab 85       	ldd	r26, Y+11	; 0x0b
    1006:	bc 85       	ldd	r27, Y+12	; 0x0c
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	a1 09       	sbc	r26, r1
    100c:	b1 09       	sbc	r27, r1
    100e:	89 87       	std	Y+9, r24	; 0x09
    1010:	9a 87       	std	Y+10, r25	; 0x0a
    1012:	ab 87       	std	Y+11, r26	; 0x0b
    1014:	bc 87       	std	Y+12, r27	; 0x0c
    1016:	89 85       	ldd	r24, Y+9	; 0x09
    1018:	9a 85       	ldd	r25, Y+10	; 0x0a
    101a:	ab 85       	ldd	r26, Y+11	; 0x0b
    101c:	bc 85       	ldd	r27, Y+12	; 0x0c
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	a1 05       	cpc	r26, r1
    1022:	b1 05       	cpc	r27, r1
    1024:	69 f7       	brne	.-38     	; 0x1000 <HMI_setNewPassword+0x104>
			LCD_clearScreen();
    1026:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"New Password");
    102a:	26 ea       	ldi	r18, 0xA6	; 166
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	a9 01       	movw	r20, r18
    1034:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayStringRowColumn>
			counter = -1;
    1038:	8f ef       	ldi	r24, 0xFF	; 255
    103a:	89 83       	std	Y+1, r24	; 0x01
	uint8 counter;
	LCD_clearScreen();
	LCD_setCurser(0,0);
	LCD_displayString("New Password");

	for(counter = 0; counter<ARR_SIZE; counter++)
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	8f 5f       	subi	r24, 0xFF	; 255
    1040:	89 83       	std	Y+1, r24	; 0x01
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	85 30       	cpi	r24, 0x05	; 5
    1046:	08 f4       	brcc	.+2      	; 0x104a <HMI_setNewPassword+0x14e>
    1048:	71 cf       	rjmp	.-286    	; 0xf2c <HMI_setNewPassword+0x30>
			LCD_clearScreen();
			LCD_displayStringRowColumn(0,0,"New Password");
			counter = -1;
		}
	}
	newPass_arr[counter] = '#';
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	ce 01       	movw	r24, r28
    1052:	02 96       	adiw	r24, 0x02	; 2
    1054:	fc 01       	movw	r30, r24
    1056:	e2 0f       	add	r30, r18
    1058:	f3 1f       	adc	r31, r19
    105a:	83 e2       	ldi	r24, 0x23	; 35
    105c:	80 83       	st	Z, r24
	counter++;
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	8f 5f       	subi	r24, 0xFF	; 255
    1062:	89 83       	std	Y+1, r24	; 0x01
	newPass_arr[counter] = '\0';
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	ce 01       	movw	r24, r28
    106c:	02 96       	adiw	r24, 0x02	; 2
    106e:	fc 01       	movw	r30, r24
    1070:	e2 0f       	add	r30, r18
    1072:	f3 1f       	adc	r31, r19
    1074:	10 82       	st	Z, r1

	USART_sendByte(READY);
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	0e 94 10 14 	call	0x2820	; 0x2820 <USART_sendByte>
	USART_sendString(newPass_arr);
    107c:	ce 01       	movw	r24, r28
    107e:	02 96       	adiw	r24, 0x02	; 2
    1080:	0e 94 36 14 	call	0x286c	; 0x286c <USART_sendString>


	return;
}
    1084:	2c 96       	adiw	r28, 0x0c	; 12
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	08 95       	ret

0000109a <HMI_confirmPass>:
 * Description:
 *	Function to get the confirmation password and send it to control EUC
 *	to compare if the two password are matched or not.
 * */
uint8 HMI_confirmPass(void)
{
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	2e 97       	sbiw	r28, 0x0e	; 14
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
	volatile uint32 cnt;
	char confPass_arr[ARR_SIZE + 2];
	uint8 counter;
	uint8 errorConfirm = 0;
    10b2:	19 82       	std	Y+1, r1	; 0x01
	LCD_clearScreen();
    10b4:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_clearScreen>
	LCD_setCurser(0,0);
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_setCurser>
	LCD_displayString("Confirm Password");
    10c0:	80 ec       	ldi	r24, 0xC0	; 192
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_displayString>

	for(counter = 0; counter<ARR_SIZE; counter++)
    10c8:	1a 82       	std	Y+2, r1	; 0x02
    10ca:	b5 c0       	rjmp	.+362    	; 0x1236 <HMI_confirmPass+0x19c>
	{
		confPass_arr[counter] = KEYPAD_getPressedKey();
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	08 2f       	mov	r16, r24
    10d0:	10 e0       	ldi	r17, 0x00	; 0
    10d2:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <KEYPAD_getPressedKey>
    10d6:	28 2f       	mov	r18, r24
    10d8:	ce 01       	movw	r24, r28
    10da:	07 96       	adiw	r24, 0x07	; 7
    10dc:	fc 01       	movw	r30, r24
    10de:	e0 0f       	add	r30, r16
    10e0:	f1 1f       	adc	r31, r17
    10e2:	20 83       	st	Z, r18
		for (cnt = 109000; cnt; cnt--);
    10e4:	88 ec       	ldi	r24, 0xC8	; 200
    10e6:	99 ea       	ldi	r25, 0xA9	; 169
    10e8:	a1 e0       	ldi	r26, 0x01	; 1
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	8b 83       	std	Y+3, r24	; 0x03
    10ee:	9c 83       	std	Y+4, r25	; 0x04
    10f0:	ad 83       	std	Y+5, r26	; 0x05
    10f2:	be 83       	std	Y+6, r27	; 0x06
    10f4:	0b c0       	rjmp	.+22     	; 0x110c <HMI_confirmPass+0x72>
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	9c 81       	ldd	r25, Y+4	; 0x04
    10fa:	ad 81       	ldd	r26, Y+5	; 0x05
    10fc:	be 81       	ldd	r27, Y+6	; 0x06
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	a1 09       	sbc	r26, r1
    1102:	b1 09       	sbc	r27, r1
    1104:	8b 83       	std	Y+3, r24	; 0x03
    1106:	9c 83       	std	Y+4, r25	; 0x04
    1108:	ad 83       	std	Y+5, r26	; 0x05
    110a:	be 83       	std	Y+6, r27	; 0x06
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	9c 81       	ldd	r25, Y+4	; 0x04
    1110:	ad 81       	ldd	r26, Y+5	; 0x05
    1112:	be 81       	ldd	r27, Y+6	; 0x06
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	a1 05       	cpc	r26, r1
    1118:	b1 05       	cpc	r27, r1
    111a:	69 f7       	brne	.-38     	; 0x10f6 <HMI_confirmPass+0x5c>

		if((confPass_arr[counter] >= 0) && (confPass_arr[counter] <= 9))
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	ce 01       	movw	r24, r28
    1124:	07 96       	adiw	r24, 0x07	; 7
    1126:	fc 01       	movw	r30, r24
    1128:	e2 0f       	add	r30, r18
    112a:	f3 1f       	adc	r31, r19
    112c:	80 81       	ld	r24, Z
    112e:	8a 30       	cpi	r24, 0x0A	; 10
    1130:	28 f5       	brcc	.+74     	; 0x117c <HMI_confirmPass+0xe2>
		{
			/* replace zero by -1 to avoid conflict with null*/
			if(confPass_arr[counter] == 0)
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	ce 01       	movw	r24, r28
    113a:	07 96       	adiw	r24, 0x07	; 7
    113c:	fc 01       	movw	r30, r24
    113e:	e2 0f       	add	r30, r18
    1140:	f3 1f       	adc	r31, r19
    1142:	80 81       	ld	r24, Z
    1144:	88 23       	and	r24, r24
    1146:	91 f4       	brne	.+36     	; 0x116c <HMI_confirmPass+0xd2>
			{
				confPass_arr[counter] = -1;
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	ce 01       	movw	r24, r28
    1150:	07 96       	adiw	r24, 0x07	; 7
    1152:	fc 01       	movw	r30, r24
    1154:	e2 0f       	add	r30, r18
    1156:	f3 1f       	adc	r31, r19
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	80 83       	st	Z, r24
				LCD_setCurser(1, counter);
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	6a 81       	ldd	r22, Y+2	; 0x02
    1160:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_setCurser>
				LCD_sendData('*');
    1164:	8a e2       	ldi	r24, 0x2A	; 42
    1166:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <LCD_sendData>
    116a:	62 c0       	rjmp	.+196    	; 0x1230 <HMI_confirmPass+0x196>
			}
			else
			{
				LCD_setCurser(1, counter);
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	6a 81       	ldd	r22, Y+2	; 0x02
    1170:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_setCurser>
				LCD_sendData('*');
    1174:	8a e2       	ldi	r24, 0x2A	; 42
    1176:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <LCD_sendData>
    117a:	5a c0       	rjmp	.+180    	; 0x1230 <HMI_confirmPass+0x196>

			}
		}
		else
		{
			LCD_clearScreen();
    117c:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Invalid Data    ");
    1180:	21 ed       	ldi	r18, 0xD1	; 209
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	a9 01       	movw	r20, r18
    118a:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayStringRowColumn>
			for (cnt = 128000; cnt; cnt--);
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	94 ef       	ldi	r25, 0xF4	; 244
    1192:	a1 e0       	ldi	r26, 0x01	; 1
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	8b 83       	std	Y+3, r24	; 0x03
    1198:	9c 83       	std	Y+4, r25	; 0x04
    119a:	ad 83       	std	Y+5, r26	; 0x05
    119c:	be 83       	std	Y+6, r27	; 0x06
    119e:	0b c0       	rjmp	.+22     	; 0x11b6 <HMI_confirmPass+0x11c>
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	ad 81       	ldd	r26, Y+5	; 0x05
    11a6:	be 81       	ldd	r27, Y+6	; 0x06
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	a1 09       	sbc	r26, r1
    11ac:	b1 09       	sbc	r27, r1
    11ae:	8b 83       	std	Y+3, r24	; 0x03
    11b0:	9c 83       	std	Y+4, r25	; 0x04
    11b2:	ad 83       	std	Y+5, r26	; 0x05
    11b4:	be 83       	std	Y+6, r27	; 0x06
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	ad 81       	ldd	r26, Y+5	; 0x05
    11bc:	be 81       	ldd	r27, Y+6	; 0x06
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	a1 05       	cpc	r26, r1
    11c2:	b1 05       	cpc	r27, r1
    11c4:	69 f7       	brne	.-38     	; 0x11a0 <HMI_confirmPass+0x106>
			LCD_displayStringRowColumn(0,0,"Confirm Password");
    11c6:	20 ec       	ldi	r18, 0xC0	; 192
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	a9 01       	movw	r20, r18
    11d0:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayStringRowColumn>
			counter = -1;
    11d4:	8f ef       	ldi	r24, 0xFF	; 255
    11d6:	8a 83       	std	Y+2, r24	; 0x02
			errorConfirm++;
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	8f 5f       	subi	r24, 0xFF	; 255
    11dc:	89 83       	std	Y+1, r24	; 0x01
			if(errorConfirm >= 5)
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	85 30       	cpi	r24, 0x05	; 5
    11e2:	30 f1       	brcs	.+76     	; 0x1230 <HMI_confirmPass+0x196>
			{
				LCD_clearScreen();
    11e4:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Set New password");
    11e8:	22 ee       	ldi	r18, 0xE2	; 226
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	a9 01       	movw	r20, r18
    11f2:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayStringRowColumn>
				for (cnt = 128000; cnt; cnt--);
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	94 ef       	ldi	r25, 0xF4	; 244
    11fa:	a1 e0       	ldi	r26, 0x01	; 1
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	8b 83       	std	Y+3, r24	; 0x03
    1200:	9c 83       	std	Y+4, r25	; 0x04
    1202:	ad 83       	std	Y+5, r26	; 0x05
    1204:	be 83       	std	Y+6, r27	; 0x06
    1206:	0b c0       	rjmp	.+22     	; 0x121e <HMI_confirmPass+0x184>
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	ad 81       	ldd	r26, Y+5	; 0x05
    120e:	be 81       	ldd	r27, Y+6	; 0x06
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	a1 09       	sbc	r26, r1
    1214:	b1 09       	sbc	r27, r1
    1216:	8b 83       	std	Y+3, r24	; 0x03
    1218:	9c 83       	std	Y+4, r25	; 0x04
    121a:	ad 83       	std	Y+5, r26	; 0x05
    121c:	be 83       	std	Y+6, r27	; 0x06
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	ad 81       	ldd	r26, Y+5	; 0x05
    1224:	be 81       	ldd	r27, Y+6	; 0x06
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	a1 05       	cpc	r26, r1
    122a:	b1 05       	cpc	r27, r1
    122c:	69 f7       	brne	.-38     	; 0x1208 <HMI_confirmPass+0x16e>
    122e:	07 c0       	rjmp	.+14     	; 0x123e <HMI_confirmPass+0x1a4>
	uint8 errorConfirm = 0;
	LCD_clearScreen();
	LCD_setCurser(0,0);
	LCD_displayString("Confirm Password");

	for(counter = 0; counter<ARR_SIZE; counter++)
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	8f 5f       	subi	r24, 0xFF	; 255
    1234:	8a 83       	std	Y+2, r24	; 0x02
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	85 30       	cpi	r24, 0x05	; 5
    123a:	08 f4       	brcc	.+2      	; 0x123e <HMI_confirmPass+0x1a4>
    123c:	47 cf       	rjmp	.-370    	; 0x10cc <HMI_confirmPass+0x32>
				for (cnt = 128000; cnt; cnt--);
				break;
			}
		}
	}
	for(counter = 0; counter<ARR_SIZE; counter++)
    123e:	1a 82       	std	Y+2, r1	; 0x02
    1240:	10 c0       	rjmp	.+32     	; 0x1262 <HMI_confirmPass+0x1c8>
	{
		if(confPass_arr[counter] == 0)
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	ce 01       	movw	r24, r28
    124a:	07 96       	adiw	r24, 0x07	; 7
    124c:	fc 01       	movw	r30, r24
    124e:	e2 0f       	add	r30, r18
    1250:	f3 1f       	adc	r31, r19
    1252:	80 81       	ld	r24, Z
    1254:	88 23       	and	r24, r24
    1256:	11 f4       	brne	.+4      	; 0x125c <HMI_confirmPass+0x1c2>
		{
			return WRONG;
    1258:	1e 86       	std	Y+14, r1	; 0x0e
    125a:	25 c0       	rjmp	.+74     	; 0x12a6 <HMI_confirmPass+0x20c>
				for (cnt = 128000; cnt; cnt--);
				break;
			}
		}
	}
	for(counter = 0; counter<ARR_SIZE; counter++)
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	8f 5f       	subi	r24, 0xFF	; 255
    1260:	8a 83       	std	Y+2, r24	; 0x02
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	85 30       	cpi	r24, 0x05	; 5
    1266:	68 f3       	brcs	.-38     	; 0x1242 <HMI_confirmPass+0x1a8>
		if(confPass_arr[counter] == 0)
		{
			return WRONG;
		}
	}
	confPass_arr[counter] = '#';
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	ce 01       	movw	r24, r28
    1270:	07 96       	adiw	r24, 0x07	; 7
    1272:	fc 01       	movw	r30, r24
    1274:	e2 0f       	add	r30, r18
    1276:	f3 1f       	adc	r31, r19
    1278:	83 e2       	ldi	r24, 0x23	; 35
    127a:	80 83       	st	Z, r24
	counter++;
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	8f 5f       	subi	r24, 0xFF	; 255
    1280:	8a 83       	std	Y+2, r24	; 0x02
	confPass_arr[counter] = '\0';
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	ce 01       	movw	r24, r28
    128a:	07 96       	adiw	r24, 0x07	; 7
    128c:	fc 01       	movw	r30, r24
    128e:	e2 0f       	add	r30, r18
    1290:	f3 1f       	adc	r31, r19
    1292:	10 82       	st	Z, r1

	USART_sendByte(READY);
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	0e 94 10 14 	call	0x2820	; 0x2820 <USART_sendByte>
	USART_sendString(confPass_arr);
    129a:	ce 01       	movw	r24, r28
    129c:	07 96       	adiw	r24, 0x07	; 7
    129e:	0e 94 36 14 	call	0x286c	; 0x286c <USART_sendString>

	return READY;
    12a2:	82 e0       	ldi	r24, 0x02	; 2
    12a4:	8e 87       	std	Y+14, r24	; 0x0e
    12a6:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    12a8:	2e 96       	adiw	r28, 0x0e	; 14
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	08 95       	ret

000012be <HMI_enterPass>:
/*
 * Description:
 *	  Function to get the password from the user and send it to control EUC
 * */
uint8 HMI_enterPass(void)
{
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	2c 97       	sbiw	r28, 0x0c	; 12
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
	volatile uint32 cnt;
	char enterPass[ARR_SIZE+2];
	uint8 counter;

	LCD_clearScreen();
    12d6:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_clearScreen>
	LCD_setCurser(0,0);
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_setCurser>
	LCD_displayString("Enter Password");
    12e2:	83 ef       	ldi	r24, 0xF3	; 243
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_displayString>

	for(counter = 0; counter<ARR_SIZE; counter++)
    12ea:	19 82       	std	Y+1, r1	; 0x01
    12ec:	8b c0       	rjmp	.+278    	; 0x1404 <HMI_enterPass+0x146>
	{
		/* replace zero by -1 to avoid conflict with null*/
		enterPass[counter] = KEYPAD_getPressedKey();
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	08 2f       	mov	r16, r24
    12f2:	10 e0       	ldi	r17, 0x00	; 0
    12f4:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <KEYPAD_getPressedKey>
    12f8:	28 2f       	mov	r18, r24
    12fa:	ce 01       	movw	r24, r28
    12fc:	06 96       	adiw	r24, 0x06	; 6
    12fe:	fc 01       	movw	r30, r24
    1300:	e0 0f       	add	r30, r16
    1302:	f1 1f       	adc	r31, r17
    1304:	20 83       	st	Z, r18
		for (cnt = 109000; cnt; cnt--);
    1306:	88 ec       	ldi	r24, 0xC8	; 200
    1308:	99 ea       	ldi	r25, 0xA9	; 169
    130a:	a1 e0       	ldi	r26, 0x01	; 1
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	8a 83       	std	Y+2, r24	; 0x02
    1310:	9b 83       	std	Y+3, r25	; 0x03
    1312:	ac 83       	std	Y+4, r26	; 0x04
    1314:	bd 83       	std	Y+5, r27	; 0x05
    1316:	0b c0       	rjmp	.+22     	; 0x132e <HMI_enterPass+0x70>
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	9b 81       	ldd	r25, Y+3	; 0x03
    131c:	ac 81       	ldd	r26, Y+4	; 0x04
    131e:	bd 81       	ldd	r27, Y+5	; 0x05
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	a1 09       	sbc	r26, r1
    1324:	b1 09       	sbc	r27, r1
    1326:	8a 83       	std	Y+2, r24	; 0x02
    1328:	9b 83       	std	Y+3, r25	; 0x03
    132a:	ac 83       	std	Y+4, r26	; 0x04
    132c:	bd 83       	std	Y+5, r27	; 0x05
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	9b 81       	ldd	r25, Y+3	; 0x03
    1332:	ac 81       	ldd	r26, Y+4	; 0x04
    1334:	bd 81       	ldd	r27, Y+5	; 0x05
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	a1 05       	cpc	r26, r1
    133a:	b1 05       	cpc	r27, r1
    133c:	69 f7       	brne	.-38     	; 0x1318 <HMI_enterPass+0x5a>

		if((enterPass[counter] >= 0) && (enterPass[counter] <= 9))
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	ce 01       	movw	r24, r28
    1346:	06 96       	adiw	r24, 0x06	; 6
    1348:	fc 01       	movw	r30, r24
    134a:	e2 0f       	add	r30, r18
    134c:	f3 1f       	adc	r31, r19
    134e:	80 81       	ld	r24, Z
    1350:	8a 30       	cpi	r24, 0x0A	; 10
    1352:	28 f5       	brcc	.+74     	; 0x139e <HMI_enterPass+0xe0>
		{
			if(enterPass[counter] == 0)
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	ce 01       	movw	r24, r28
    135c:	06 96       	adiw	r24, 0x06	; 6
    135e:	fc 01       	movw	r30, r24
    1360:	e2 0f       	add	r30, r18
    1362:	f3 1f       	adc	r31, r19
    1364:	80 81       	ld	r24, Z
    1366:	88 23       	and	r24, r24
    1368:	91 f4       	brne	.+36     	; 0x138e <HMI_enterPass+0xd0>
			{
				enterPass[counter] = -1;
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	ce 01       	movw	r24, r28
    1372:	06 96       	adiw	r24, 0x06	; 6
    1374:	fc 01       	movw	r30, r24
    1376:	e2 0f       	add	r30, r18
    1378:	f3 1f       	adc	r31, r19
    137a:	8f ef       	ldi	r24, 0xFF	; 255
    137c:	80 83       	st	Z, r24
				LCD_setCurser(1, counter);
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	69 81       	ldd	r22, Y+1	; 0x01
    1382:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_setCurser>
				LCD_sendData('*');
    1386:	8a e2       	ldi	r24, 0x2A	; 42
    1388:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <LCD_sendData>
    138c:	38 c0       	rjmp	.+112    	; 0x13fe <HMI_enterPass+0x140>
			}
			else
			{
				LCD_setCurser(1, counter);
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	69 81       	ldd	r22, Y+1	; 0x01
    1392:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_setCurser>
				LCD_sendData('*');
    1396:	8a e2       	ldi	r24, 0x2A	; 42
    1398:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <LCD_sendData>
    139c:	30 c0       	rjmp	.+96     	; 0x13fe <HMI_enterPass+0x140>
			}
		}
		else
		{
			LCD_clearScreen();
    139e:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Invalid Data");
    13a2:	23 eb       	ldi	r18, 0xB3	; 179
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	a9 01       	movw	r20, r18
    13ac:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayStringRowColumn>
			for (cnt = 128000; cnt; cnt--);
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	94 ef       	ldi	r25, 0xF4	; 244
    13b4:	a1 e0       	ldi	r26, 0x01	; 1
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	8a 83       	std	Y+2, r24	; 0x02
    13ba:	9b 83       	std	Y+3, r25	; 0x03
    13bc:	ac 83       	std	Y+4, r26	; 0x04
    13be:	bd 83       	std	Y+5, r27	; 0x05
    13c0:	0b c0       	rjmp	.+22     	; 0x13d8 <HMI_enterPass+0x11a>
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	9b 81       	ldd	r25, Y+3	; 0x03
    13c6:	ac 81       	ldd	r26, Y+4	; 0x04
    13c8:	bd 81       	ldd	r27, Y+5	; 0x05
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	a1 09       	sbc	r26, r1
    13ce:	b1 09       	sbc	r27, r1
    13d0:	8a 83       	std	Y+2, r24	; 0x02
    13d2:	9b 83       	std	Y+3, r25	; 0x03
    13d4:	ac 83       	std	Y+4, r26	; 0x04
    13d6:	bd 83       	std	Y+5, r27	; 0x05
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	9b 81       	ldd	r25, Y+3	; 0x03
    13dc:	ac 81       	ldd	r26, Y+4	; 0x04
    13de:	bd 81       	ldd	r27, Y+5	; 0x05
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	a1 05       	cpc	r26, r1
    13e4:	b1 05       	cpc	r27, r1
    13e6:	69 f7       	brne	.-38     	; 0x13c2 <HMI_enterPass+0x104>
			LCD_clearScreen();
    13e8:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Enter Password");
    13ec:	23 ef       	ldi	r18, 0xF3	; 243
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	a9 01       	movw	r20, r18
    13f6:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayStringRowColumn>
			counter = -1;
    13fa:	8f ef       	ldi	r24, 0xFF	; 255
    13fc:	89 83       	std	Y+1, r24	; 0x01

	LCD_clearScreen();
	LCD_setCurser(0,0);
	LCD_displayString("Enter Password");

	for(counter = 0; counter<ARR_SIZE; counter++)
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	8f 5f       	subi	r24, 0xFF	; 255
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	85 30       	cpi	r24, 0x05	; 5
    1408:	08 f4       	brcc	.+2      	; 0x140c <HMI_enterPass+0x14e>
    140a:	71 cf       	rjmp	.-286    	; 0x12ee <HMI_enterPass+0x30>
			LCD_clearScreen();
			LCD_displayStringRowColumn(0,0,"Enter Password");
			counter = -1;
		}
	}
	enterPass[counter] = '#';
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	ce 01       	movw	r24, r28
    1414:	06 96       	adiw	r24, 0x06	; 6
    1416:	fc 01       	movw	r30, r24
    1418:	e2 0f       	add	r30, r18
    141a:	f3 1f       	adc	r31, r19
    141c:	83 e2       	ldi	r24, 0x23	; 35
    141e:	80 83       	st	Z, r24
	counter++;
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	8f 5f       	subi	r24, 0xFF	; 255
    1424:	89 83       	std	Y+1, r24	; 0x01
	enterPass[counter] = '\0';
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	ce 01       	movw	r24, r28
    142e:	06 96       	adiw	r24, 0x06	; 6
    1430:	fc 01       	movw	r30, r24
    1432:	e2 0f       	add	r30, r18
    1434:	f3 1f       	adc	r31, r19
    1436:	10 82       	st	Z, r1

	USART_sendByte(READY);
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	0e 94 10 14 	call	0x2820	; 0x2820 <USART_sendByte>
	USART_sendString(enterPass);
    143e:	ce 01       	movw	r24, r28
    1440:	06 96       	adiw	r24, 0x06	; 6
    1442:	0e 94 36 14 	call	0x286c	; 0x286c <USART_sendString>

	USART_sendByte(READY);
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	0e 94 10 14 	call	0x2820	; 0x2820 <USART_sendByte>
	return USART_receiveByte();
    144c:	0e 94 27 14 	call	0x284e	; 0x284e <USART_receiveByte>
}
    1450:	2c 96       	adiw	r28, 0x0c	; 12
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	08 95       	ret

00001466 <HMI_matchPass>:
 * Description:
 *	  Function that indicate if the entered password and the stored password
 *	  are matched or not
 * */
uint8 HMI_matchPass(void)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
	USART_sendByte(READY);
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	0e 94 10 14 	call	0x2820	; 0x2820 <USART_sendByte>

	return USART_receiveByte();
    1474:	0e 94 27 14 	call	0x284e	; 0x284e <USART_receiveByte>
}
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <HMI_mainOption>:
 *	  Function to display the main option of the system
 *	  + : open the door.
 *	  - : Change password.
 * */
void HMI_mainOption(void)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1486:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+: Open Door");
    148a:	22 e0       	ldi	r18, 0x02	; 2
    148c:	31 e0       	ldi	r19, 0x01	; 1
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	a9 01       	movw	r20, r18
    1494:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "-: Change Pass");
    1498:	2f e0       	ldi	r18, 0x0F	; 15
    149a:	31 e0       	ldi	r19, 0x01	; 1
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	a9 01       	movw	r20, r18
    14a2:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayStringRowColumn>

}
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <HMI_chooseOption>:
 *	  + : open the door.
 *	  - : Change password.
 *	  and send it to CONTROL ECU
 * */
uint8 HMI_chooseOption(void)
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <HMI_chooseOption+0x6>
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <HMI_chooseOption+0x8>
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <HMI_chooseOption+0xa>
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
	uint8 key_option;
	volatile uint32 cnt;
	key_option = KEYPAD_getPressedKey();
    14ba:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <KEYPAD_getPressedKey>
    14be:	89 83       	std	Y+1, r24	; 0x01
	for (cnt = 128000; cnt; cnt--);
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	94 ef       	ldi	r25, 0xF4	; 244
    14c4:	a1 e0       	ldi	r26, 0x01	; 1
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	8a 83       	std	Y+2, r24	; 0x02
    14ca:	9b 83       	std	Y+3, r25	; 0x03
    14cc:	ac 83       	std	Y+4, r26	; 0x04
    14ce:	bd 83       	std	Y+5, r27	; 0x05
    14d0:	0b c0       	rjmp	.+22     	; 0x14e8 <HMI_chooseOption+0x3c>
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	9b 81       	ldd	r25, Y+3	; 0x03
    14d6:	ac 81       	ldd	r26, Y+4	; 0x04
    14d8:	bd 81       	ldd	r27, Y+5	; 0x05
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	a1 09       	sbc	r26, r1
    14de:	b1 09       	sbc	r27, r1
    14e0:	8a 83       	std	Y+2, r24	; 0x02
    14e2:	9b 83       	std	Y+3, r25	; 0x03
    14e4:	ac 83       	std	Y+4, r26	; 0x04
    14e6:	bd 83       	std	Y+5, r27	; 0x05
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	9b 81       	ldd	r25, Y+3	; 0x03
    14ec:	ac 81       	ldd	r26, Y+4	; 0x04
    14ee:	bd 81       	ldd	r27, Y+5	; 0x05
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	a1 05       	cpc	r26, r1
    14f4:	b1 05       	cpc	r27, r1
    14f6:	69 f7       	brne	.-38     	; 0x14d2 <HMI_chooseOption+0x26>

	if((key_option == '+') || (key_option == '-'))
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	8b 32       	cpi	r24, 0x2B	; 43
    14fc:	19 f0       	breq	.+6      	; 0x1504 <HMI_chooseOption+0x58>
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	8d 32       	cpi	r24, 0x2D	; 45
    1502:	d9 f4       	brne	.+54     	; 0x153a <HMI_chooseOption+0x8e>
	{
		if(key_option == '+')
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	8b 32       	cpi	r24, 0x2B	; 43
    1508:	49 f4       	brne	.+18     	; 0x151c <HMI_chooseOption+0x70>
		{
			USART_sendByte(READY);
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	0e 94 10 14 	call	0x2820	; 0x2820 <USART_sendByte>
			USART_sendByte(OPEN_DOOR);
    1510:	83 e0       	ldi	r24, 0x03	; 3
    1512:	0e 94 10 14 	call	0x2820	; 0x2820 <USART_sendByte>
			return OPEN_DOOR;
    1516:	83 e0       	ldi	r24, 0x03	; 3
    1518:	8e 83       	std	Y+6, r24	; 0x06
    151a:	11 c0       	rjmp	.+34     	; 0x153e <HMI_chooseOption+0x92>
		}
		else if(key_option == '-')
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	8d 32       	cpi	r24, 0x2D	; 45
    1520:	49 f4       	brne	.+18     	; 0x1534 <HMI_chooseOption+0x88>
		{
			USART_sendByte(READY);
    1522:	82 e0       	ldi	r24, 0x02	; 2
    1524:	0e 94 10 14 	call	0x2820	; 0x2820 <USART_sendByte>
			USART_sendByte(CHANGE_PASS);
    1528:	85 e0       	ldi	r24, 0x05	; 5
    152a:	0e 94 10 14 	call	0x2820	; 0x2820 <USART_sendByte>
			return CHANGE_PASS;
    152e:	85 e0       	ldi	r24, 0x05	; 5
    1530:	8e 83       	std	Y+6, r24	; 0x06
    1532:	05 c0       	rjmp	.+10     	; 0x153e <HMI_chooseOption+0x92>
	else
	{
		return NOT_INITIAL;

	}
	return NOT_INITIAL;
    1534:	8b e0       	ldi	r24, 0x0B	; 11
    1536:	8e 83       	std	Y+6, r24	; 0x06
    1538:	02 c0       	rjmp	.+4      	; 0x153e <HMI_chooseOption+0x92>
			return CHANGE_PASS;
		}
	}
	else
	{
		return NOT_INITIAL;
    153a:	8b e0       	ldi	r24, 0x0B	; 11
    153c:	8e 83       	std	Y+6, r24	; 0x06
    153e:	8e 81       	ldd	r24, Y+6	; 0x06

	}
	return NOT_INITIAL;
}
    1540:	26 96       	adiw	r28, 0x06	; 6
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <HMI_openDoor>:
 * Description:
 *	  Function to display the state of the door "Door is opening"
 *	  after choosing from the main option --> open the door for 15 seconds.
 * */
void HMI_openDoor(void)
{
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    155a:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is opening");
    155e:	2e e1       	ldi	r18, 0x1E	; 30
    1560:	31 e0       	ldi	r19, 0x01	; 1
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	a9 01       	movw	r20, r18
    1568:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayStringRowColumn>
}
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <HMI_closeDoor>:
 * Description:
 *	  Function to display the state of the door "Door is closing"
 *	  after choosing from the main option --> open the door for 15 seconds.
 * */
void HMI_closeDoor(void)
{
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    157a:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is closing");
    157e:	2e e2       	ldi	r18, 0x2E	; 46
    1580:	31 e0       	ldi	r19, 0x01	; 1
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	a9 01       	movw	r20, r18
    1588:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayStringRowColumn>
}
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <HMI_LCDProcessing>:
 *	  1- 15 seconds rotates in clockwise direction
 *	  2- 15 seconds rotates in counter clockwise direction.
 *	  3- stop motor
 * */
void HMI_LCDProcessing(void)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    159a:	80 91 62 01 	lds	r24, 0x0162
    159e:	90 91 63 01 	lds	r25, 0x0163
    15a2:	01 96       	adiw	r24, 0x01	; 1
    15a4:	90 93 63 01 	sts	0x0163, r25
    15a8:	80 93 62 01 	sts	0x0162, r24

	if(g_tick == OPEN_LCD_TIMER_PER_SECOND)
    15ac:	80 91 62 01 	lds	r24, 0x0162
    15b0:	90 91 63 01 	lds	r25, 0x0163
    15b4:	21 e0       	ldi	r18, 0x01	; 1
    15b6:	82 3c       	cpi	r24, 0xC2	; 194
    15b8:	92 07       	cpc	r25, r18
    15ba:	21 f4       	brne	.+8      	; 0x15c4 <HMI_LCDProcessing+0x32>
	{
		open_flag = 1;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	80 93 64 01 	sts	0x0164, r24
    15c2:	0f c0       	rjmp	.+30     	; 0x15e2 <HMI_LCDProcessing+0x50>
	}
	else if(g_tick > CLOSE_LCD_TIMER_PER_SECOND)
    15c4:	80 91 62 01 	lds	r24, 0x0162
    15c8:	90 91 63 01 	lds	r25, 0x0163
    15cc:	23 e0       	ldi	r18, 0x03	; 3
    15ce:	85 38       	cpi	r24, 0x85	; 133
    15d0:	92 07       	cpc	r25, r18
    15d2:	38 f0       	brcs	.+14     	; 0x15e2 <HMI_LCDProcessing+0x50>
	{
		g_tick = 0;
    15d4:	10 92 63 01 	sts	0x0163, r1
    15d8:	10 92 62 01 	sts	0x0162, r1
		stop_flag = 1;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	80 93 66 01 	sts	0x0166, r24
	}
}
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <HMI_Buzzer>:
/*
 * Description:
 *		Function to start display the alarm for 1 minute.
 * */
void HMI_Buzzer(void)
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
	while (1)
	{
		if(stop_buzzer > 0)
    15f0:	80 91 67 01 	lds	r24, 0x0167
    15f4:	88 23       	and	r24, r24
    15f6:	41 f4       	brne	.+16     	; 0x1608 <HMI_Buzzer+0x20>
		{
			break;
		}
		else
		{
			LCD_displayStringRowColumn(0,5, "Alarm");
    15f8:	2e e3       	ldi	r18, 0x3E	; 62
    15fa:	31 e0       	ldi	r19, 0x01	; 1
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	65 e0       	ldi	r22, 0x05	; 5
    1600:	a9 01       	movw	r20, r18
    1602:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LCD_displayStringRowColumn>
    1606:	f4 cf       	rjmp	.-24     	; 0x15f0 <HMI_Buzzer+0x8>

		}
	}
}
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <HMI_buzzerProcessing>:
/*
 * Description:
 *		Function to display alarm and stop after one minute
 * */
void HMI_buzzerProcessing(void)
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1616:	80 91 62 01 	lds	r24, 0x0162
    161a:	90 91 63 01 	lds	r25, 0x0163
    161e:	01 96       	adiw	r24, 0x01	; 1
    1620:	90 93 63 01 	sts	0x0163, r25
    1624:	80 93 62 01 	sts	0x0162, r24

	if(g_tick == CLOSE_BUZZER_TIMER_FOR_ONE_MIN)
    1628:	80 91 62 01 	lds	r24, 0x0162
    162c:	90 91 63 01 	lds	r25, 0x0163
    1630:	27 e0       	ldi	r18, 0x07	; 7
    1632:	84 34       	cpi	r24, 0x44	; 68
    1634:	92 07       	cpc	r25, r18
    1636:	21 f4       	brne	.+8      	; 0x1640 <HMI_buzzerProcessing+0x32>
	{
		stop_buzzer = 1;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	80 93 67 01 	sts	0x0167, r24
    163e:	0c c0       	rjmp	.+24     	; 0x1658 <HMI_buzzerProcessing+0x4a>

	}
	else if(g_tick > CLOSE_BUZZER_TIMER_FOR_ONE_MIN)
    1640:	80 91 62 01 	lds	r24, 0x0162
    1644:	90 91 63 01 	lds	r25, 0x0163
    1648:	27 e0       	ldi	r18, 0x07	; 7
    164a:	85 34       	cpi	r24, 0x45	; 69
    164c:	92 07       	cpc	r25, r18
    164e:	20 f0       	brcs	.+8      	; 0x1658 <HMI_buzzerProcessing+0x4a>
	{
		g_tick = 0;
    1650:	10 92 63 01 	sts	0x0163, r1
    1654:	10 92 62 01 	sts	0x0162, r1
	}

}
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <LCD_init>:

/*
 * Description:
 * initialize LCD*/
void LCD_init(void)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
	/*Configure RS, RW & E as output pins*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	41 e0       	ldi	r20, 0x01	; 1
    166c:	0e 94 a2 14 	call	0x2944	; 0x2944 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	61 e0       	ldi	r22, 0x01	; 1
    1674:	41 e0       	ldi	r20, 0x01	; 1
    1676:	0e 94 a2 14 	call	0x2944	; 0x2944 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	62 e0       	ldi	r22, 0x02	; 2
    167e:	41 e0       	ldi	r20, 0x01	; 1
    1680:	0e 94 a2 14 	call	0x2944	; 0x2944 <GPIO_setupPinDirection>

	/*Configure Data PORT as output*/
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1684:	82 e0       	ldi	r24, 0x02	; 2
    1686:	6f ef       	ldi	r22, 0xFF	; 255
    1688:	0e 94 13 17 	call	0x2e26	; 0x2e26 <GPIO_setupPortDirection>
	/* 2 lines, 8 BIT Mode */
	LCD_sendCommand(TWO_LINE_8BIT_MODE);
    168c:	88 e3       	ldi	r24, 0x38	; 56
    168e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_sendCommand>
	/* CURSER OFF */
	LCD_sendCommand(DISPLAY_ON_CURSER_OFF);
    1692:	8c e0       	ldi	r24, 0x0C	; 12
    1694:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_sendCommand>

	/* Clear Screen */
	LCD_sendCommand(CLEAR_DISPLAY_WITH_DDRAM);
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_sendCommand>
}
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <LCD_displayString>:
/*
 * Description:
 * send the required string to LCD.*/

void LCD_displayString(const char *str_ptr)
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <LCD_displayString+0x6>
    16aa:	0f 92       	push	r0
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	9b 83       	std	Y+3, r25	; 0x03
    16b2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    16b4:	19 82       	std	Y+1, r1	; 0x01
    16b6:	0e c0       	rjmp	.+28     	; 0x16d4 <LCD_displayString+0x30>
	while(str_ptr[i] != '\0')
	{
		LCD_sendData(str_ptr[i]);
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	9b 81       	ldd	r25, Y+3	; 0x03
    16c2:	fc 01       	movw	r30, r24
    16c4:	e2 0f       	add	r30, r18
    16c6:	f3 1f       	adc	r31, r19
    16c8:	80 81       	ld	r24, Z
    16ca:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <LCD_sendData>
		i++;
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	8f 5f       	subi	r24, 0xFF	; 255
    16d2:	89 83       	std	Y+1, r24	; 0x01
 * send the required string to LCD.*/

void LCD_displayString(const char *str_ptr)
{
	uint8 i = 0;
	while(str_ptr[i] != '\0')
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	9b 81       	ldd	r25, Y+3	; 0x03
    16de:	fc 01       	movw	r30, r24
    16e0:	e2 0f       	add	r30, r18
    16e2:	f3 1f       	adc	r31, r19
    16e4:	80 81       	ld	r24, Z
    16e6:	88 23       	and	r24, r24
    16e8:	39 f7       	brne	.-50     	; 0x16b8 <LCD_displayString+0x14>
	{
		LCD_sendData(str_ptr[i]);
		i++;
	}
}
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <LCD_sendCommand>:

/*
 * Description:
 * send the required command to LCD.*/
void LCD_sendCommand(uint8 command)
{
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	e9 97       	sbiw	r28, 0x39	; 57
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	89 af       	std	Y+57, r24	; 0x39
	/* Command mode Rs = 0 */
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	60 e0       	ldi	r22, 0x00	; 0
    1710:	40 e0       	ldi	r20, 0x00	; 0
    1712:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <GPIO_writePin>
	/* Write Mode RW = 0*/
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	61 e0       	ldi	r22, 0x01	; 1
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <GPIO_writePin>
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	a0 e8       	ldi	r26, 0x80	; 128
    1726:	bf e3       	ldi	r27, 0x3F	; 63
    1728:	8d ab       	std	Y+53, r24	; 0x35
    172a:	9e ab       	std	Y+54, r25	; 0x36
    172c:	af ab       	std	Y+55, r26	; 0x37
    172e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1730:	6d a9       	ldd	r22, Y+53	; 0x35
    1732:	7e a9       	ldd	r23, Y+54	; 0x36
    1734:	8f a9       	ldd	r24, Y+55	; 0x37
    1736:	98 ad       	ldd	r25, Y+56	; 0x38
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	4a ef       	ldi	r20, 0xFA	; 250
    173e:	54 e4       	ldi	r21, 0x44	; 68
    1740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	89 ab       	std	Y+49, r24	; 0x31
    174a:	9a ab       	std	Y+50, r25	; 0x32
    174c:	ab ab       	std	Y+51, r26	; 0x33
    174e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1750:	69 a9       	ldd	r22, Y+49	; 0x31
    1752:	7a a9       	ldd	r23, Y+50	; 0x32
    1754:	8b a9       	ldd	r24, Y+51	; 0x33
    1756:	9c a9       	ldd	r25, Y+52	; 0x34
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	40 e8       	ldi	r20, 0x80	; 128
    175e:	5f e3       	ldi	r21, 0x3F	; 63
    1760:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1764:	88 23       	and	r24, r24
    1766:	2c f4       	brge	.+10     	; 0x1772 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	98 ab       	std	Y+48, r25	; 0x30
    176e:	8f a7       	std	Y+47, r24	; 0x2f
    1770:	3f c0       	rjmp	.+126    	; 0x17f0 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1772:	69 a9       	ldd	r22, Y+49	; 0x31
    1774:	7a a9       	ldd	r23, Y+50	; 0x32
    1776:	8b a9       	ldd	r24, Y+51	; 0x33
    1778:	9c a9       	ldd	r25, Y+52	; 0x34
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	3f ef       	ldi	r19, 0xFF	; 255
    177e:	4f e7       	ldi	r20, 0x7F	; 127
    1780:	57 e4       	ldi	r21, 0x47	; 71
    1782:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1786:	18 16       	cp	r1, r24
    1788:	4c f5       	brge	.+82     	; 0x17dc <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    178a:	6d a9       	ldd	r22, Y+53	; 0x35
    178c:	7e a9       	ldd	r23, Y+54	; 0x36
    178e:	8f a9       	ldd	r24, Y+55	; 0x37
    1790:	98 ad       	ldd	r25, Y+56	; 0x38
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	40 e2       	ldi	r20, 0x20	; 32
    1798:	51 e4       	ldi	r21, 0x41	; 65
    179a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	bc 01       	movw	r22, r24
    17a4:	cd 01       	movw	r24, r26
    17a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	98 ab       	std	Y+48, r25	; 0x30
    17b0:	8f a7       	std	Y+47, r24	; 0x2f
    17b2:	0f c0       	rjmp	.+30     	; 0x17d2 <LCD_sendCommand+0xdc>
    17b4:	88 ec       	ldi	r24, 0xC8	; 200
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	9e a7       	std	Y+46, r25	; 0x2e
    17ba:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    17be:	9e a5       	ldd	r25, Y+46	; 0x2e
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	f1 f7       	brne	.-4      	; 0x17c0 <LCD_sendCommand+0xca>
    17c4:	9e a7       	std	Y+46, r25	; 0x2e
    17c6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ca:	98 a9       	ldd	r25, Y+48	; 0x30
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	98 ab       	std	Y+48, r25	; 0x30
    17d0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    17d4:	98 a9       	ldd	r25, Y+48	; 0x30
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	69 f7       	brne	.-38     	; 0x17b4 <LCD_sendCommand+0xbe>
    17da:	14 c0       	rjmp	.+40     	; 0x1804 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17dc:	69 a9       	ldd	r22, Y+49	; 0x31
    17de:	7a a9       	ldd	r23, Y+50	; 0x32
    17e0:	8b a9       	ldd	r24, Y+51	; 0x33
    17e2:	9c a9       	ldd	r25, Y+52	; 0x34
    17e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	98 ab       	std	Y+48, r25	; 0x30
    17ee:	8f a7       	std	Y+47, r24	; 0x2f
    17f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17f2:	98 a9       	ldd	r25, Y+48	; 0x30
    17f4:	9c a7       	std	Y+44, r25	; 0x2c
    17f6:	8b a7       	std	Y+43, r24	; 0x2b
    17f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    17fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	f1 f7       	brne	.-4      	; 0x17fc <LCD_sendCommand+0x106>
    1800:	9c a7       	std	Y+44, r25	; 0x2c
    1802:	8b a7       	std	Y+43, r24	; 0x2b
	/*Address setup time tas = 50 ns */
	_delay_ms(1);
	/*Enable LCD */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	62 e0       	ldi	r22, 0x02	; 2
    1808:	41 e0       	ldi	r20, 0x01	; 1
    180a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <GPIO_writePin>
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	a0 e8       	ldi	r26, 0x80	; 128
    1814:	bf e3       	ldi	r27, 0x3F	; 63
    1816:	8f a3       	std	Y+39, r24	; 0x27
    1818:	98 a7       	std	Y+40, r25	; 0x28
    181a:	a9 a7       	std	Y+41, r26	; 0x29
    181c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181e:	6f a1       	ldd	r22, Y+39	; 0x27
    1820:	78 a5       	ldd	r23, Y+40	; 0x28
    1822:	89 a5       	ldd	r24, Y+41	; 0x29
    1824:	9a a5       	ldd	r25, Y+42	; 0x2a
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	4a ef       	ldi	r20, 0xFA	; 250
    182c:	54 e4       	ldi	r21, 0x44	; 68
    182e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	8b a3       	std	Y+35, r24	; 0x23
    1838:	9c a3       	std	Y+36, r25	; 0x24
    183a:	ad a3       	std	Y+37, r26	; 0x25
    183c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    183e:	6b a1       	ldd	r22, Y+35	; 0x23
    1840:	7c a1       	ldd	r23, Y+36	; 0x24
    1842:	8d a1       	ldd	r24, Y+37	; 0x25
    1844:	9e a1       	ldd	r25, Y+38	; 0x26
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e8       	ldi	r20, 0x80	; 128
    184c:	5f e3       	ldi	r21, 0x3F	; 63
    184e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1852:	88 23       	and	r24, r24
    1854:	2c f4       	brge	.+10     	; 0x1860 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	9a a3       	std	Y+34, r25	; 0x22
    185c:	89 a3       	std	Y+33, r24	; 0x21
    185e:	3f c0       	rjmp	.+126    	; 0x18de <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1860:	6b a1       	ldd	r22, Y+35	; 0x23
    1862:	7c a1       	ldd	r23, Y+36	; 0x24
    1864:	8d a1       	ldd	r24, Y+37	; 0x25
    1866:	9e a1       	ldd	r25, Y+38	; 0x26
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	3f ef       	ldi	r19, 0xFF	; 255
    186c:	4f e7       	ldi	r20, 0x7F	; 127
    186e:	57 e4       	ldi	r21, 0x47	; 71
    1870:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1874:	18 16       	cp	r1, r24
    1876:	4c f5       	brge	.+82     	; 0x18ca <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1878:	6f a1       	ldd	r22, Y+39	; 0x27
    187a:	78 a5       	ldd	r23, Y+40	; 0x28
    187c:	89 a5       	ldd	r24, Y+41	; 0x29
    187e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e2       	ldi	r20, 0x20	; 32
    1886:	51 e4       	ldi	r21, 0x41	; 65
    1888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	bc 01       	movw	r22, r24
    1892:	cd 01       	movw	r24, r26
    1894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	9a a3       	std	Y+34, r25	; 0x22
    189e:	89 a3       	std	Y+33, r24	; 0x21
    18a0:	0f c0       	rjmp	.+30     	; 0x18c0 <LCD_sendCommand+0x1ca>
    18a2:	88 ec       	ldi	r24, 0xC8	; 200
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	98 a3       	std	Y+32, r25	; 0x20
    18a8:	8f 8f       	std	Y+31, r24	; 0x1f
    18aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18ac:	98 a1       	ldd	r25, Y+32	; 0x20
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <LCD_sendCommand+0x1b8>
    18b2:	98 a3       	std	Y+32, r25	; 0x20
    18b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b6:	89 a1       	ldd	r24, Y+33	; 0x21
    18b8:	9a a1       	ldd	r25, Y+34	; 0x22
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	9a a3       	std	Y+34, r25	; 0x22
    18be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c0:	89 a1       	ldd	r24, Y+33	; 0x21
    18c2:	9a a1       	ldd	r25, Y+34	; 0x22
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	69 f7       	brne	.-38     	; 0x18a2 <LCD_sendCommand+0x1ac>
    18c8:	14 c0       	rjmp	.+40     	; 0x18f2 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ca:	6b a1       	ldd	r22, Y+35	; 0x23
    18cc:	7c a1       	ldd	r23, Y+36	; 0x24
    18ce:	8d a1       	ldd	r24, Y+37	; 0x25
    18d0:	9e a1       	ldd	r25, Y+38	; 0x26
    18d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	9a a3       	std	Y+34, r25	; 0x22
    18dc:	89 a3       	std	Y+33, r24	; 0x21
    18de:	89 a1       	ldd	r24, Y+33	; 0x21
    18e0:	9a a1       	ldd	r25, Y+34	; 0x22
    18e2:	9e 8f       	std	Y+30, r25	; 0x1e
    18e4:	8d 8f       	std	Y+29, r24	; 0x1d
    18e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <LCD_sendCommand+0x1f4>
    18ee:	9e 8f       	std	Y+30, r25	; 0x1e
    18f0:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Data setup time tpw - tdsw = 290 - 100 = 190 ns*/
	_delay_ms(1);
	/* Send the required command */
	GPIO_writePort(LCD_DATA_PORT_ID, command);
    18f2:	82 e0       	ldi	r24, 0x02	; 2
    18f4:	69 ad       	ldd	r22, Y+57	; 0x39
    18f6:	0e 94 57 17 	call	0x2eae	; 0x2eae <GPIO_writePort>
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a0 e8       	ldi	r26, 0x80	; 128
    1900:	bf e3       	ldi	r27, 0x3F	; 63
    1902:	89 8f       	std	Y+25, r24	; 0x19
    1904:	9a 8f       	std	Y+26, r25	; 0x1a
    1906:	ab 8f       	std	Y+27, r26	; 0x1b
    1908:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190a:	69 8d       	ldd	r22, Y+25	; 0x19
    190c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    190e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1910:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	4a ef       	ldi	r20, 0xFA	; 250
    1918:	54 e4       	ldi	r21, 0x44	; 68
    191a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	8d 8b       	std	Y+21, r24	; 0x15
    1924:	9e 8b       	std	Y+22, r25	; 0x16
    1926:	af 8b       	std	Y+23, r26	; 0x17
    1928:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    192a:	6d 89       	ldd	r22, Y+21	; 0x15
    192c:	7e 89       	ldd	r23, Y+22	; 0x16
    192e:	8f 89       	ldd	r24, Y+23	; 0x17
    1930:	98 8d       	ldd	r25, Y+24	; 0x18
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e8       	ldi	r20, 0x80	; 128
    1938:	5f e3       	ldi	r21, 0x3F	; 63
    193a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193e:	88 23       	and	r24, r24
    1940:	2c f4       	brge	.+10     	; 0x194c <LCD_sendCommand+0x256>
		__ticks = 1;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	9c 8b       	std	Y+20, r25	; 0x14
    1948:	8b 8b       	std	Y+19, r24	; 0x13
    194a:	3f c0       	rjmp	.+126    	; 0x19ca <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    194c:	6d 89       	ldd	r22, Y+21	; 0x15
    194e:	7e 89       	ldd	r23, Y+22	; 0x16
    1950:	8f 89       	ldd	r24, Y+23	; 0x17
    1952:	98 8d       	ldd	r25, Y+24	; 0x18
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	3f ef       	ldi	r19, 0xFF	; 255
    1958:	4f e7       	ldi	r20, 0x7F	; 127
    195a:	57 e4       	ldi	r21, 0x47	; 71
    195c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1960:	18 16       	cp	r1, r24
    1962:	4c f5       	brge	.+82     	; 0x19b6 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1964:	69 8d       	ldd	r22, Y+25	; 0x19
    1966:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1968:	8b 8d       	ldd	r24, Y+27	; 0x1b
    196a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e2       	ldi	r20, 0x20	; 32
    1972:	51 e4       	ldi	r21, 0x41	; 65
    1974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	bc 01       	movw	r22, r24
    197e:	cd 01       	movw	r24, r26
    1980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	9c 8b       	std	Y+20, r25	; 0x14
    198a:	8b 8b       	std	Y+19, r24	; 0x13
    198c:	0f c0       	rjmp	.+30     	; 0x19ac <LCD_sendCommand+0x2b6>
    198e:	88 ec       	ldi	r24, 0xC8	; 200
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	9a 8b       	std	Y+18, r25	; 0x12
    1994:	89 8b       	std	Y+17, r24	; 0x11
    1996:	89 89       	ldd	r24, Y+17	; 0x11
    1998:	9a 89       	ldd	r25, Y+18	; 0x12
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	f1 f7       	brne	.-4      	; 0x199a <LCD_sendCommand+0x2a4>
    199e:	9a 8b       	std	Y+18, r25	; 0x12
    19a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a2:	8b 89       	ldd	r24, Y+19	; 0x13
    19a4:	9c 89       	ldd	r25, Y+20	; 0x14
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	9c 8b       	std	Y+20, r25	; 0x14
    19aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ac:	8b 89       	ldd	r24, Y+19	; 0x13
    19ae:	9c 89       	ldd	r25, Y+20	; 0x14
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	69 f7       	brne	.-38     	; 0x198e <LCD_sendCommand+0x298>
    19b4:	14 c0       	rjmp	.+40     	; 0x19de <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b6:	6d 89       	ldd	r22, Y+21	; 0x15
    19b8:	7e 89       	ldd	r23, Y+22	; 0x16
    19ba:	8f 89       	ldd	r24, Y+23	; 0x17
    19bc:	98 8d       	ldd	r25, Y+24	; 0x18
    19be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	9c 8b       	std	Y+20, r25	; 0x14
    19c8:	8b 8b       	std	Y+19, r24	; 0x13
    19ca:	8b 89       	ldd	r24, Y+19	; 0x13
    19cc:	9c 89       	ldd	r25, Y+20	; 0x14
    19ce:	98 8b       	std	Y+16, r25	; 0x10
    19d0:	8f 87       	std	Y+15, r24	; 0x0f
    19d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d4:	98 89       	ldd	r25, Y+16	; 0x10
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	f1 f7       	brne	.-4      	; 0x19d6 <LCD_sendCommand+0x2e0>
    19da:	98 8b       	std	Y+16, r25	; 0x10
    19dc:	8f 87       	std	Y+15, r24	; 0x0f
	/* Disable LCD tdsw = 100ns */
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	62 e0       	ldi	r22, 0x02	; 2
    19e2:	40 e0       	ldi	r20, 0x00	; 0
    19e4:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <GPIO_writePin>
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	a0 e8       	ldi	r26, 0x80	; 128
    19ee:	bf e3       	ldi	r27, 0x3F	; 63
    19f0:	8b 87       	std	Y+11, r24	; 0x0b
    19f2:	9c 87       	std	Y+12, r25	; 0x0c
    19f4:	ad 87       	std	Y+13, r26	; 0x0d
    19f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    19fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	4a ef       	ldi	r20, 0xFA	; 250
    1a06:	54 e4       	ldi	r21, 0x44	; 68
    1a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	8f 83       	std	Y+7, r24	; 0x07
    1a12:	98 87       	std	Y+8, r25	; 0x08
    1a14:	a9 87       	std	Y+9, r26	; 0x09
    1a16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a18:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1a:	78 85       	ldd	r23, Y+8	; 0x08
    1a1c:	89 85       	ldd	r24, Y+9	; 0x09
    1a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e8       	ldi	r20, 0x80	; 128
    1a26:	5f e3       	ldi	r21, 0x3F	; 63
    1a28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a2c:	88 23       	and	r24, r24
    1a2e:	2c f4       	brge	.+10     	; 0x1a3a <LCD_sendCommand+0x344>
		__ticks = 1;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	9e 83       	std	Y+6, r25	; 0x06
    1a36:	8d 83       	std	Y+5, r24	; 0x05
    1a38:	3f c0       	rjmp	.+126    	; 0x1ab8 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3c:	78 85       	ldd	r23, Y+8	; 0x08
    1a3e:	89 85       	ldd	r24, Y+9	; 0x09
    1a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	3f ef       	ldi	r19, 0xFF	; 255
    1a46:	4f e7       	ldi	r20, 0x7F	; 127
    1a48:	57 e4       	ldi	r21, 0x47	; 71
    1a4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a4e:	18 16       	cp	r1, r24
    1a50:	4c f5       	brge	.+82     	; 0x1aa4 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e2       	ldi	r20, 0x20	; 32
    1a60:	51 e4       	ldi	r21, 0x41	; 65
    1a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	bc 01       	movw	r22, r24
    1a6c:	cd 01       	movw	r24, r26
    1a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	9e 83       	std	Y+6, r25	; 0x06
    1a78:	8d 83       	std	Y+5, r24	; 0x05
    1a7a:	0f c0       	rjmp	.+30     	; 0x1a9a <LCD_sendCommand+0x3a4>
    1a7c:	88 ec       	ldi	r24, 0xC8	; 200
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	9c 83       	std	Y+4, r25	; 0x04
    1a82:	8b 83       	std	Y+3, r24	; 0x03
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <LCD_sendCommand+0x392>
    1a8c:	9c 83       	std	Y+4, r25	; 0x04
    1a8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a90:	8d 81       	ldd	r24, Y+5	; 0x05
    1a92:	9e 81       	ldd	r25, Y+6	; 0x06
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	9e 83       	std	Y+6, r25	; 0x06
    1a98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	69 f7       	brne	.-38     	; 0x1a7c <LCD_sendCommand+0x386>
    1aa2:	14 c0       	rjmp	.+40     	; 0x1acc <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa6:	78 85       	ldd	r23, Y+8	; 0x08
    1aa8:	89 85       	ldd	r24, Y+9	; 0x09
    1aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	9e 83       	std	Y+6, r25	; 0x06
    1ab6:	8d 83       	std	Y+5, r24	; 0x05
    1ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aba:	9e 81       	ldd	r25, Y+6	; 0x06
    1abc:	9a 83       	std	Y+2, r25	; 0x02
    1abe:	89 83       	std	Y+1, r24	; 0x01
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	f1 f7       	brne	.-4      	; 0x1ac4 <LCD_sendCommand+0x3ce>
    1ac8:	9a 83       	std	Y+2, r25	; 0x02
    1aca:	89 83       	std	Y+1, r24	; 0x01
	/* Data hold time th */
	_delay_ms(1);
}
    1acc:	e9 96       	adiw	r28, 0x39	; 57
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <LCD_sendData>:

/*
 * Description:
 * send the required Data	 to LCD.*/
void LCD_sendData(uint8 data)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	e9 97       	sbiw	r28, 0x39	; 57
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	89 af       	std	Y+57, r24	; 0x39
	/* Data mode Rs = 1 */
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	41 e0       	ldi	r20, 0x01	; 1
    1afa:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <GPIO_writePin>
	/* Write Mode RW = 0*/
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	61 e0       	ldi	r22, 0x01	; 1
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <GPIO_writePin>
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	a0 e8       	ldi	r26, 0x80	; 128
    1b0e:	bf e3       	ldi	r27, 0x3F	; 63
    1b10:	8d ab       	std	Y+53, r24	; 0x35
    1b12:	9e ab       	std	Y+54, r25	; 0x36
    1b14:	af ab       	std	Y+55, r26	; 0x37
    1b16:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b18:	6d a9       	ldd	r22, Y+53	; 0x35
    1b1a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4a ef       	ldi	r20, 0xFA	; 250
    1b26:	54 e4       	ldi	r21, 0x44	; 68
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	89 ab       	std	Y+49, r24	; 0x31
    1b32:	9a ab       	std	Y+50, r25	; 0x32
    1b34:	ab ab       	std	Y+51, r26	; 0x33
    1b36:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b38:	69 a9       	ldd	r22, Y+49	; 0x31
    1b3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	5f e3       	ldi	r21, 0x3F	; 63
    1b48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <LCD_sendData+0x7c>
		__ticks = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	98 ab       	std	Y+48, r25	; 0x30
    1b56:	8f a7       	std	Y+47, r24	; 0x2f
    1b58:	3f c0       	rjmp	.+126    	; 0x1bd8 <LCD_sendData+0xfa>
	else if (__tmp > 65535)
    1b5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b60:	9c a9       	ldd	r25, Y+52	; 0x34
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	3f ef       	ldi	r19, 0xFF	; 255
    1b66:	4f e7       	ldi	r20, 0x7F	; 127
    1b68:	57 e4       	ldi	r21, 0x47	; 71
    1b6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	4c f5       	brge	.+82     	; 0x1bc4 <LCD_sendData+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b72:	6d a9       	ldd	r22, Y+53	; 0x35
    1b74:	7e a9       	ldd	r23, Y+54	; 0x36
    1b76:	8f a9       	ldd	r24, Y+55	; 0x37
    1b78:	98 ad       	ldd	r25, Y+56	; 0x38
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e2       	ldi	r20, 0x20	; 32
    1b80:	51 e4       	ldi	r21, 0x41	; 65
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	98 ab       	std	Y+48, r25	; 0x30
    1b98:	8f a7       	std	Y+47, r24	; 0x2f
    1b9a:	0f c0       	rjmp	.+30     	; 0x1bba <LCD_sendData+0xdc>
    1b9c:	88 ec       	ldi	r24, 0xC8	; 200
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9e a7       	std	Y+46, r25	; 0x2e
    1ba2:	8d a7       	std	Y+45, r24	; 0x2d
    1ba4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ba6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_sendData+0xca>
    1bac:	9e a7       	std	Y+46, r25	; 0x2e
    1bae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bb2:	98 a9       	ldd	r25, Y+48	; 0x30
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	98 ab       	std	Y+48, r25	; 0x30
    1bb8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bba:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bbc:	98 a9       	ldd	r25, Y+48	; 0x30
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	69 f7       	brne	.-38     	; 0x1b9c <LCD_sendData+0xbe>
    1bc2:	14 c0       	rjmp	.+40     	; 0x1bec <LCD_sendData+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc4:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc6:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc8:	8b a9       	ldd	r24, Y+51	; 0x33
    1bca:	9c a9       	ldd	r25, Y+52	; 0x34
    1bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	98 ab       	std	Y+48, r25	; 0x30
    1bd6:	8f a7       	std	Y+47, r24	; 0x2f
    1bd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bda:	98 a9       	ldd	r25, Y+48	; 0x30
    1bdc:	9c a7       	std	Y+44, r25	; 0x2c
    1bde:	8b a7       	std	Y+43, r24	; 0x2b
    1be0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1be2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LCD_sendData+0x106>
    1be8:	9c a7       	std	Y+44, r25	; 0x2c
    1bea:	8b a7       	std	Y+43, r24	; 0x2b
	/*Address setup time tas = 50 ns */
	_delay_ms(1);
	/*Enable LCD */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	62 e0       	ldi	r22, 0x02	; 2
    1bf0:	41 e0       	ldi	r20, 0x01	; 1
    1bf2:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <GPIO_writePin>
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	a0 e8       	ldi	r26, 0x80	; 128
    1bfc:	bf e3       	ldi	r27, 0x3F	; 63
    1bfe:	8f a3       	std	Y+39, r24	; 0x27
    1c00:	98 a7       	std	Y+40, r25	; 0x28
    1c02:	a9 a7       	std	Y+41, r26	; 0x29
    1c04:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c06:	6f a1       	ldd	r22, Y+39	; 0x27
    1c08:	78 a5       	ldd	r23, Y+40	; 0x28
    1c0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	4a ef       	ldi	r20, 0xFA	; 250
    1c14:	54 e4       	ldi	r21, 0x44	; 68
    1c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	8b a3       	std	Y+35, r24	; 0x23
    1c20:	9c a3       	std	Y+36, r25	; 0x24
    1c22:	ad a3       	std	Y+37, r26	; 0x25
    1c24:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c26:	6b a1       	ldd	r22, Y+35	; 0x23
    1c28:	7c a1       	ldd	r23, Y+36	; 0x24
    1c2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e8       	ldi	r20, 0x80	; 128
    1c34:	5f e3       	ldi	r21, 0x3F	; 63
    1c36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c3a:	88 23       	and	r24, r24
    1c3c:	2c f4       	brge	.+10     	; 0x1c48 <LCD_sendData+0x16a>
		__ticks = 1;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	9a a3       	std	Y+34, r25	; 0x22
    1c44:	89 a3       	std	Y+33, r24	; 0x21
    1c46:	3f c0       	rjmp	.+126    	; 0x1cc6 <LCD_sendData+0x1e8>
	else if (__tmp > 65535)
    1c48:	6b a1       	ldd	r22, Y+35	; 0x23
    1c4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	3f ef       	ldi	r19, 0xFF	; 255
    1c54:	4f e7       	ldi	r20, 0x7F	; 127
    1c56:	57 e4       	ldi	r21, 0x47	; 71
    1c58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c5c:	18 16       	cp	r1, r24
    1c5e:	4c f5       	brge	.+82     	; 0x1cb2 <LCD_sendData+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c60:	6f a1       	ldd	r22, Y+39	; 0x27
    1c62:	78 a5       	ldd	r23, Y+40	; 0x28
    1c64:	89 a5       	ldd	r24, Y+41	; 0x29
    1c66:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e2       	ldi	r20, 0x20	; 32
    1c6e:	51 e4       	ldi	r21, 0x41	; 65
    1c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	bc 01       	movw	r22, r24
    1c7a:	cd 01       	movw	r24, r26
    1c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	9a a3       	std	Y+34, r25	; 0x22
    1c86:	89 a3       	std	Y+33, r24	; 0x21
    1c88:	0f c0       	rjmp	.+30     	; 0x1ca8 <LCD_sendData+0x1ca>
    1c8a:	88 ec       	ldi	r24, 0xC8	; 200
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	98 a3       	std	Y+32, r25	; 0x20
    1c90:	8f 8f       	std	Y+31, r24	; 0x1f
    1c92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c94:	98 a1       	ldd	r25, Y+32	; 0x20
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_sendData+0x1b8>
    1c9a:	98 a3       	std	Y+32, r25	; 0x20
    1c9c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	9a a3       	std	Y+34, r25	; 0x22
    1ca6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca8:	89 a1       	ldd	r24, Y+33	; 0x21
    1caa:	9a a1       	ldd	r25, Y+34	; 0x22
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	69 f7       	brne	.-38     	; 0x1c8a <LCD_sendData+0x1ac>
    1cb0:	14 c0       	rjmp	.+40     	; 0x1cda <LCD_sendData+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb2:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb4:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb6:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb8:	9e a1       	ldd	r25, Y+38	; 0x26
    1cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	9a a3       	std	Y+34, r25	; 0x22
    1cc4:	89 a3       	std	Y+33, r24	; 0x21
    1cc6:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc8:	9a a1       	ldd	r25, Y+34	; 0x22
    1cca:	9e 8f       	std	Y+30, r25	; 0x1e
    1ccc:	8d 8f       	std	Y+29, r24	; 0x1d
    1cce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cd0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <LCD_sendData+0x1f4>
    1cd6:	9e 8f       	std	Y+30, r25	; 0x1e
    1cd8:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Data setup time tpw - tdsw = 290 - 100 = 190 ns*/
	_delay_ms(1);
	/* Send the required command */
	GPIO_writePort(LCD_DATA_PORT_ID, data);
    1cda:	82 e0       	ldi	r24, 0x02	; 2
    1cdc:	69 ad       	ldd	r22, Y+57	; 0x39
    1cde:	0e 94 57 17 	call	0x2eae	; 0x2eae <GPIO_writePort>
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	a0 e8       	ldi	r26, 0x80	; 128
    1ce8:	bf e3       	ldi	r27, 0x3F	; 63
    1cea:	89 8f       	std	Y+25, r24	; 0x19
    1cec:	9a 8f       	std	Y+26, r25	; 0x1a
    1cee:	ab 8f       	std	Y+27, r26	; 0x1b
    1cf0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf2:	69 8d       	ldd	r22, Y+25	; 0x19
    1cf4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cf6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	4a ef       	ldi	r20, 0xFA	; 250
    1d00:	54 e4       	ldi	r21, 0x44	; 68
    1d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	8d 8b       	std	Y+21, r24	; 0x15
    1d0c:	9e 8b       	std	Y+22, r25	; 0x16
    1d0e:	af 8b       	std	Y+23, r26	; 0x17
    1d10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d12:	6d 89       	ldd	r22, Y+21	; 0x15
    1d14:	7e 89       	ldd	r23, Y+22	; 0x16
    1d16:	8f 89       	ldd	r24, Y+23	; 0x17
    1d18:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e8       	ldi	r20, 0x80	; 128
    1d20:	5f e3       	ldi	r21, 0x3F	; 63
    1d22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d26:	88 23       	and	r24, r24
    1d28:	2c f4       	brge	.+10     	; 0x1d34 <LCD_sendData+0x256>
		__ticks = 1;
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9c 8b       	std	Y+20, r25	; 0x14
    1d30:	8b 8b       	std	Y+19, r24	; 0x13
    1d32:	3f c0       	rjmp	.+126    	; 0x1db2 <LCD_sendData+0x2d4>
	else if (__tmp > 65535)
    1d34:	6d 89       	ldd	r22, Y+21	; 0x15
    1d36:	7e 89       	ldd	r23, Y+22	; 0x16
    1d38:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	3f ef       	ldi	r19, 0xFF	; 255
    1d40:	4f e7       	ldi	r20, 0x7F	; 127
    1d42:	57 e4       	ldi	r21, 0x47	; 71
    1d44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d48:	18 16       	cp	r1, r24
    1d4a:	4c f5       	brge	.+82     	; 0x1d9e <LCD_sendData+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	40 e2       	ldi	r20, 0x20	; 32
    1d5a:	51 e4       	ldi	r21, 0x41	; 65
    1d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	bc 01       	movw	r22, r24
    1d66:	cd 01       	movw	r24, r26
    1d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	9c 8b       	std	Y+20, r25	; 0x14
    1d72:	8b 8b       	std	Y+19, r24	; 0x13
    1d74:	0f c0       	rjmp	.+30     	; 0x1d94 <LCD_sendData+0x2b6>
    1d76:	88 ec       	ldi	r24, 0xC8	; 200
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	9a 8b       	std	Y+18, r25	; 0x12
    1d7c:	89 8b       	std	Y+17, r24	; 0x11
    1d7e:	89 89       	ldd	r24, Y+17	; 0x11
    1d80:	9a 89       	ldd	r25, Y+18	; 0x12
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	f1 f7       	brne	.-4      	; 0x1d82 <LCD_sendData+0x2a4>
    1d86:	9a 8b       	std	Y+18, r25	; 0x12
    1d88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	9c 8b       	std	Y+20, r25	; 0x14
    1d92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d94:	8b 89       	ldd	r24, Y+19	; 0x13
    1d96:	9c 89       	ldd	r25, Y+20	; 0x14
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	69 f7       	brne	.-38     	; 0x1d76 <LCD_sendData+0x298>
    1d9c:	14 c0       	rjmp	.+40     	; 0x1dc6 <LCD_sendData+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1da0:	7e 89       	ldd	r23, Y+22	; 0x16
    1da2:	8f 89       	ldd	r24, Y+23	; 0x17
    1da4:	98 8d       	ldd	r25, Y+24	; 0x18
    1da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	9c 8b       	std	Y+20, r25	; 0x14
    1db0:	8b 8b       	std	Y+19, r24	; 0x13
    1db2:	8b 89       	ldd	r24, Y+19	; 0x13
    1db4:	9c 89       	ldd	r25, Y+20	; 0x14
    1db6:	98 8b       	std	Y+16, r25	; 0x10
    1db8:	8f 87       	std	Y+15, r24	; 0x0f
    1dba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dbc:	98 89       	ldd	r25, Y+16	; 0x10
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	f1 f7       	brne	.-4      	; 0x1dbe <LCD_sendData+0x2e0>
    1dc2:	98 8b       	std	Y+16, r25	; 0x10
    1dc4:	8f 87       	std	Y+15, r24	; 0x0f
	/* Disable LCD tdsw = 100ns */
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	62 e0       	ldi	r22, 0x02	; 2
    1dca:	40 e0       	ldi	r20, 0x00	; 0
    1dcc:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <GPIO_writePin>
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	a0 e8       	ldi	r26, 0x80	; 128
    1dd6:	bf e3       	ldi	r27, 0x3F	; 63
    1dd8:	8b 87       	std	Y+11, r24	; 0x0b
    1dda:	9c 87       	std	Y+12, r25	; 0x0c
    1ddc:	ad 87       	std	Y+13, r26	; 0x0d
    1dde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	4a ef       	ldi	r20, 0xFA	; 250
    1dee:	54 e4       	ldi	r21, 0x44	; 68
    1df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	8f 83       	std	Y+7, r24	; 0x07
    1dfa:	98 87       	std	Y+8, r25	; 0x08
    1dfc:	a9 87       	std	Y+9, r26	; 0x09
    1dfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e00:	6f 81       	ldd	r22, Y+7	; 0x07
    1e02:	78 85       	ldd	r23, Y+8	; 0x08
    1e04:	89 85       	ldd	r24, Y+9	; 0x09
    1e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e8       	ldi	r20, 0x80	; 128
    1e0e:	5f e3       	ldi	r21, 0x3F	; 63
    1e10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e14:	88 23       	and	r24, r24
    1e16:	2c f4       	brge	.+10     	; 0x1e22 <LCD_sendData+0x344>
		__ticks = 1;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	9e 83       	std	Y+6, r25	; 0x06
    1e1e:	8d 83       	std	Y+5, r24	; 0x05
    1e20:	3f c0       	rjmp	.+126    	; 0x1ea0 <LCD_sendData+0x3c2>
	else if (__tmp > 65535)
    1e22:	6f 81       	ldd	r22, Y+7	; 0x07
    1e24:	78 85       	ldd	r23, Y+8	; 0x08
    1e26:	89 85       	ldd	r24, Y+9	; 0x09
    1e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	3f ef       	ldi	r19, 0xFF	; 255
    1e2e:	4f e7       	ldi	r20, 0x7F	; 127
    1e30:	57 e4       	ldi	r21, 0x47	; 71
    1e32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e36:	18 16       	cp	r1, r24
    1e38:	4c f5       	brge	.+82     	; 0x1e8c <LCD_sendData+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e2       	ldi	r20, 0x20	; 32
    1e48:	51 e4       	ldi	r21, 0x41	; 65
    1e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	bc 01       	movw	r22, r24
    1e54:	cd 01       	movw	r24, r26
    1e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	9e 83       	std	Y+6, r25	; 0x06
    1e60:	8d 83       	std	Y+5, r24	; 0x05
    1e62:	0f c0       	rjmp	.+30     	; 0x1e82 <LCD_sendData+0x3a4>
    1e64:	88 ec       	ldi	r24, 0xC8	; 200
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	9c 83       	std	Y+4, r25	; 0x04
    1e6a:	8b 83       	std	Y+3, r24	; 0x03
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <LCD_sendData+0x392>
    1e74:	9c 83       	std	Y+4, r25	; 0x04
    1e76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e78:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	9e 83       	std	Y+6, r25	; 0x06
    1e80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e82:	8d 81       	ldd	r24, Y+5	; 0x05
    1e84:	9e 81       	ldd	r25, Y+6	; 0x06
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	69 f7       	brne	.-38     	; 0x1e64 <LCD_sendData+0x386>
    1e8a:	14 c0       	rjmp	.+40     	; 0x1eb4 <LCD_sendData+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8e:	78 85       	ldd	r23, Y+8	; 0x08
    1e90:	89 85       	ldd	r24, Y+9	; 0x09
    1e92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9e 83       	std	Y+6, r25	; 0x06
    1e9e:	8d 83       	std	Y+5, r24	; 0x05
    1ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea4:	9a 83       	std	Y+2, r25	; 0x02
    1ea6:	89 83       	std	Y+1, r24	; 0x01
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <LCD_sendData+0x3ce>
    1eb0:	9a 83       	std	Y+2, r25	; 0x02
    1eb2:	89 83       	std	Y+1, r24	; 0x01
	/* Data hold time th */
	_delay_ms(1);
}
    1eb4:	e9 96       	adiw	r28, 0x39	; 57
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <LCD_clearScreen>:

/*
 * Description:
 * clear screen.*/
void LCD_clearScreen(void)
{
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_DISPLAY_WITH_DDRAM);
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_sendCommand>
}
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <LCD_setCurser>:
/*
 * Description :
 * Move the CURSER in the required position these addreses from datasheet of LCD.
 */
void LCD_setCurser(uint8 row, uint8 col)
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <LCD_setCurser+0x6>
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <LCD_setCurser+0x8>
    1ee2:	0f 92       	push	r0
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	8a 83       	std	Y+2, r24	; 0x02
    1eea:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_memory_location;

	switch(row)
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	28 2f       	mov	r18, r24
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	3d 83       	std	Y+5, r19	; 0x05
    1ef4:	2c 83       	std	Y+4, r18	; 0x04
    1ef6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef8:	9d 81       	ldd	r25, Y+5	; 0x05
    1efa:	81 30       	cpi	r24, 0x01	; 1
    1efc:	91 05       	cpc	r25, r1
    1efe:	c1 f0       	breq	.+48     	; 0x1f30 <LCD_setCurser+0x56>
    1f00:	2c 81       	ldd	r18, Y+4	; 0x04
    1f02:	3d 81       	ldd	r19, Y+5	; 0x05
    1f04:	22 30       	cpi	r18, 0x02	; 2
    1f06:	31 05       	cpc	r19, r1
    1f08:	2c f4       	brge	.+10     	; 0x1f14 <LCD_setCurser+0x3a>
    1f0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	61 f0       	breq	.+24     	; 0x1f2a <LCD_setCurser+0x50>
    1f12:	19 c0       	rjmp	.+50     	; 0x1f46 <LCD_setCurser+0x6c>
    1f14:	2c 81       	ldd	r18, Y+4	; 0x04
    1f16:	3d 81       	ldd	r19, Y+5	; 0x05
    1f18:	22 30       	cpi	r18, 0x02	; 2
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	69 f0       	breq	.+26     	; 0x1f38 <LCD_setCurser+0x5e>
    1f1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f20:	9d 81       	ldd	r25, Y+5	; 0x05
    1f22:	83 30       	cpi	r24, 0x03	; 3
    1f24:	91 05       	cpc	r25, r1
    1f26:	61 f0       	breq	.+24     	; 0x1f40 <LCD_setCurser+0x66>
    1f28:	0e c0       	rjmp	.+28     	; 0x1f46 <LCD_setCurser+0x6c>
	{
	case 0:
		LCD_memory_location = col;
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	89 83       	std	Y+1, r24	; 0x01
    1f2e:	0b c0       	rjmp	.+22     	; 0x1f46 <LCD_setCurser+0x6c>
		break;
	case 1:
		LCD_memory_location = col + 0x40;
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	80 5c       	subi	r24, 0xC0	; 192
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	07 c0       	rjmp	.+14     	; 0x1f46 <LCD_setCurser+0x6c>
		break;
	case 2:
		LCD_memory_location = col + 0x10;
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	80 5f       	subi	r24, 0xF0	; 240
    1f3c:	89 83       	std	Y+1, r24	; 0x01
    1f3e:	03 c0       	rjmp	.+6      	; 0x1f46 <LCD_setCurser+0x6c>
		break;
	case 3:
		LCD_memory_location = col + 0x50;
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	80 5b       	subi	r24, 0xB0	; 176
    1f44:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Set CURSER into the specific address. */
	LCD_sendCommand(LCD_memory_location | SET_CURSER_POSITION);
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	80 68       	ori	r24, 0x80	; 128
    1f4a:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_sendCommand>
}
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <LCD_displayStringRowColumn>:

/*Description:
 * Display the required string in the required position.*/
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *str_ptr)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <LCD_displayStringRowColumn+0x6>
    1f64:	00 d0       	rcall	.+0      	; 0x1f66 <LCD_displayStringRowColumn+0x8>
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	6a 83       	std	Y+2, r22	; 0x02
    1f6e:	5c 83       	std	Y+4, r21	; 0x04
    1f70:	4b 83       	std	Y+3, r20	; 0x03
	/* Move CURSER to the required position.*/
	LCD_setCurser(row, col);
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	6a 81       	ldd	r22, Y+2	; 0x02
    1f76:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <LCD_setCurser>
	/*Display the string.*/
	LCD_displayString(str_ptr);
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_displayString>
}
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <LCD_intgerToString>:

/*Description:
 * Display the required decimal in the screen.*/
void LCD_intgerToString(int data)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	62 97       	sbiw	r28, 0x12	; 18
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	9a 8b       	std	Y+18, r25	; 0x12
    1fa6:	89 8b       	std	Y+17, r24	; 0x11
	char buff[LCD_WIDE]; /*String to hold the ASCII result.*/
	/* C function to convert the data to its corresponding ASCII value.
	 * 10 for Decimal.*/
	itoa(data,buff,10);
    1fa8:	89 89       	ldd	r24, Y+17	; 0x11
    1faa:	9a 89       	ldd	r25, Y+18	; 0x12
    1fac:	9e 01       	movw	r18, r28
    1fae:	2f 5f       	subi	r18, 0xFF	; 255
    1fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb2:	b9 01       	movw	r22, r18
    1fb4:	4a e0       	ldi	r20, 0x0A	; 10
    1fb6:	50 e0       	ldi	r21, 0x00	; 0
    1fb8:	0e 94 31 19 	call	0x3262	; 0x3262 <itoa>
	/*Display the string.*/
	LCD_displayString(buff);
    1fbc:	ce 01       	movw	r24, r28
    1fbe:	01 96       	adiw	r24, 0x01	; 1
    1fc0:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_displayString>
}
    1fc4:	62 96       	adiw	r28, 0x12	; 18
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <__vector_9>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/


ISR(TIMER0_OVF_vect)
{
    1fd6:	1f 92       	push	r1
    1fd8:	0f 92       	push	r0
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	0f 92       	push	r0
    1fde:	11 24       	eor	r1, r1
    1fe0:	2f 93       	push	r18
    1fe2:	3f 93       	push	r19
    1fe4:	4f 93       	push	r20
    1fe6:	5f 93       	push	r21
    1fe8:	6f 93       	push	r22
    1fea:	7f 93       	push	r23
    1fec:	8f 93       	push	r24
    1fee:	9f 93       	push	r25
    1ff0:	af 93       	push	r26
    1ff2:	bf 93       	push	r27
    1ff4:	ef 93       	push	r30
    1ff6:	ff 93       	push	r31
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62

	if(g_callBack_ptr != NULL_PTR)
    2000:	80 91 68 01 	lds	r24, 0x0168
    2004:	90 91 69 01 	lds	r25, 0x0169
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	29 f0       	breq	.+10     	; 0x2016 <__vector_9+0x40>
	{
		/* Call the call back function in the application after counting the required time*/
		(*g_callBack_ptr)();
    200c:	e0 91 68 01 	lds	r30, 0x0168
    2010:	f0 91 69 01 	lds	r31, 0x0169
    2014:	09 95       	icall
	}

}
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	ff 91       	pop	r31
    201c:	ef 91       	pop	r30
    201e:	bf 91       	pop	r27
    2020:	af 91       	pop	r26
    2022:	9f 91       	pop	r25
    2024:	8f 91       	pop	r24
    2026:	7f 91       	pop	r23
    2028:	6f 91       	pop	r22
    202a:	5f 91       	pop	r21
    202c:	4f 91       	pop	r20
    202e:	3f 91       	pop	r19
    2030:	2f 91       	pop	r18
    2032:	0f 90       	pop	r0
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	0f 90       	pop	r0
    2038:	1f 90       	pop	r1
    203a:	18 95       	reti

0000203c <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    203c:	1f 92       	push	r1
    203e:	0f 92       	push	r0
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	0f 92       	push	r0
    2044:	11 24       	eor	r1, r1
    2046:	2f 93       	push	r18
    2048:	3f 93       	push	r19
    204a:	4f 93       	push	r20
    204c:	5f 93       	push	r21
    204e:	6f 93       	push	r22
    2050:	7f 93       	push	r23
    2052:	8f 93       	push	r24
    2054:	9f 93       	push	r25
    2056:	af 93       	push	r26
    2058:	bf 93       	push	r27
    205a:	ef 93       	push	r30
    205c:	ff 93       	push	r31
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    2066:	80 91 68 01 	lds	r24, 0x0168
    206a:	90 91 69 01 	lds	r25, 0x0169
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	29 f0       	breq	.+10     	; 0x207c <__vector_19+0x40>
	{
		/* Call the call back function in the application after counting the required time*/
		(*g_callBack_ptr)();
    2072:	e0 91 68 01 	lds	r30, 0x0168
    2076:	f0 91 69 01 	lds	r31, 0x0169
    207a:	09 95       	icall
	}

}
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	ff 91       	pop	r31
    2082:	ef 91       	pop	r30
    2084:	bf 91       	pop	r27
    2086:	af 91       	pop	r26
    2088:	9f 91       	pop	r25
    208a:	8f 91       	pop	r24
    208c:	7f 91       	pop	r23
    208e:	6f 91       	pop	r22
    2090:	5f 91       	pop	r21
    2092:	4f 91       	pop	r20
    2094:	3f 91       	pop	r19
    2096:	2f 91       	pop	r18
    2098:	0f 90       	pop	r0
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	0f 90       	pop	r0
    209e:	1f 90       	pop	r1
    20a0:	18 95       	reti

000020a2 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    20a2:	1f 92       	push	r1
    20a4:	0f 92       	push	r0
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	0f 92       	push	r0
    20aa:	11 24       	eor	r1, r1
    20ac:	2f 93       	push	r18
    20ae:	3f 93       	push	r19
    20b0:	4f 93       	push	r20
    20b2:	5f 93       	push	r21
    20b4:	6f 93       	push	r22
    20b6:	7f 93       	push	r23
    20b8:	8f 93       	push	r24
    20ba:	9f 93       	push	r25
    20bc:	af 93       	push	r26
    20be:	bf 93       	push	r27
    20c0:	ef 93       	push	r30
    20c2:	ff 93       	push	r31
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62

	if(g_callBack_ptr != NULL_PTR)
    20cc:	80 91 68 01 	lds	r24, 0x0168
    20d0:	90 91 69 01 	lds	r25, 0x0169
    20d4:	00 97       	sbiw	r24, 0x00	; 0
    20d6:	29 f0       	breq	.+10     	; 0x20e2 <__vector_8+0x40>
	{
		/* Call the call back function in the application after counting the required time*/
		(*g_callBack_ptr)();
    20d8:	e0 91 68 01 	lds	r30, 0x0168
    20dc:	f0 91 69 01 	lds	r31, 0x0169
    20e0:	09 95       	icall
	}

}
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	ff 91       	pop	r31
    20e8:	ef 91       	pop	r30
    20ea:	bf 91       	pop	r27
    20ec:	af 91       	pop	r26
    20ee:	9f 91       	pop	r25
    20f0:	8f 91       	pop	r24
    20f2:	7f 91       	pop	r23
    20f4:	6f 91       	pop	r22
    20f6:	5f 91       	pop	r21
    20f8:	4f 91       	pop	r20
    20fa:	3f 91       	pop	r19
    20fc:	2f 91       	pop	r18
    20fe:	0f 90       	pop	r0
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	0f 90       	pop	r0
    2104:	1f 90       	pop	r1
    2106:	18 95       	reti

00002108 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    2108:	1f 92       	push	r1
    210a:	0f 92       	push	r0
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	0f 92       	push	r0
    2110:	11 24       	eor	r1, r1
    2112:	2f 93       	push	r18
    2114:	3f 93       	push	r19
    2116:	4f 93       	push	r20
    2118:	5f 93       	push	r21
    211a:	6f 93       	push	r22
    211c:	7f 93       	push	r23
    211e:	8f 93       	push	r24
    2120:	9f 93       	push	r25
    2122:	af 93       	push	r26
    2124:	bf 93       	push	r27
    2126:	ef 93       	push	r30
    2128:	ff 93       	push	r31
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    2132:	80 91 68 01 	lds	r24, 0x0168
    2136:	90 91 69 01 	lds	r25, 0x0169
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	29 f0       	breq	.+10     	; 0x2148 <__vector_6+0x40>
	{
		/* Call the call back function in the application after counting the required time*/
		(*g_callBack_ptr)();
    213e:	e0 91 68 01 	lds	r30, 0x0168
    2142:	f0 91 69 01 	lds	r31, 0x0169
    2146:	09 95       	icall
	}

}
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	ff 91       	pop	r31
    214e:	ef 91       	pop	r30
    2150:	bf 91       	pop	r27
    2152:	af 91       	pop	r26
    2154:	9f 91       	pop	r25
    2156:	8f 91       	pop	r24
    2158:	7f 91       	pop	r23
    215a:	6f 91       	pop	r22
    215c:	5f 91       	pop	r21
    215e:	4f 91       	pop	r20
    2160:	3f 91       	pop	r19
    2162:	2f 91       	pop	r18
    2164:	0f 90       	pop	r0
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	0f 90       	pop	r0
    216a:	1f 90       	pop	r1
    216c:	18 95       	reti

0000216e <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    216e:	1f 92       	push	r1
    2170:	0f 92       	push	r0
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	0f 92       	push	r0
    2176:	11 24       	eor	r1, r1
    2178:	2f 93       	push	r18
    217a:	3f 93       	push	r19
    217c:	4f 93       	push	r20
    217e:	5f 93       	push	r21
    2180:	6f 93       	push	r22
    2182:	7f 93       	push	r23
    2184:	8f 93       	push	r24
    2186:	9f 93       	push	r25
    2188:	af 93       	push	r26
    218a:	bf 93       	push	r27
    218c:	ef 93       	push	r30
    218e:	ff 93       	push	r31
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    2198:	80 91 68 01 	lds	r24, 0x0168
    219c:	90 91 69 01 	lds	r25, 0x0169
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	29 f0       	breq	.+10     	; 0x21ae <__vector_7+0x40>
	{
		/* Call the call back function in the application after counting the required time*/
		(*g_callBack_ptr)();
    21a4:	e0 91 68 01 	lds	r30, 0x0168
    21a8:	f0 91 69 01 	lds	r31, 0x0169
    21ac:	09 95       	icall
	}

}
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	ff 91       	pop	r31
    21b4:	ef 91       	pop	r30
    21b6:	bf 91       	pop	r27
    21b8:	af 91       	pop	r26
    21ba:	9f 91       	pop	r25
    21bc:	8f 91       	pop	r24
    21be:	7f 91       	pop	r23
    21c0:	6f 91       	pop	r22
    21c2:	5f 91       	pop	r21
    21c4:	4f 91       	pop	r20
    21c6:	3f 91       	pop	r19
    21c8:	2f 91       	pop	r18
    21ca:	0f 90       	pop	r0
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	0f 90       	pop	r0
    21d0:	1f 90       	pop	r1
    21d2:	18 95       	reti

000021d4 <__vector_4>:


ISR(TIMER2_OVF_vect)
{
    21d4:	1f 92       	push	r1
    21d6:	0f 92       	push	r0
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	0f 92       	push	r0
    21dc:	11 24       	eor	r1, r1
    21de:	2f 93       	push	r18
    21e0:	3f 93       	push	r19
    21e2:	4f 93       	push	r20
    21e4:	5f 93       	push	r21
    21e6:	6f 93       	push	r22
    21e8:	7f 93       	push	r23
    21ea:	8f 93       	push	r24
    21ec:	9f 93       	push	r25
    21ee:	af 93       	push	r26
    21f0:	bf 93       	push	r27
    21f2:	ef 93       	push	r30
    21f4:	ff 93       	push	r31
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62

	if(g_callBack_ptr != NULL_PTR)
    21fe:	80 91 68 01 	lds	r24, 0x0168
    2202:	90 91 69 01 	lds	r25, 0x0169
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	29 f0       	breq	.+10     	; 0x2214 <__vector_4+0x40>
	{
		/* Call the call back function in the application after counting the required time*/
		(*g_callBack_ptr)();
    220a:	e0 91 68 01 	lds	r30, 0x0168
    220e:	f0 91 69 01 	lds	r31, 0x0169
    2212:	09 95       	icall
	}

}
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	ff 91       	pop	r31
    221a:	ef 91       	pop	r30
    221c:	bf 91       	pop	r27
    221e:	af 91       	pop	r26
    2220:	9f 91       	pop	r25
    2222:	8f 91       	pop	r24
    2224:	7f 91       	pop	r23
    2226:	6f 91       	pop	r22
    2228:	5f 91       	pop	r21
    222a:	4f 91       	pop	r20
    222c:	3f 91       	pop	r19
    222e:	2f 91       	pop	r18
    2230:	0f 90       	pop	r0
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	0f 90       	pop	r0
    2236:	1f 90       	pop	r1
    2238:	18 95       	reti

0000223a <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    223a:	1f 92       	push	r1
    223c:	0f 92       	push	r0
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	0f 92       	push	r0
    2242:	11 24       	eor	r1, r1
    2244:	2f 93       	push	r18
    2246:	3f 93       	push	r19
    2248:	4f 93       	push	r20
    224a:	5f 93       	push	r21
    224c:	6f 93       	push	r22
    224e:	7f 93       	push	r23
    2250:	8f 93       	push	r24
    2252:	9f 93       	push	r25
    2254:	af 93       	push	r26
    2256:	bf 93       	push	r27
    2258:	ef 93       	push	r30
    225a:	ff 93       	push	r31
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    2264:	80 91 68 01 	lds	r24, 0x0168
    2268:	90 91 69 01 	lds	r25, 0x0169
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	29 f0       	breq	.+10     	; 0x227a <__vector_3+0x40>
	{
		/* Call the call back function in the application after counting the required time*/
		(*g_callBack_ptr)();
    2270:	e0 91 68 01 	lds	r30, 0x0168
    2274:	f0 91 69 01 	lds	r31, 0x0169
    2278:	09 95       	icall
	}

}
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	ff 91       	pop	r31
    2280:	ef 91       	pop	r30
    2282:	bf 91       	pop	r27
    2284:	af 91       	pop	r26
    2286:	9f 91       	pop	r25
    2288:	8f 91       	pop	r24
    228a:	7f 91       	pop	r23
    228c:	6f 91       	pop	r22
    228e:	5f 91       	pop	r21
    2290:	4f 91       	pop	r20
    2292:	3f 91       	pop	r19
    2294:	2f 91       	pop	r18
    2296:	0f 90       	pop	r0
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	0f 90       	pop	r0
    229c:	1f 90       	pop	r1
    229e:	18 95       	reti

000022a0 <TIMER_init>:
 *   6- Insert the compare mode time value in case of Compare mode is inserted.
 *   7- Enable timer interrupt module.
 *   8- Insert the required timer --> 0, 1 or 2.
 *   9- In case of timer1 --> Insert the required channel -> A or B.
 **/
void TIMER_init(uint8 timerNo,const TIMER_ConfigType *config){
    22a0:	df 93       	push	r29
    22a2:	cf 93       	push	r28
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <TIMER_init+0x6>
    22a6:	0f 92       	push	r0
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	89 83       	std	Y+1, r24	; 0x01
    22ae:	7b 83       	std	Y+3, r23	; 0x03
    22b0:	6a 83       	std	Y+2, r22	; 0x02

	if(timerNo == TIMER_0)
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	88 23       	and	r24, r24
    22b6:	09 f0       	breq	.+2      	; 0x22ba <TIMER_init+0x1a>
    22b8:	6b c0       	rjmp	.+214    	; 0x2390 <TIMER_init+0xf0>
	{
		/*Non PWM mode*/
		SET_BIT(TCCR0,FOC0);
    22ba:	a3 e5       	ldi	r26, 0x53	; 83
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	e3 e5       	ldi	r30, 0x53	; 83
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	80 68       	ori	r24, 0x80	; 128
    22c6:	8c 93       	st	X, r24

		/*Insert the required prescaler*/
		TCCR0 = (TCCR0 & 0xF8) | ((config->prescaler));
    22c8:	a3 e5       	ldi	r26, 0x53	; 83
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	e3 e5       	ldi	r30, 0x53	; 83
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	98 2f       	mov	r25, r24
    22d4:	98 7f       	andi	r25, 0xF8	; 248
    22d6:	ea 81       	ldd	r30, Y+2	; 0x02
    22d8:	fb 81       	ldd	r31, Y+3	; 0x03
    22da:	83 81       	ldd	r24, Z+3	; 0x03
    22dc:	89 2b       	or	r24, r25
    22de:	8c 93       	st	X, r24

		/*Insert the required initial time value*/
		TCNT0 = config->Timer_Initial_Time_Value;
    22e0:	a2 e5       	ldi	r26, 0x52	; 82
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	ea 81       	ldd	r30, Y+2	; 0x02
    22e6:	fb 81       	ldd	r31, Y+3	; 0x03
    22e8:	85 81       	ldd	r24, Z+5	; 0x05
    22ea:	8c 93       	st	X, r24

		if ((config->mode) == COMPARE)
    22ec:	ea 81       	ldd	r30, Y+2	; 0x02
    22ee:	fb 81       	ldd	r31, Y+3	; 0x03
    22f0:	82 81       	ldd	r24, Z+2	; 0x02
    22f2:	82 30       	cpi	r24, 0x02	; 2
    22f4:	89 f5       	brne	.+98     	; 0x2358 <TIMER_init+0xb8>
		{

			/*Insert the required mode */
			CLEAR_BIT(TCCR0, WGM00);
    22f6:	a3 e5       	ldi	r26, 0x53	; 83
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	e3 e5       	ldi	r30, 0x53	; 83
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	8f 7b       	andi	r24, 0xBF	; 191
    2302:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM01);
    2304:	a3 e5       	ldi	r26, 0x53	; 83
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e3 e5       	ldi	r30, 0x53	; 83
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	88 60       	ori	r24, 0x08	; 8
    2310:	8c 93       	st	X, r24

			/*Insert the required compare time value.*/
			OCR0 = config->Timer_Compare_Time_Value;
    2312:	ac e5       	ldi	r26, 0x5C	; 92
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	ea 81       	ldd	r30, Y+2	; 0x02
    2318:	fb 81       	ldd	r31, Y+3	; 0x03
    231a:	80 81       	ld	r24, Z
    231c:	91 81       	ldd	r25, Z+1	; 0x01
    231e:	8c 93       	st	X, r24

			/*Insert the required the compare output mode*/
			TCCR0 = (TCCR0 & 0xCF) | ((config->compareMatch)<<4);
    2320:	a3 e5       	ldi	r26, 0x53	; 83
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	e3 e5       	ldi	r30, 0x53	; 83
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	28 2f       	mov	r18, r24
    232c:	2f 7c       	andi	r18, 0xCF	; 207
    232e:	ea 81       	ldd	r30, Y+2	; 0x02
    2330:	fb 81       	ldd	r31, Y+3	; 0x03
    2332:	84 81       	ldd	r24, Z+4	; 0x04
    2334:	88 2f       	mov	r24, r24
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	82 95       	swap	r24
    233a:	92 95       	swap	r25
    233c:	90 7f       	andi	r25, 0xF0	; 240
    233e:	98 27       	eor	r25, r24
    2340:	80 7f       	andi	r24, 0xF0	; 240
    2342:	98 27       	eor	r25, r24
    2344:	82 2b       	or	r24, r18
    2346:	8c 93       	st	X, r24


			/*Enable interrupt for compare mode*/
			SET_BIT(TIMSK, OCIE0);
    2348:	a9 e5       	ldi	r26, 0x59	; 89
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	e9 e5       	ldi	r30, 0x59	; 89
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	82 60       	ori	r24, 0x02	; 2
    2354:	8c 93       	st	X, r24
    2356:	5a c1       	rjmp	.+692    	; 0x260c <TIMER_init+0x36c>
		}
		else if((config->mode) == NORMAL_MODE)
    2358:	ea 81       	ldd	r30, Y+2	; 0x02
    235a:	fb 81       	ldd	r31, Y+3	; 0x03
    235c:	82 81       	ldd	r24, Z+2	; 0x02
    235e:	88 23       	and	r24, r24
    2360:	09 f0       	breq	.+2      	; 0x2364 <TIMER_init+0xc4>
    2362:	54 c1       	rjmp	.+680    	; 0x260c <TIMER_init+0x36c>
		{
			/*The required mode */
			CLEAR_BIT(TCCR0, WGM00);
    2364:	a3 e5       	ldi	r26, 0x53	; 83
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e3 e5       	ldi	r30, 0x53	; 83
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	8f 7b       	andi	r24, 0xBF	; 191
    2370:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0, WGM01);
    2372:	a3 e5       	ldi	r26, 0x53	; 83
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e3 e5       	ldi	r30, 0x53	; 83
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	87 7f       	andi	r24, 0xF7	; 247
    237e:	8c 93       	st	X, r24

			/*Enable interrupt for normal mode*/
			SET_BIT(TIMSK, TOIE0);
    2380:	a9 e5       	ldi	r26, 0x59	; 89
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e9 e5       	ldi	r30, 0x59	; 89
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	81 60       	ori	r24, 0x01	; 1
    238c:	8c 93       	st	X, r24
    238e:	3e c1       	rjmp	.+636    	; 0x260c <TIMER_init+0x36c>
		}
	}
	else if(timerNo == TIMER_1)
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	81 30       	cpi	r24, 0x01	; 1
    2394:	09 f0       	breq	.+2      	; 0x2398 <TIMER_init+0xf8>
    2396:	cd c0       	rjmp	.+410    	; 0x2532 <TIMER_init+0x292>
	{
		SET_BIT(TCCR1A,FOC1A);
    2398:	af e4       	ldi	r26, 0x4F	; 79
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	ef e4       	ldi	r30, 0x4F	; 79
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	88 60       	ori	r24, 0x08	; 8
    23a4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    23a6:	af e4       	ldi	r26, 0x4F	; 79
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	ef e4       	ldi	r30, 0x4F	; 79
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	84 60       	ori	r24, 0x04	; 4
    23b2:	8c 93       	st	X, r24

		TCNT1 = config->Timer_Initial_Time_Value;
    23b4:	ac e4       	ldi	r26, 0x4C	; 76
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	ea 81       	ldd	r30, Y+2	; 0x02
    23ba:	fb 81       	ldd	r31, Y+3	; 0x03
    23bc:	85 81       	ldd	r24, Z+5	; 0x05
    23be:	88 2f       	mov	r24, r24
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	11 96       	adiw	r26, 0x01	; 1
    23c4:	9c 93       	st	X, r25
    23c6:	8e 93       	st	-X, r24

		TCCR1B = (TCCR1B & 0xF8) | (config->prescaler);
    23c8:	ae e4       	ldi	r26, 0x4E	; 78
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	ee e4       	ldi	r30, 0x4E	; 78
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	98 2f       	mov	r25, r24
    23d4:	98 7f       	andi	r25, 0xF8	; 248
    23d6:	ea 81       	ldd	r30, Y+2	; 0x02
    23d8:	fb 81       	ldd	r31, Y+3	; 0x03
    23da:	83 81       	ldd	r24, Z+3	; 0x03
    23dc:	89 2b       	or	r24, r25
    23de:	8c 93       	st	X, r24

		if ((config->mode) == COMPARE)
    23e0:	ea 81       	ldd	r30, Y+2	; 0x02
    23e2:	fb 81       	ldd	r31, Y+3	; 0x03
    23e4:	82 81       	ldd	r24, Z+2	; 0x02
    23e6:	82 30       	cpi	r24, 0x02	; 2
    23e8:	09 f0       	breq	.+2      	; 0x23ec <TIMER_init+0x14c>
    23ea:	5d c0       	rjmp	.+186    	; 0x24a6 <TIMER_init+0x206>
		{
			TCCR1A = (TCCR1A & 0x0F) | ((config->compareMatch)<<4);
    23ec:	af e4       	ldi	r26, 0x4F	; 79
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	ef e4       	ldi	r30, 0x4F	; 79
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	28 2f       	mov	r18, r24
    23f8:	2f 70       	andi	r18, 0x0F	; 15
    23fa:	ea 81       	ldd	r30, Y+2	; 0x02
    23fc:	fb 81       	ldd	r31, Y+3	; 0x03
    23fe:	84 81       	ldd	r24, Z+4	; 0x04
    2400:	88 2f       	mov	r24, r24
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	82 95       	swap	r24
    2406:	92 95       	swap	r25
    2408:	90 7f       	andi	r25, 0xF0	; 240
    240a:	98 27       	eor	r25, r24
    240c:	80 7f       	andi	r24, 0xF0	; 240
    240e:	98 27       	eor	r25, r24
    2410:	82 2b       	or	r24, r18
    2412:	8c 93       	st	X, r24

			CLEAR_BIT(TCCR1A, WGM10);
    2414:	af e4       	ldi	r26, 0x4F	; 79
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	ef e4       	ldi	r30, 0x4F	; 79
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	8e 7f       	andi	r24, 0xFE	; 254
    2420:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    2422:	af e4       	ldi	r26, 0x4F	; 79
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	ef e4       	ldi	r30, 0x4F	; 79
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	8d 7f       	andi	r24, 0xFD	; 253
    242e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM12);
    2430:	ae e4       	ldi	r26, 0x4E	; 78
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	ee e4       	ldi	r30, 0x4E	; 78
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	88 60       	ori	r24, 0x08	; 8
    243c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM13);
    243e:	ae e4       	ldi	r26, 0x4E	; 78
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	ee e4       	ldi	r30, 0x4E	; 78
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	8f 7e       	andi	r24, 0xEF	; 239
    244a:	8c 93       	st	X, r24

			if((config->channel) == 'A')
    244c:	ea 81       	ldd	r30, Y+2	; 0x02
    244e:	fb 81       	ldd	r31, Y+3	; 0x03
    2450:	86 81       	ldd	r24, Z+6	; 0x06
    2452:	81 34       	cpi	r24, 0x41	; 65
    2454:	89 f4       	brne	.+34     	; 0x2478 <TIMER_init+0x1d8>
			{
				OCR1A = config->Timer_Compare_Time_Value;
    2456:	aa e4       	ldi	r26, 0x4A	; 74
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	ea 81       	ldd	r30, Y+2	; 0x02
    245c:	fb 81       	ldd	r31, Y+3	; 0x03
    245e:	80 81       	ld	r24, Z
    2460:	91 81       	ldd	r25, Z+1	; 0x01
    2462:	11 96       	adiw	r26, 0x01	; 1
    2464:	9c 93       	st	X, r25
    2466:	8e 93       	st	-X, r24

				/*Enable interrupt for normal mode*/
				SET_BIT(TIMSK, OCIE1A);
    2468:	a9 e5       	ldi	r26, 0x59	; 89
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	e9 e5       	ldi	r30, 0x59	; 89
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	80 61       	ori	r24, 0x10	; 16
    2474:	8c 93       	st	X, r24
    2476:	ca c0       	rjmp	.+404    	; 0x260c <TIMER_init+0x36c>
			}
			else if ((config->channel) == 'B')
    2478:	ea 81       	ldd	r30, Y+2	; 0x02
    247a:	fb 81       	ldd	r31, Y+3	; 0x03
    247c:	86 81       	ldd	r24, Z+6	; 0x06
    247e:	82 34       	cpi	r24, 0x42	; 66
    2480:	09 f0       	breq	.+2      	; 0x2484 <TIMER_init+0x1e4>
    2482:	c4 c0       	rjmp	.+392    	; 0x260c <TIMER_init+0x36c>
			{
				OCR1B = config->Timer_Compare_Time_Value;
    2484:	a8 e4       	ldi	r26, 0x48	; 72
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	ea 81       	ldd	r30, Y+2	; 0x02
    248a:	fb 81       	ldd	r31, Y+3	; 0x03
    248c:	80 81       	ld	r24, Z
    248e:	91 81       	ldd	r25, Z+1	; 0x01
    2490:	11 96       	adiw	r26, 0x01	; 1
    2492:	9c 93       	st	X, r25
    2494:	8e 93       	st	-X, r24

				/*Enable interrupt for normal mode*/
				SET_BIT(TIMSK, OCIE1B);
    2496:	a9 e5       	ldi	r26, 0x59	; 89
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	e9 e5       	ldi	r30, 0x59	; 89
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	88 60       	ori	r24, 0x08	; 8
    24a2:	8c 93       	st	X, r24
    24a4:	b3 c0       	rjmp	.+358    	; 0x260c <TIMER_init+0x36c>
			}

		}
		else if((config->mode) == NORMAL_MODE)
    24a6:	ea 81       	ldd	r30, Y+2	; 0x02
    24a8:	fb 81       	ldd	r31, Y+3	; 0x03
    24aa:	82 81       	ldd	r24, Z+2	; 0x02
    24ac:	88 23       	and	r24, r24
    24ae:	09 f0       	breq	.+2      	; 0x24b2 <TIMER_init+0x212>
    24b0:	ad c0       	rjmp	.+346    	; 0x260c <TIMER_init+0x36c>
		{
			CLEAR_BIT(TCCR1A, COM1B0);
    24b2:	af e4       	ldi	r26, 0x4F	; 79
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	ef e4       	ldi	r30, 0x4F	; 79
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	8f 7e       	andi	r24, 0xEF	; 239
    24be:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, COM1B1);
    24c0:	af e4       	ldi	r26, 0x4F	; 79
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	ef e4       	ldi	r30, 0x4F	; 79
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	8f 7d       	andi	r24, 0xDF	; 223
    24cc:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, COM1A0);
    24ce:	af e4       	ldi	r26, 0x4F	; 79
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	ef e4       	ldi	r30, 0x4F	; 79
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	8f 7b       	andi	r24, 0xBF	; 191
    24da:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, COM1A1);
    24dc:	af e4       	ldi	r26, 0x4F	; 79
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	ef e4       	ldi	r30, 0x4F	; 79
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	8f 77       	andi	r24, 0x7F	; 127
    24e8:	8c 93       	st	X, r24

			CLEAR_BIT(TCCR1A, WGM10);
    24ea:	af e4       	ldi	r26, 0x4F	; 79
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	ef e4       	ldi	r30, 0x4F	; 79
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	8e 7f       	andi	r24, 0xFE	; 254
    24f6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    24f8:	af e4       	ldi	r26, 0x4F	; 79
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	ef e4       	ldi	r30, 0x4F	; 79
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	8d 7f       	andi	r24, 0xFD	; 253
    2504:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    2506:	ae e4       	ldi	r26, 0x4E	; 78
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	ee e4       	ldi	r30, 0x4E	; 78
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	87 7f       	andi	r24, 0xF7	; 247
    2512:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM13);
    2514:	ae e4       	ldi	r26, 0x4E	; 78
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	ee e4       	ldi	r30, 0x4E	; 78
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	8f 7e       	andi	r24, 0xEF	; 239
    2520:	8c 93       	st	X, r24

			/*Enable interrupt for normal mode*/
			SET_BIT(TIMSK, TOIE1);
    2522:	a9 e5       	ldi	r26, 0x59	; 89
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e9 e5       	ldi	r30, 0x59	; 89
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	84 60       	ori	r24, 0x04	; 4
    252e:	8c 93       	st	X, r24
    2530:	6d c0       	rjmp	.+218    	; 0x260c <TIMER_init+0x36c>
		}
	}
	else if(timerNo == TIMER_2)
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	82 30       	cpi	r24, 0x02	; 2
    2536:	09 f0       	breq	.+2      	; 0x253a <TIMER_init+0x29a>
    2538:	69 c0       	rjmp	.+210    	; 0x260c <TIMER_init+0x36c>
	{
		/*Non PWM mode*/
		SET_BIT(TCCR2,FOC2);
    253a:	a5 e4       	ldi	r26, 0x45	; 69
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e5 e4       	ldi	r30, 0x45	; 69
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	80 68       	ori	r24, 0x80	; 128
    2546:	8c 93       	st	X, r24

		/*Insert the required prescaler*/
		TCCR2 = (TCCR2 & 0xF8) | ((config->prescaler));
    2548:	a5 e4       	ldi	r26, 0x45	; 69
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	e5 e4       	ldi	r30, 0x45	; 69
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	98 2f       	mov	r25, r24
    2554:	98 7f       	andi	r25, 0xF8	; 248
    2556:	ea 81       	ldd	r30, Y+2	; 0x02
    2558:	fb 81       	ldd	r31, Y+3	; 0x03
    255a:	83 81       	ldd	r24, Z+3	; 0x03
    255c:	89 2b       	or	r24, r25
    255e:	8c 93       	st	X, r24

		/*Insert the required initial time value*/
		TCNT2 = config->Timer_Initial_Time_Value;
    2560:	a4 e4       	ldi	r26, 0x44	; 68
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	ea 81       	ldd	r30, Y+2	; 0x02
    2566:	fb 81       	ldd	r31, Y+3	; 0x03
    2568:	85 81       	ldd	r24, Z+5	; 0x05
    256a:	8c 93       	st	X, r24

		if ((config->mode) == COMPARE)
    256c:	ea 81       	ldd	r30, Y+2	; 0x02
    256e:	fb 81       	ldd	r31, Y+3	; 0x03
    2570:	82 81       	ldd	r24, Z+2	; 0x02
    2572:	82 30       	cpi	r24, 0x02	; 2
    2574:	89 f5       	brne	.+98     	; 0x25d8 <TIMER_init+0x338>
		{

			/*Insert the required mode */
			CLEAR_BIT(TCCR2, WGM20);
    2576:	a5 e4       	ldi	r26, 0x45	; 69
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e5 e4       	ldi	r30, 0x45	; 69
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	8f 7b       	andi	r24, 0xBF	; 191
    2582:	8c 93       	st	X, r24
			SET_BIT(TCCR2, WGM21);
    2584:	a5 e4       	ldi	r26, 0x45	; 69
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e5 e4       	ldi	r30, 0x45	; 69
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	88 60       	ori	r24, 0x08	; 8
    2590:	8c 93       	st	X, r24

			/*Insert the required compare time value.*/
			OCR2 = config->Timer_Compare_Time_Value;
    2592:	a3 e4       	ldi	r26, 0x43	; 67
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	ea 81       	ldd	r30, Y+2	; 0x02
    2598:	fb 81       	ldd	r31, Y+3	; 0x03
    259a:	80 81       	ld	r24, Z
    259c:	91 81       	ldd	r25, Z+1	; 0x01
    259e:	8c 93       	st	X, r24

			/*Insert the required the compare output mode*/
			TCCR2 = (TCCR2 & 0xCF) | ((config->compareMatch)<<4);
    25a0:	a5 e4       	ldi	r26, 0x45	; 69
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e5 e4       	ldi	r30, 0x45	; 69
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	28 2f       	mov	r18, r24
    25ac:	2f 7c       	andi	r18, 0xCF	; 207
    25ae:	ea 81       	ldd	r30, Y+2	; 0x02
    25b0:	fb 81       	ldd	r31, Y+3	; 0x03
    25b2:	84 81       	ldd	r24, Z+4	; 0x04
    25b4:	88 2f       	mov	r24, r24
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	82 95       	swap	r24
    25ba:	92 95       	swap	r25
    25bc:	90 7f       	andi	r25, 0xF0	; 240
    25be:	98 27       	eor	r25, r24
    25c0:	80 7f       	andi	r24, 0xF0	; 240
    25c2:	98 27       	eor	r25, r24
    25c4:	82 2b       	or	r24, r18
    25c6:	8c 93       	st	X, r24


			/*Enable interrupt for compare mode*/
			SET_BIT(TIMSK, OCIE2);
    25c8:	a9 e5       	ldi	r26, 0x59	; 89
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e9 e5       	ldi	r30, 0x59	; 89
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	80 68       	ori	r24, 0x80	; 128
    25d4:	8c 93       	st	X, r24
    25d6:	1a c0       	rjmp	.+52     	; 0x260c <TIMER_init+0x36c>
		}
		else if((config->mode) == NORMAL_MODE)
    25d8:	ea 81       	ldd	r30, Y+2	; 0x02
    25da:	fb 81       	ldd	r31, Y+3	; 0x03
    25dc:	82 81       	ldd	r24, Z+2	; 0x02
    25de:	88 23       	and	r24, r24
    25e0:	a9 f4       	brne	.+42     	; 0x260c <TIMER_init+0x36c>
		{
			/*The required mode */
			CLEAR_BIT(TCCR2, WGM20);
    25e2:	a5 e4       	ldi	r26, 0x45	; 69
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e5 e4       	ldi	r30, 0x45	; 69
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	8f 7b       	andi	r24, 0xBF	; 191
    25ee:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2, WGM21);
    25f0:	a5 e4       	ldi	r26, 0x45	; 69
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	e5 e4       	ldi	r30, 0x45	; 69
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	87 7f       	andi	r24, 0xF7	; 247
    25fc:	8c 93       	st	X, r24

			/*Enable interrupt for normal mode*/
			SET_BIT(TIMSK, TOIE2);
    25fe:	a9 e5       	ldi	r26, 0x59	; 89
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	e9 e5       	ldi	r30, 0x59	; 89
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	80 64       	ori	r24, 0x40	; 64
    260a:	8c 93       	st	X, r24
		}
	}

	return;
}
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	cf 91       	pop	r28
    2614:	df 91       	pop	r29
    2616:	08 95       	ret

00002618 <TIMER_Deinit>:

/*Description:
 *   1- Insert the required timer to stop it
 *  */
void TIMER_Deinit(uint8 timer_type)
{
    2618:	df 93       	push	r29
    261a:	cf 93       	push	r28
    261c:	0f 92       	push	r0
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	89 83       	std	Y+1, r24	; 0x01
	if(timer_type == TIMER_0)
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	88 23       	and	r24, r24
    2628:	39 f4       	brne	.+14     	; 0x2638 <TIMER_Deinit+0x20>
	{
		TCCR0 = 0;
    262a:	e3 e5       	ldi	r30, 0x53	; 83
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	10 82       	st	Z, r1
		TIMSK = 0;
    2630:	e9 e5       	ldi	r30, 0x59	; 89
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	10 82       	st	Z, r1
    2636:	1a c0       	rjmp	.+52     	; 0x266c <TIMER_Deinit+0x54>
	}
	else if(timer_type == TIMER_1)
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	81 30       	cpi	r24, 0x01	; 1
    263c:	71 f4       	brne	.+28     	; 0x265a <TIMER_Deinit+0x42>
	{
		TCCR1A = 0;
    263e:	ef e4       	ldi	r30, 0x4F	; 79
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	10 82       	st	Z, r1
		TCCR1B = 0;
    2644:	ee e4       	ldi	r30, 0x4E	; 78
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	10 82       	st	Z, r1
		OCR1A = 0;
    264a:	ea e4       	ldi	r30, 0x4A	; 74
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	11 82       	std	Z+1, r1	; 0x01
    2650:	10 82       	st	Z, r1
		TIMSK = 0;
    2652:	e9 e5       	ldi	r30, 0x59	; 89
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	10 82       	st	Z, r1
    2658:	09 c0       	rjmp	.+18     	; 0x266c <TIMER_Deinit+0x54>
	}
	else if (timer_type == TIMER_2)
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	82 30       	cpi	r24, 0x02	; 2
    265e:	31 f4       	brne	.+12     	; 0x266c <TIMER_Deinit+0x54>
	{
		TCCR2 = 0;
    2660:	e5 e4       	ldi	r30, 0x45	; 69
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	10 82       	st	Z, r1
		TIMSK = 0;
    2666:	e9 e5       	ldi	r30, 0x59	; 89
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	10 82       	st	Z, r1
	}

}
    266c:	0f 90       	pop	r0
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	08 95       	ret

00002674 <TIMER_SetCallBack>:

/*Description:
 *   Function to set call back function address.
 * */
void TIMER_SetCallBack(void(*a_ptr)(void))
{
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	00 d0       	rcall	.+0      	; 0x267a <TIMER_SetCallBack+0x6>
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	9a 83       	std	Y+2, r25	; 0x02
    2680:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBack_ptr = (void*)a_ptr;
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	9a 81       	ldd	r25, Y+2	; 0x02
    2686:	90 93 69 01 	sts	0x0169, r25
    268a:	80 93 68 01 	sts	0x0168, r24
}
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	cf 91       	pop	r28
    2694:	df 91       	pop	r29
    2696:	08 95       	ret

00002698 <TIMER1_SetCallBack>:

/*Description:
 *   Function to set call back function address for timer 1.
 * */
void TIMER1_SetCallBack(void(*a_ptr)(void))
{
    2698:	df 93       	push	r29
    269a:	cf 93       	push	r28
    269c:	00 d0       	rcall	.+0      	; 0x269e <TIMER1_SetCallBack+0x6>
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
    26a2:	9a 83       	std	Y+2, r25	; 0x02
    26a4:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBack_ptr1 = (void*)a_ptr;
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	9a 81       	ldd	r25, Y+2	; 0x02
    26aa:	90 93 6b 01 	sts	0x016B, r25
    26ae:	80 93 6a 01 	sts	0x016A, r24
}
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <TIMER2_SetCallBack>:

/*Description:
 *   Function to set call back function address for timer 2.
 * */
void TIMER2_SetCallBack(void(*a_ptr)(void))
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <TIMER2_SetCallBack+0x6>
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	9a 83       	std	Y+2, r25	; 0x02
    26c8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBack_ptr2 = (void*)a_ptr;
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	9a 81       	ldd	r25, Y+2	; 0x02
    26ce:	90 93 6d 01 	sts	0x016D, r25
    26d2:	80 93 6c 01 	sts	0x016C, r24
}
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	08 95       	ret

000026e0 <USART_init>:
 *	  1- Insert the frame format as parity mode, no of stop bits, no of data bits.
 *	  2- Insert UART baud rate.
 *	  3- Enable UART.
 * */
void USART_init( const USART_configType *config)
{
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <USART_init+0x6>
    26e6:	00 d0       	rcall	.+0      	; 0x26e8 <USART_init+0x8>
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
    26ec:	9c 83       	std	Y+4, r25	; 0x04
    26ee:	8b 83       	std	Y+3, r24	; 0x03

	uint16 ubrr_value = 0;
    26f0:	1a 82       	std	Y+2, r1	; 0x02
    26f2:	19 82       	std	Y+1, r1	; 0x01

	/*For double transmission speed, this bit has effect for the asynchronous operation*/
	SET_BIT(UCSRA,U2X);
    26f4:	ab e2       	ldi	r26, 0x2B	; 43
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	eb e2       	ldi	r30, 0x2B	; 43
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	82 60       	ori	r24, 0x02	; 2
    2700:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * Insert no of bits data mode (UCSZ2).
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	SET_BIT(UCSRB, RXEN);
    2702:	aa e2       	ldi	r26, 0x2A	; 42
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	ea e2       	ldi	r30, 0x2A	; 42
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	80 61       	ori	r24, 0x10	; 16
    270e:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
    2710:	aa e2       	ldi	r26, 0x2A	; 42
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	ea e2       	ldi	r30, 0x2A	; 42
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	88 60       	ori	r24, 0x08	; 8
    271c:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0xFB) | (((config->data_bit) & 0x04)<<2);
    271e:	aa e2       	ldi	r26, 0x2A	; 42
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	ea e2       	ldi	r30, 0x2A	; 42
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	28 2f       	mov	r18, r24
    272a:	2b 7f       	andi	r18, 0xFB	; 251
    272c:	eb 81       	ldd	r30, Y+3	; 0x03
    272e:	fc 81       	ldd	r31, Y+4	; 0x04
    2730:	86 81       	ldd	r24, Z+6	; 0x06
    2732:	88 2f       	mov	r24, r24
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	84 70       	andi	r24, 0x04	; 4
    2738:	90 70       	andi	r25, 0x00	; 0
    273a:	88 0f       	add	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	88 0f       	add	r24, r24
    2740:	99 1f       	adc	r25, r25
    2742:	82 2b       	or	r24, r18
    2744:	8c 93       	st	X, r24
	 * Insert parity mode (UPM1:0).
	 * Insert no of stop bits (USBS).
	 * Insert no of data bits (UCSZ1:0).
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (UCSRC & 0xCF) | ((config->parity)<<4);
    2746:	a0 e4       	ldi	r26, 0x40	; 64
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	e0 e4       	ldi	r30, 0x40	; 64
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	28 2f       	mov	r18, r24
    2752:	2f 7c       	andi	r18, 0xCF	; 207
    2754:	eb 81       	ldd	r30, Y+3	; 0x03
    2756:	fc 81       	ldd	r31, Y+4	; 0x04
    2758:	84 81       	ldd	r24, Z+4	; 0x04
    275a:	88 2f       	mov	r24, r24
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	82 95       	swap	r24
    2760:	92 95       	swap	r25
    2762:	90 7f       	andi	r25, 0xF0	; 240
    2764:	98 27       	eor	r25, r24
    2766:	80 7f       	andi	r24, 0xF0	; 240
    2768:	98 27       	eor	r25, r24
    276a:	82 2b       	or	r24, r18
    276c:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((config->stop_bit)<<3);
    276e:	a0 e4       	ldi	r26, 0x40	; 64
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e0 e4       	ldi	r30, 0x40	; 64
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	28 2f       	mov	r18, r24
    277a:	27 7f       	andi	r18, 0xF7	; 247
    277c:	eb 81       	ldd	r30, Y+3	; 0x03
    277e:	fc 81       	ldd	r31, Y+4	; 0x04
    2780:	85 81       	ldd	r24, Z+5	; 0x05
    2782:	88 2f       	mov	r24, r24
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	88 0f       	add	r24, r24
    278c:	99 1f       	adc	r25, r25
    278e:	88 0f       	add	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	82 2b       	or	r24, r18
    2794:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | (((config->data_bit) & 0x03)<<1);
    2796:	a0 e4       	ldi	r26, 0x40	; 64
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	e0 e4       	ldi	r30, 0x40	; 64
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	80 81       	ld	r24, Z
    27a0:	28 2f       	mov	r18, r24
    27a2:	29 7f       	andi	r18, 0xF9	; 249
    27a4:	eb 81       	ldd	r30, Y+3	; 0x03
    27a6:	fc 81       	ldd	r31, Y+4	; 0x04
    27a8:	86 81       	ldd	r24, Z+6	; 0x06
    27aa:	88 2f       	mov	r24, r24
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	83 70       	andi	r24, 0x03	; 3
    27b0:	90 70       	andi	r25, 0x00	; 0
    27b2:	88 0f       	add	r24, r24
    27b4:	99 1f       	adc	r25, r25
    27b6:	82 2b       	or	r24, r18
    27b8:	8c 93       	st	X, r24

//	SET_BIT(UCSRC, RXEN);

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((config->baud_rate) * 8UL))) - 1);
    27ba:	eb 81       	ldd	r30, Y+3	; 0x03
    27bc:	fc 81       	ldd	r31, Y+4	; 0x04
    27be:	80 81       	ld	r24, Z
    27c0:	91 81       	ldd	r25, Z+1	; 0x01
    27c2:	a2 81       	ldd	r26, Z+2	; 0x02
    27c4:	b3 81       	ldd	r27, Z+3	; 0x03
    27c6:	88 0f       	add	r24, r24
    27c8:	99 1f       	adc	r25, r25
    27ca:	aa 1f       	adc	r26, r26
    27cc:	bb 1f       	adc	r27, r27
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	aa 1f       	adc	r26, r26
    27d4:	bb 1f       	adc	r27, r27
    27d6:	88 0f       	add	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	aa 1f       	adc	r26, r26
    27dc:	bb 1f       	adc	r27, r27
    27de:	9c 01       	movw	r18, r24
    27e0:	ad 01       	movw	r20, r26
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	92 e1       	ldi	r25, 0x12	; 18
    27e6:	aa e7       	ldi	r26, 0x7A	; 122
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	bc 01       	movw	r22, r24
    27ec:	cd 01       	movw	r24, r26
    27ee:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <__udivmodsi4>
    27f2:	da 01       	movw	r26, r20
    27f4:	c9 01       	movw	r24, r18
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	9a 83       	std	Y+2, r25	; 0x02
    27fa:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/

	UBRRH = ubrr_value>>8;
    27fc:	e0 e4       	ldi	r30, 0x40	; 64
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	9a 81       	ldd	r25, Y+2	; 0x02
    2804:	89 2f       	mov	r24, r25
    2806:	99 27       	eor	r25, r25
    2808:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    280a:	e9 e2       	ldi	r30, 0x29	; 41
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	80 83       	st	Z, r24
	return;
}
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <USART_sendByte>:
/*
 * Description:
 * 		Functional responsible for send byte to another UART device.
 * */
void USART_sendByte(const uint8 data)
{
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	0f 92       	push	r0
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA, UDRE)){}
    282c:	eb e2       	ldi	r30, 0x2B	; 43
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	80 81       	ld	r24, Z
    2832:	88 2f       	mov	r24, r24
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	80 72       	andi	r24, 0x20	; 32
    2838:	90 70       	andi	r25, 0x00	; 0
    283a:	00 97       	sbiw	r24, 0x00	; 0
    283c:	b9 f3       	breq	.-18     	; 0x282c <USART_sendByte+0xc>

	/*
	 * The Transmit Data Buffer Register (TXB) will be the destination
	 * for data written to the UDR Register location.
	 * */
	UDR = data;
    283e:	ec e2       	ldi	r30, 0x2C	; 44
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	80 83       	st	Z, r24

	return;
}
    2846:	0f 90       	pop	r0
    2848:	cf 91       	pop	r28
    284a:	df 91       	pop	r29
    284c:	08 95       	ret

0000284e <USART_receiveByte>:
/*
 * Description:
 * 		Functional responsible for receive byte to another UART device.
 * */
uint8 USART_receiveByte(void)
{
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62
	/*
	 *  RXC flag is set when the UART receive data so wait until this flag is set to one
	 * */
	while(BIT_IS_CLEAR(UCSRA, RXC)){}
    2856:	eb e2       	ldi	r30, 0x2B	; 43
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	88 23       	and	r24, r24
    285e:	dc f7       	brge	.-10     	; 0x2856 <USART_receiveByte+0x8>

	/*
	 * Reading the UDR Register location will return the contents of the Receive Data
	 * Buffer Register (RXB).
	 * */
	return UDR;
    2860:	ec e2       	ldi	r30, 0x2C	; 44
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	80 81       	ld	r24, Z
}
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <USART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void USART_sendString(const char *str_ptr)
{
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	00 d0       	rcall	.+0      	; 0x2872 <USART_sendString+0x6>
    2872:	0f 92       	push	r0
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	9b 83       	std	Y+3, r25	; 0x03
    287a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    287c:	19 82       	std	Y+1, r1	; 0x01
    287e:	0e c0       	rjmp	.+28     	; 0x289c <USART_sendString+0x30>

	while(str_ptr[i] != '\0')
	{
		USART_sendByte(str_ptr[i]);
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	28 2f       	mov	r18, r24
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	8a 81       	ldd	r24, Y+2	; 0x02
    2888:	9b 81       	ldd	r25, Y+3	; 0x03
    288a:	fc 01       	movw	r30, r24
    288c:	e2 0f       	add	r30, r18
    288e:	f3 1f       	adc	r31, r19
    2890:	80 81       	ld	r24, Z
    2892:	0e 94 10 14 	call	0x2820	; 0x2820 <USART_sendByte>
		i++;
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	8f 5f       	subi	r24, 0xFF	; 255
    289a:	89 83       	std	Y+1, r24	; 0x01
 */
void USART_sendString(const char *str_ptr)
{
	uint8 i = 0;

	while(str_ptr[i] != '\0')
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	28 2f       	mov	r18, r24
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	8a 81       	ldd	r24, Y+2	; 0x02
    28a4:	9b 81       	ldd	r25, Y+3	; 0x03
    28a6:	fc 01       	movw	r30, r24
    28a8:	e2 0f       	add	r30, r18
    28aa:	f3 1f       	adc	r31, r19
    28ac:	80 81       	ld	r24, Z
    28ae:	88 23       	and	r24, r24
    28b0:	39 f7       	brne	.-50     	; 0x2880 <USART_sendString+0x14>
		USART_sendByte(str_ptr[i]);
		i++;
	}

	return;
}
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <USART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void USART_receiveString(char *str_ptr)
{
    28be:	0f 93       	push	r16
    28c0:	1f 93       	push	r17
    28c2:	df 93       	push	r29
    28c4:	cf 93       	push	r28
    28c6:	00 d0       	rcall	.+0      	; 0x28c8 <USART_receiveString+0xa>
    28c8:	0f 92       	push	r0
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
    28ce:	9b 83       	std	Y+3, r25	; 0x03
    28d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28d2:	19 82       	std	Y+1, r1	; 0x01

	str_ptr[i] = USART_receiveByte();
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	28 2f       	mov	r18, r24
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	8a 81       	ldd	r24, Y+2	; 0x02
    28dc:	9b 81       	ldd	r25, Y+3	; 0x03
    28de:	8c 01       	movw	r16, r24
    28e0:	02 0f       	add	r16, r18
    28e2:	13 1f       	adc	r17, r19
    28e4:	0e 94 27 14 	call	0x284e	; 0x284e <USART_receiveByte>
    28e8:	f8 01       	movw	r30, r16
    28ea:	80 83       	st	Z, r24
    28ec:	0f c0       	rjmp	.+30     	; 0x290c <USART_receiveString+0x4e>

	while(str_ptr[i] != '#')
	{
		i++;
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	8f 5f       	subi	r24, 0xFF	; 255
    28f2:	89 83       	std	Y+1, r24	; 0x01
		str_ptr[i] = USART_receiveByte();
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
    28f6:	28 2f       	mov	r18, r24
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	8a 81       	ldd	r24, Y+2	; 0x02
    28fc:	9b 81       	ldd	r25, Y+3	; 0x03
    28fe:	8c 01       	movw	r16, r24
    2900:	02 0f       	add	r16, r18
    2902:	13 1f       	adc	r17, r19
    2904:	0e 94 27 14 	call	0x284e	; 0x284e <USART_receiveByte>
    2908:	f8 01       	movw	r30, r16
    290a:	80 83       	st	Z, r24
{
	uint8 i = 0;

	str_ptr[i] = USART_receiveByte();

	while(str_ptr[i] != '#')
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	28 2f       	mov	r18, r24
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	8a 81       	ldd	r24, Y+2	; 0x02
    2914:	9b 81       	ldd	r25, Y+3	; 0x03
    2916:	fc 01       	movw	r30, r24
    2918:	e2 0f       	add	r30, r18
    291a:	f3 1f       	adc	r31, r19
    291c:	80 81       	ld	r24, Z
    291e:	83 32       	cpi	r24, 0x23	; 35
    2920:	31 f7       	brne	.-52     	; 0x28ee <USART_receiveString+0x30>
	{
		i++;
		str_ptr[i] = USART_receiveByte();
	}

	str_ptr[i] = '\0';
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	28 2f       	mov	r18, r24
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	8a 81       	ldd	r24, Y+2	; 0x02
    292a:	9b 81       	ldd	r25, Y+3	; 0x03
    292c:	fc 01       	movw	r30, r24
    292e:	e2 0f       	add	r30, r18
    2930:	f3 1f       	adc	r31, r19
    2932:	10 82       	st	Z, r1
	return;
}
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	1f 91       	pop	r17
    2940:	0f 91       	pop	r16
    2942:	08 95       	ret

00002944 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	00 d0       	rcall	.+0      	; 0x294a <GPIO_setupPinDirection+0x6>
    294a:	00 d0       	rcall	.+0      	; 0x294c <GPIO_setupPinDirection+0x8>
    294c:	0f 92       	push	r0
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	89 83       	std	Y+1, r24	; 0x01
    2954:	6a 83       	std	Y+2, r22	; 0x02
    2956:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	88 30       	cpi	r24, 0x08	; 8
    295c:	08 f0       	brcs	.+2      	; 0x2960 <GPIO_setupPinDirection+0x1c>
    295e:	d5 c0       	rjmp	.+426    	; 0x2b0a <GPIO_setupPinDirection+0x1c6>
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	84 30       	cpi	r24, 0x04	; 4
    2964:	08 f0       	brcs	.+2      	; 0x2968 <GPIO_setupPinDirection+0x24>
    2966:	d1 c0       	rjmp	.+418    	; 0x2b0a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	28 2f       	mov	r18, r24
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	3d 83       	std	Y+5, r19	; 0x05
    2970:	2c 83       	std	Y+4, r18	; 0x04
    2972:	8c 81       	ldd	r24, Y+4	; 0x04
    2974:	9d 81       	ldd	r25, Y+5	; 0x05
    2976:	81 30       	cpi	r24, 0x01	; 1
    2978:	91 05       	cpc	r25, r1
    297a:	09 f4       	brne	.+2      	; 0x297e <GPIO_setupPinDirection+0x3a>
    297c:	43 c0       	rjmp	.+134    	; 0x2a04 <GPIO_setupPinDirection+0xc0>
    297e:	2c 81       	ldd	r18, Y+4	; 0x04
    2980:	3d 81       	ldd	r19, Y+5	; 0x05
    2982:	22 30       	cpi	r18, 0x02	; 2
    2984:	31 05       	cpc	r19, r1
    2986:	2c f4       	brge	.+10     	; 0x2992 <GPIO_setupPinDirection+0x4e>
    2988:	8c 81       	ldd	r24, Y+4	; 0x04
    298a:	9d 81       	ldd	r25, Y+5	; 0x05
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	71 f0       	breq	.+28     	; 0x29ac <GPIO_setupPinDirection+0x68>
    2990:	bc c0       	rjmp	.+376    	; 0x2b0a <GPIO_setupPinDirection+0x1c6>
    2992:	2c 81       	ldd	r18, Y+4	; 0x04
    2994:	3d 81       	ldd	r19, Y+5	; 0x05
    2996:	22 30       	cpi	r18, 0x02	; 2
    2998:	31 05       	cpc	r19, r1
    299a:	09 f4       	brne	.+2      	; 0x299e <GPIO_setupPinDirection+0x5a>
    299c:	5f c0       	rjmp	.+190    	; 0x2a5c <GPIO_setupPinDirection+0x118>
    299e:	8c 81       	ldd	r24, Y+4	; 0x04
    29a0:	9d 81       	ldd	r25, Y+5	; 0x05
    29a2:	83 30       	cpi	r24, 0x03	; 3
    29a4:	91 05       	cpc	r25, r1
    29a6:	09 f4       	brne	.+2      	; 0x29aa <GPIO_setupPinDirection+0x66>
    29a8:	85 c0       	rjmp	.+266    	; 0x2ab4 <GPIO_setupPinDirection+0x170>
    29aa:	af c0       	rjmp	.+350    	; 0x2b0a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	81 30       	cpi	r24, 0x01	; 1
    29b0:	a1 f4       	brne	.+40     	; 0x29da <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    29b2:	aa e3       	ldi	r26, 0x3A	; 58
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	ea e3       	ldi	r30, 0x3A	; 58
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	48 2f       	mov	r20, r24
    29be:	8a 81       	ldd	r24, Y+2	; 0x02
    29c0:	28 2f       	mov	r18, r24
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	02 2e       	mov	r0, r18
    29ca:	02 c0       	rjmp	.+4      	; 0x29d0 <GPIO_setupPinDirection+0x8c>
    29cc:	88 0f       	add	r24, r24
    29ce:	99 1f       	adc	r25, r25
    29d0:	0a 94       	dec	r0
    29d2:	e2 f7       	brpl	.-8      	; 0x29cc <GPIO_setupPinDirection+0x88>
    29d4:	84 2b       	or	r24, r20
    29d6:	8c 93       	st	X, r24
    29d8:	98 c0       	rjmp	.+304    	; 0x2b0a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    29da:	aa e3       	ldi	r26, 0x3A	; 58
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	ea e3       	ldi	r30, 0x3A	; 58
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	80 81       	ld	r24, Z
    29e4:	48 2f       	mov	r20, r24
    29e6:	8a 81       	ldd	r24, Y+2	; 0x02
    29e8:	28 2f       	mov	r18, r24
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	02 2e       	mov	r0, r18
    29f2:	02 c0       	rjmp	.+4      	; 0x29f8 <GPIO_setupPinDirection+0xb4>
    29f4:	88 0f       	add	r24, r24
    29f6:	99 1f       	adc	r25, r25
    29f8:	0a 94       	dec	r0
    29fa:	e2 f7       	brpl	.-8      	; 0x29f4 <GPIO_setupPinDirection+0xb0>
    29fc:	80 95       	com	r24
    29fe:	84 23       	and	r24, r20
    2a00:	8c 93       	st	X, r24
    2a02:	83 c0       	rjmp	.+262    	; 0x2b0a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	81 30       	cpi	r24, 0x01	; 1
    2a08:	a1 f4       	brne	.+40     	; 0x2a32 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2a0a:	a7 e3       	ldi	r26, 0x37	; 55
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	e7 e3       	ldi	r30, 0x37	; 55
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	48 2f       	mov	r20, r24
    2a16:	8a 81       	ldd	r24, Y+2	; 0x02
    2a18:	28 2f       	mov	r18, r24
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	02 2e       	mov	r0, r18
    2a22:	02 c0       	rjmp	.+4      	; 0x2a28 <GPIO_setupPinDirection+0xe4>
    2a24:	88 0f       	add	r24, r24
    2a26:	99 1f       	adc	r25, r25
    2a28:	0a 94       	dec	r0
    2a2a:	e2 f7       	brpl	.-8      	; 0x2a24 <GPIO_setupPinDirection+0xe0>
    2a2c:	84 2b       	or	r24, r20
    2a2e:	8c 93       	st	X, r24
    2a30:	6c c0       	rjmp	.+216    	; 0x2b0a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2a32:	a7 e3       	ldi	r26, 0x37	; 55
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	e7 e3       	ldi	r30, 0x37	; 55
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	48 2f       	mov	r20, r24
    2a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a40:	28 2f       	mov	r18, r24
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	02 2e       	mov	r0, r18
    2a4a:	02 c0       	rjmp	.+4      	; 0x2a50 <GPIO_setupPinDirection+0x10c>
    2a4c:	88 0f       	add	r24, r24
    2a4e:	99 1f       	adc	r25, r25
    2a50:	0a 94       	dec	r0
    2a52:	e2 f7       	brpl	.-8      	; 0x2a4c <GPIO_setupPinDirection+0x108>
    2a54:	80 95       	com	r24
    2a56:	84 23       	and	r24, r20
    2a58:	8c 93       	st	X, r24
    2a5a:	57 c0       	rjmp	.+174    	; 0x2b0a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5e:	81 30       	cpi	r24, 0x01	; 1
    2a60:	a1 f4       	brne	.+40     	; 0x2a8a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2a62:	a4 e3       	ldi	r26, 0x34	; 52
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	e4 e3       	ldi	r30, 0x34	; 52
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	80 81       	ld	r24, Z
    2a6c:	48 2f       	mov	r20, r24
    2a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a70:	28 2f       	mov	r18, r24
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	02 2e       	mov	r0, r18
    2a7a:	02 c0       	rjmp	.+4      	; 0x2a80 <GPIO_setupPinDirection+0x13c>
    2a7c:	88 0f       	add	r24, r24
    2a7e:	99 1f       	adc	r25, r25
    2a80:	0a 94       	dec	r0
    2a82:	e2 f7       	brpl	.-8      	; 0x2a7c <GPIO_setupPinDirection+0x138>
    2a84:	84 2b       	or	r24, r20
    2a86:	8c 93       	st	X, r24
    2a88:	40 c0       	rjmp	.+128    	; 0x2b0a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2a8a:	a4 e3       	ldi	r26, 0x34	; 52
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	e4 e3       	ldi	r30, 0x34	; 52
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	80 81       	ld	r24, Z
    2a94:	48 2f       	mov	r20, r24
    2a96:	8a 81       	ldd	r24, Y+2	; 0x02
    2a98:	28 2f       	mov	r18, r24
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	02 2e       	mov	r0, r18
    2aa2:	02 c0       	rjmp	.+4      	; 0x2aa8 <GPIO_setupPinDirection+0x164>
    2aa4:	88 0f       	add	r24, r24
    2aa6:	99 1f       	adc	r25, r25
    2aa8:	0a 94       	dec	r0
    2aaa:	e2 f7       	brpl	.-8      	; 0x2aa4 <GPIO_setupPinDirection+0x160>
    2aac:	80 95       	com	r24
    2aae:	84 23       	and	r24, r20
    2ab0:	8c 93       	st	X, r24
    2ab2:	2b c0       	rjmp	.+86     	; 0x2b0a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab6:	81 30       	cpi	r24, 0x01	; 1
    2ab8:	a1 f4       	brne	.+40     	; 0x2ae2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2aba:	a1 e3       	ldi	r26, 0x31	; 49
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	e1 e3       	ldi	r30, 0x31	; 49
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	48 2f       	mov	r20, r24
    2ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac8:	28 2f       	mov	r18, r24
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	02 2e       	mov	r0, r18
    2ad2:	02 c0       	rjmp	.+4      	; 0x2ad8 <GPIO_setupPinDirection+0x194>
    2ad4:	88 0f       	add	r24, r24
    2ad6:	99 1f       	adc	r25, r25
    2ad8:	0a 94       	dec	r0
    2ada:	e2 f7       	brpl	.-8      	; 0x2ad4 <GPIO_setupPinDirection+0x190>
    2adc:	84 2b       	or	r24, r20
    2ade:	8c 93       	st	X, r24
    2ae0:	14 c0       	rjmp	.+40     	; 0x2b0a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2ae2:	a1 e3       	ldi	r26, 0x31	; 49
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	e1 e3       	ldi	r30, 0x31	; 49
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	48 2f       	mov	r20, r24
    2aee:	8a 81       	ldd	r24, Y+2	; 0x02
    2af0:	28 2f       	mov	r18, r24
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	02 2e       	mov	r0, r18
    2afa:	02 c0       	rjmp	.+4      	; 0x2b00 <GPIO_setupPinDirection+0x1bc>
    2afc:	88 0f       	add	r24, r24
    2afe:	99 1f       	adc	r25, r25
    2b00:	0a 94       	dec	r0
    2b02:	e2 f7       	brpl	.-8      	; 0x2afc <GPIO_setupPinDirection+0x1b8>
    2b04:	80 95       	com	r24
    2b06:	84 23       	and	r24, r20
    2b08:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0
    2b12:	0f 90       	pop	r0
    2b14:	cf 91       	pop	r28
    2b16:	df 91       	pop	r29
    2b18:	08 95       	ret

00002b1a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2b1a:	df 93       	push	r29
    2b1c:	cf 93       	push	r28
    2b1e:	00 d0       	rcall	.+0      	; 0x2b20 <GPIO_writePin+0x6>
    2b20:	00 d0       	rcall	.+0      	; 0x2b22 <GPIO_writePin+0x8>
    2b22:	0f 92       	push	r0
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
    2b28:	89 83       	std	Y+1, r24	; 0x01
    2b2a:	6a 83       	std	Y+2, r22	; 0x02
    2b2c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b30:	88 30       	cpi	r24, 0x08	; 8
    2b32:	08 f0       	brcs	.+2      	; 0x2b36 <GPIO_writePin+0x1c>
    2b34:	d5 c0       	rjmp	.+426    	; 0x2ce0 <GPIO_writePin+0x1c6>
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	84 30       	cpi	r24, 0x04	; 4
    2b3a:	08 f0       	brcs	.+2      	; 0x2b3e <GPIO_writePin+0x24>
    2b3c:	d1 c0       	rjmp	.+418    	; 0x2ce0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	28 2f       	mov	r18, r24
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	3d 83       	std	Y+5, r19	; 0x05
    2b46:	2c 83       	std	Y+4, r18	; 0x04
    2b48:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b4c:	81 30       	cpi	r24, 0x01	; 1
    2b4e:	91 05       	cpc	r25, r1
    2b50:	09 f4       	brne	.+2      	; 0x2b54 <GPIO_writePin+0x3a>
    2b52:	43 c0       	rjmp	.+134    	; 0x2bda <GPIO_writePin+0xc0>
    2b54:	2c 81       	ldd	r18, Y+4	; 0x04
    2b56:	3d 81       	ldd	r19, Y+5	; 0x05
    2b58:	22 30       	cpi	r18, 0x02	; 2
    2b5a:	31 05       	cpc	r19, r1
    2b5c:	2c f4       	brge	.+10     	; 0x2b68 <GPIO_writePin+0x4e>
    2b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b60:	9d 81       	ldd	r25, Y+5	; 0x05
    2b62:	00 97       	sbiw	r24, 0x00	; 0
    2b64:	71 f0       	breq	.+28     	; 0x2b82 <GPIO_writePin+0x68>
    2b66:	bc c0       	rjmp	.+376    	; 0x2ce0 <GPIO_writePin+0x1c6>
    2b68:	2c 81       	ldd	r18, Y+4	; 0x04
    2b6a:	3d 81       	ldd	r19, Y+5	; 0x05
    2b6c:	22 30       	cpi	r18, 0x02	; 2
    2b6e:	31 05       	cpc	r19, r1
    2b70:	09 f4       	brne	.+2      	; 0x2b74 <GPIO_writePin+0x5a>
    2b72:	5f c0       	rjmp	.+190    	; 0x2c32 <GPIO_writePin+0x118>
    2b74:	8c 81       	ldd	r24, Y+4	; 0x04
    2b76:	9d 81       	ldd	r25, Y+5	; 0x05
    2b78:	83 30       	cpi	r24, 0x03	; 3
    2b7a:	91 05       	cpc	r25, r1
    2b7c:	09 f4       	brne	.+2      	; 0x2b80 <GPIO_writePin+0x66>
    2b7e:	85 c0       	rjmp	.+266    	; 0x2c8a <GPIO_writePin+0x170>
    2b80:	af c0       	rjmp	.+350    	; 0x2ce0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2b82:	8b 81       	ldd	r24, Y+3	; 0x03
    2b84:	81 30       	cpi	r24, 0x01	; 1
    2b86:	a1 f4       	brne	.+40     	; 0x2bb0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2b88:	ab e3       	ldi	r26, 0x3B	; 59
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	eb e3       	ldi	r30, 0x3B	; 59
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	80 81       	ld	r24, Z
    2b92:	48 2f       	mov	r20, r24
    2b94:	8a 81       	ldd	r24, Y+2	; 0x02
    2b96:	28 2f       	mov	r18, r24
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	02 2e       	mov	r0, r18
    2ba0:	02 c0       	rjmp	.+4      	; 0x2ba6 <GPIO_writePin+0x8c>
    2ba2:	88 0f       	add	r24, r24
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	0a 94       	dec	r0
    2ba8:	e2 f7       	brpl	.-8      	; 0x2ba2 <GPIO_writePin+0x88>
    2baa:	84 2b       	or	r24, r20
    2bac:	8c 93       	st	X, r24
    2bae:	98 c0       	rjmp	.+304    	; 0x2ce0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2bb0:	ab e3       	ldi	r26, 0x3B	; 59
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	eb e3       	ldi	r30, 0x3B	; 59
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	48 2f       	mov	r20, r24
    2bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbe:	28 2f       	mov	r18, r24
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	02 2e       	mov	r0, r18
    2bc8:	02 c0       	rjmp	.+4      	; 0x2bce <GPIO_writePin+0xb4>
    2bca:	88 0f       	add	r24, r24
    2bcc:	99 1f       	adc	r25, r25
    2bce:	0a 94       	dec	r0
    2bd0:	e2 f7       	brpl	.-8      	; 0x2bca <GPIO_writePin+0xb0>
    2bd2:	80 95       	com	r24
    2bd4:	84 23       	and	r24, r20
    2bd6:	8c 93       	st	X, r24
    2bd8:	83 c0       	rjmp	.+262    	; 0x2ce0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2bda:	8b 81       	ldd	r24, Y+3	; 0x03
    2bdc:	81 30       	cpi	r24, 0x01	; 1
    2bde:	a1 f4       	brne	.+40     	; 0x2c08 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2be0:	a8 e3       	ldi	r26, 0x38	; 56
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	e8 e3       	ldi	r30, 0x38	; 56
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	48 2f       	mov	r20, r24
    2bec:	8a 81       	ldd	r24, Y+2	; 0x02
    2bee:	28 2f       	mov	r18, r24
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	02 2e       	mov	r0, r18
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <GPIO_writePin+0xe4>
    2bfa:	88 0f       	add	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	0a 94       	dec	r0
    2c00:	e2 f7       	brpl	.-8      	; 0x2bfa <GPIO_writePin+0xe0>
    2c02:	84 2b       	or	r24, r20
    2c04:	8c 93       	st	X, r24
    2c06:	6c c0       	rjmp	.+216    	; 0x2ce0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2c08:	a8 e3       	ldi	r26, 0x38	; 56
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	e8 e3       	ldi	r30, 0x38	; 56
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	48 2f       	mov	r20, r24
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	28 2f       	mov	r18, r24
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	02 2e       	mov	r0, r18
    2c20:	02 c0       	rjmp	.+4      	; 0x2c26 <GPIO_writePin+0x10c>
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	0a 94       	dec	r0
    2c28:	e2 f7       	brpl	.-8      	; 0x2c22 <GPIO_writePin+0x108>
    2c2a:	80 95       	com	r24
    2c2c:	84 23       	and	r24, r20
    2c2e:	8c 93       	st	X, r24
    2c30:	57 c0       	rjmp	.+174    	; 0x2ce0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2c32:	8b 81       	ldd	r24, Y+3	; 0x03
    2c34:	81 30       	cpi	r24, 0x01	; 1
    2c36:	a1 f4       	brne	.+40     	; 0x2c60 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2c38:	a5 e3       	ldi	r26, 0x35	; 53
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	e5 e3       	ldi	r30, 0x35	; 53
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	48 2f       	mov	r20, r24
    2c44:	8a 81       	ldd	r24, Y+2	; 0x02
    2c46:	28 2f       	mov	r18, r24
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	02 2e       	mov	r0, r18
    2c50:	02 c0       	rjmp	.+4      	; 0x2c56 <GPIO_writePin+0x13c>
    2c52:	88 0f       	add	r24, r24
    2c54:	99 1f       	adc	r25, r25
    2c56:	0a 94       	dec	r0
    2c58:	e2 f7       	brpl	.-8      	; 0x2c52 <GPIO_writePin+0x138>
    2c5a:	84 2b       	or	r24, r20
    2c5c:	8c 93       	st	X, r24
    2c5e:	40 c0       	rjmp	.+128    	; 0x2ce0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2c60:	a5 e3       	ldi	r26, 0x35	; 53
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	e5 e3       	ldi	r30, 0x35	; 53
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	48 2f       	mov	r20, r24
    2c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6e:	28 2f       	mov	r18, r24
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	02 2e       	mov	r0, r18
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <GPIO_writePin+0x164>
    2c7a:	88 0f       	add	r24, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	0a 94       	dec	r0
    2c80:	e2 f7       	brpl	.-8      	; 0x2c7a <GPIO_writePin+0x160>
    2c82:	80 95       	com	r24
    2c84:	84 23       	and	r24, r20
    2c86:	8c 93       	st	X, r24
    2c88:	2b c0       	rjmp	.+86     	; 0x2ce0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8c:	81 30       	cpi	r24, 0x01	; 1
    2c8e:	a1 f4       	brne	.+40     	; 0x2cb8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2c90:	a2 e3       	ldi	r26, 0x32	; 50
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	e2 e3       	ldi	r30, 0x32	; 50
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	48 2f       	mov	r20, r24
    2c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9e:	28 2f       	mov	r18, r24
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	02 2e       	mov	r0, r18
    2ca8:	02 c0       	rjmp	.+4      	; 0x2cae <GPIO_writePin+0x194>
    2caa:	88 0f       	add	r24, r24
    2cac:	99 1f       	adc	r25, r25
    2cae:	0a 94       	dec	r0
    2cb0:	e2 f7       	brpl	.-8      	; 0x2caa <GPIO_writePin+0x190>
    2cb2:	84 2b       	or	r24, r20
    2cb4:	8c 93       	st	X, r24
    2cb6:	14 c0       	rjmp	.+40     	; 0x2ce0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2cb8:	a2 e3       	ldi	r26, 0x32	; 50
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	e2 e3       	ldi	r30, 0x32	; 50
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	48 2f       	mov	r20, r24
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc6:	28 2f       	mov	r18, r24
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	02 2e       	mov	r0, r18
    2cd0:	02 c0       	rjmp	.+4      	; 0x2cd6 <GPIO_writePin+0x1bc>
    2cd2:	88 0f       	add	r24, r24
    2cd4:	99 1f       	adc	r25, r25
    2cd6:	0a 94       	dec	r0
    2cd8:	e2 f7       	brpl	.-8      	; 0x2cd2 <GPIO_writePin+0x1b8>
    2cda:	80 95       	com	r24
    2cdc:	84 23       	and	r24, r20
    2cde:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	0f 90       	pop	r0
    2ce8:	0f 90       	pop	r0
    2cea:	cf 91       	pop	r28
    2cec:	df 91       	pop	r29
    2cee:	08 95       	ret

00002cf0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	00 d0       	rcall	.+0      	; 0x2cf6 <GPIO_readPin+0x6>
    2cf6:	00 d0       	rcall	.+0      	; 0x2cf8 <GPIO_readPin+0x8>
    2cf8:	0f 92       	push	r0
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
    2cfe:	8a 83       	std	Y+2, r24	; 0x02
    2d00:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2d02:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2d04:	8b 81       	ldd	r24, Y+3	; 0x03
    2d06:	88 30       	cpi	r24, 0x08	; 8
    2d08:	08 f0       	brcs	.+2      	; 0x2d0c <GPIO_readPin+0x1c>
    2d0a:	84 c0       	rjmp	.+264    	; 0x2e14 <GPIO_readPin+0x124>
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	84 30       	cpi	r24, 0x04	; 4
    2d10:	08 f0       	brcs	.+2      	; 0x2d14 <GPIO_readPin+0x24>
    2d12:	80 c0       	rjmp	.+256    	; 0x2e14 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2d14:	8a 81       	ldd	r24, Y+2	; 0x02
    2d16:	28 2f       	mov	r18, r24
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	3d 83       	std	Y+5, r19	; 0x05
    2d1c:	2c 83       	std	Y+4, r18	; 0x04
    2d1e:	4c 81       	ldd	r20, Y+4	; 0x04
    2d20:	5d 81       	ldd	r21, Y+5	; 0x05
    2d22:	41 30       	cpi	r20, 0x01	; 1
    2d24:	51 05       	cpc	r21, r1
    2d26:	79 f1       	breq	.+94     	; 0x2d86 <GPIO_readPin+0x96>
    2d28:	8c 81       	ldd	r24, Y+4	; 0x04
    2d2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d2c:	82 30       	cpi	r24, 0x02	; 2
    2d2e:	91 05       	cpc	r25, r1
    2d30:	34 f4       	brge	.+12     	; 0x2d3e <GPIO_readPin+0x4e>
    2d32:	2c 81       	ldd	r18, Y+4	; 0x04
    2d34:	3d 81       	ldd	r19, Y+5	; 0x05
    2d36:	21 15       	cp	r18, r1
    2d38:	31 05       	cpc	r19, r1
    2d3a:	69 f0       	breq	.+26     	; 0x2d56 <GPIO_readPin+0x66>
    2d3c:	6b c0       	rjmp	.+214    	; 0x2e14 <GPIO_readPin+0x124>
    2d3e:	4c 81       	ldd	r20, Y+4	; 0x04
    2d40:	5d 81       	ldd	r21, Y+5	; 0x05
    2d42:	42 30       	cpi	r20, 0x02	; 2
    2d44:	51 05       	cpc	r21, r1
    2d46:	b9 f1       	breq	.+110    	; 0x2db6 <GPIO_readPin+0xc6>
    2d48:	8c 81       	ldd	r24, Y+4	; 0x04
    2d4a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d4c:	83 30       	cpi	r24, 0x03	; 3
    2d4e:	91 05       	cpc	r25, r1
    2d50:	09 f4       	brne	.+2      	; 0x2d54 <GPIO_readPin+0x64>
    2d52:	49 c0       	rjmp	.+146    	; 0x2de6 <GPIO_readPin+0xf6>
    2d54:	5f c0       	rjmp	.+190    	; 0x2e14 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2d56:	e9 e3       	ldi	r30, 0x39	; 57
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	28 2f       	mov	r18, r24
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	8b 81       	ldd	r24, Y+3	; 0x03
    2d62:	88 2f       	mov	r24, r24
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	a9 01       	movw	r20, r18
    2d68:	02 c0       	rjmp	.+4      	; 0x2d6e <GPIO_readPin+0x7e>
    2d6a:	55 95       	asr	r21
    2d6c:	47 95       	ror	r20
    2d6e:	8a 95       	dec	r24
    2d70:	e2 f7       	brpl	.-8      	; 0x2d6a <GPIO_readPin+0x7a>
    2d72:	ca 01       	movw	r24, r20
    2d74:	81 70       	andi	r24, 0x01	; 1
    2d76:	90 70       	andi	r25, 0x00	; 0
    2d78:	88 23       	and	r24, r24
    2d7a:	19 f0       	breq	.+6      	; 0x2d82 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	89 83       	std	Y+1, r24	; 0x01
    2d80:	49 c0       	rjmp	.+146    	; 0x2e14 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2d82:	19 82       	std	Y+1, r1	; 0x01
    2d84:	47 c0       	rjmp	.+142    	; 0x2e14 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2d86:	e6 e3       	ldi	r30, 0x36	; 54
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	28 2f       	mov	r18, r24
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	8b 81       	ldd	r24, Y+3	; 0x03
    2d92:	88 2f       	mov	r24, r24
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	a9 01       	movw	r20, r18
    2d98:	02 c0       	rjmp	.+4      	; 0x2d9e <GPIO_readPin+0xae>
    2d9a:	55 95       	asr	r21
    2d9c:	47 95       	ror	r20
    2d9e:	8a 95       	dec	r24
    2da0:	e2 f7       	brpl	.-8      	; 0x2d9a <GPIO_readPin+0xaa>
    2da2:	ca 01       	movw	r24, r20
    2da4:	81 70       	andi	r24, 0x01	; 1
    2da6:	90 70       	andi	r25, 0x00	; 0
    2da8:	88 23       	and	r24, r24
    2daa:	19 f0       	breq	.+6      	; 0x2db2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	89 83       	std	Y+1, r24	; 0x01
    2db0:	31 c0       	rjmp	.+98     	; 0x2e14 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2db2:	19 82       	std	Y+1, r1	; 0x01
    2db4:	2f c0       	rjmp	.+94     	; 0x2e14 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2db6:	e3 e3       	ldi	r30, 0x33	; 51
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	80 81       	ld	r24, Z
    2dbc:	28 2f       	mov	r18, r24
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc2:	88 2f       	mov	r24, r24
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	a9 01       	movw	r20, r18
    2dc8:	02 c0       	rjmp	.+4      	; 0x2dce <GPIO_readPin+0xde>
    2dca:	55 95       	asr	r21
    2dcc:	47 95       	ror	r20
    2dce:	8a 95       	dec	r24
    2dd0:	e2 f7       	brpl	.-8      	; 0x2dca <GPIO_readPin+0xda>
    2dd2:	ca 01       	movw	r24, r20
    2dd4:	81 70       	andi	r24, 0x01	; 1
    2dd6:	90 70       	andi	r25, 0x00	; 0
    2dd8:	88 23       	and	r24, r24
    2dda:	19 f0       	breq	.+6      	; 0x2de2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	89 83       	std	Y+1, r24	; 0x01
    2de0:	19 c0       	rjmp	.+50     	; 0x2e14 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2de2:	19 82       	std	Y+1, r1	; 0x01
    2de4:	17 c0       	rjmp	.+46     	; 0x2e14 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2de6:	e0 e3       	ldi	r30, 0x30	; 48
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	80 81       	ld	r24, Z
    2dec:	28 2f       	mov	r18, r24
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	8b 81       	ldd	r24, Y+3	; 0x03
    2df2:	88 2f       	mov	r24, r24
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	a9 01       	movw	r20, r18
    2df8:	02 c0       	rjmp	.+4      	; 0x2dfe <GPIO_readPin+0x10e>
    2dfa:	55 95       	asr	r21
    2dfc:	47 95       	ror	r20
    2dfe:	8a 95       	dec	r24
    2e00:	e2 f7       	brpl	.-8      	; 0x2dfa <GPIO_readPin+0x10a>
    2e02:	ca 01       	movw	r24, r20
    2e04:	81 70       	andi	r24, 0x01	; 1
    2e06:	90 70       	andi	r25, 0x00	; 0
    2e08:	88 23       	and	r24, r24
    2e0a:	19 f0       	breq	.+6      	; 0x2e12 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	89 83       	std	Y+1, r24	; 0x01
    2e10:	01 c0       	rjmp	.+2      	; 0x2e14 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2e12:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2e14:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e16:	0f 90       	pop	r0
    2e18:	0f 90       	pop	r0
    2e1a:	0f 90       	pop	r0
    2e1c:	0f 90       	pop	r0
    2e1e:	0f 90       	pop	r0
    2e20:	cf 91       	pop	r28
    2e22:	df 91       	pop	r29
    2e24:	08 95       	ret

00002e26 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2e26:	df 93       	push	r29
    2e28:	cf 93       	push	r28
    2e2a:	00 d0       	rcall	.+0      	; 0x2e2c <GPIO_setupPortDirection+0x6>
    2e2c:	00 d0       	rcall	.+0      	; 0x2e2e <GPIO_setupPortDirection+0x8>
    2e2e:	cd b7       	in	r28, 0x3d	; 61
    2e30:	de b7       	in	r29, 0x3e	; 62
    2e32:	89 83       	std	Y+1, r24	; 0x01
    2e34:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	84 30       	cpi	r24, 0x04	; 4
    2e3a:	90 f5       	brcc	.+100    	; 0x2ea0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	28 2f       	mov	r18, r24
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	3c 83       	std	Y+4, r19	; 0x04
    2e44:	2b 83       	std	Y+3, r18	; 0x03
    2e46:	8b 81       	ldd	r24, Y+3	; 0x03
    2e48:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4a:	81 30       	cpi	r24, 0x01	; 1
    2e4c:	91 05       	cpc	r25, r1
    2e4e:	d1 f0       	breq	.+52     	; 0x2e84 <GPIO_setupPortDirection+0x5e>
    2e50:	2b 81       	ldd	r18, Y+3	; 0x03
    2e52:	3c 81       	ldd	r19, Y+4	; 0x04
    2e54:	22 30       	cpi	r18, 0x02	; 2
    2e56:	31 05       	cpc	r19, r1
    2e58:	2c f4       	brge	.+10     	; 0x2e64 <GPIO_setupPortDirection+0x3e>
    2e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5e:	00 97       	sbiw	r24, 0x00	; 0
    2e60:	61 f0       	breq	.+24     	; 0x2e7a <GPIO_setupPortDirection+0x54>
    2e62:	1e c0       	rjmp	.+60     	; 0x2ea0 <GPIO_setupPortDirection+0x7a>
    2e64:	2b 81       	ldd	r18, Y+3	; 0x03
    2e66:	3c 81       	ldd	r19, Y+4	; 0x04
    2e68:	22 30       	cpi	r18, 0x02	; 2
    2e6a:	31 05       	cpc	r19, r1
    2e6c:	81 f0       	breq	.+32     	; 0x2e8e <GPIO_setupPortDirection+0x68>
    2e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e70:	9c 81       	ldd	r25, Y+4	; 0x04
    2e72:	83 30       	cpi	r24, 0x03	; 3
    2e74:	91 05       	cpc	r25, r1
    2e76:	81 f0       	breq	.+32     	; 0x2e98 <GPIO_setupPortDirection+0x72>
    2e78:	13 c0       	rjmp	.+38     	; 0x2ea0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2e7a:	ea e3       	ldi	r30, 0x3A	; 58
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	80 83       	st	Z, r24
    2e82:	0e c0       	rjmp	.+28     	; 0x2ea0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2e84:	e7 e3       	ldi	r30, 0x37	; 55
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8a:	80 83       	st	Z, r24
    2e8c:	09 c0       	rjmp	.+18     	; 0x2ea0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2e8e:	e4 e3       	ldi	r30, 0x34	; 52
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	8a 81       	ldd	r24, Y+2	; 0x02
    2e94:	80 83       	st	Z, r24
    2e96:	04 c0       	rjmp	.+8      	; 0x2ea0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2e98:	e1 e3       	ldi	r30, 0x31	; 49
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2ea0:	0f 90       	pop	r0
    2ea2:	0f 90       	pop	r0
    2ea4:	0f 90       	pop	r0
    2ea6:	0f 90       	pop	r0
    2ea8:	cf 91       	pop	r28
    2eaa:	df 91       	pop	r29
    2eac:	08 95       	ret

00002eae <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2eae:	df 93       	push	r29
    2eb0:	cf 93       	push	r28
    2eb2:	00 d0       	rcall	.+0      	; 0x2eb4 <GPIO_writePort+0x6>
    2eb4:	00 d0       	rcall	.+0      	; 0x2eb6 <GPIO_writePort+0x8>
    2eb6:	cd b7       	in	r28, 0x3d	; 61
    2eb8:	de b7       	in	r29, 0x3e	; 62
    2eba:	89 83       	std	Y+1, r24	; 0x01
    2ebc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2ebe:	89 81       	ldd	r24, Y+1	; 0x01
    2ec0:	84 30       	cpi	r24, 0x04	; 4
    2ec2:	90 f5       	brcc	.+100    	; 0x2f28 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
    2ec6:	28 2f       	mov	r18, r24
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	3c 83       	std	Y+4, r19	; 0x04
    2ecc:	2b 83       	std	Y+3, r18	; 0x03
    2ece:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed2:	81 30       	cpi	r24, 0x01	; 1
    2ed4:	91 05       	cpc	r25, r1
    2ed6:	d1 f0       	breq	.+52     	; 0x2f0c <GPIO_writePort+0x5e>
    2ed8:	2b 81       	ldd	r18, Y+3	; 0x03
    2eda:	3c 81       	ldd	r19, Y+4	; 0x04
    2edc:	22 30       	cpi	r18, 0x02	; 2
    2ede:	31 05       	cpc	r19, r1
    2ee0:	2c f4       	brge	.+10     	; 0x2eec <GPIO_writePort+0x3e>
    2ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee6:	00 97       	sbiw	r24, 0x00	; 0
    2ee8:	61 f0       	breq	.+24     	; 0x2f02 <GPIO_writePort+0x54>
    2eea:	1e c0       	rjmp	.+60     	; 0x2f28 <GPIO_writePort+0x7a>
    2eec:	2b 81       	ldd	r18, Y+3	; 0x03
    2eee:	3c 81       	ldd	r19, Y+4	; 0x04
    2ef0:	22 30       	cpi	r18, 0x02	; 2
    2ef2:	31 05       	cpc	r19, r1
    2ef4:	81 f0       	breq	.+32     	; 0x2f16 <GPIO_writePort+0x68>
    2ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    2efa:	83 30       	cpi	r24, 0x03	; 3
    2efc:	91 05       	cpc	r25, r1
    2efe:	81 f0       	breq	.+32     	; 0x2f20 <GPIO_writePort+0x72>
    2f00:	13 c0       	rjmp	.+38     	; 0x2f28 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2f02:	eb e3       	ldi	r30, 0x3B	; 59
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	8a 81       	ldd	r24, Y+2	; 0x02
    2f08:	80 83       	st	Z, r24
    2f0a:	0e c0       	rjmp	.+28     	; 0x2f28 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2f0c:	e8 e3       	ldi	r30, 0x38	; 56
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	8a 81       	ldd	r24, Y+2	; 0x02
    2f12:	80 83       	st	Z, r24
    2f14:	09 c0       	rjmp	.+18     	; 0x2f28 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2f16:	e5 e3       	ldi	r30, 0x35	; 53
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1c:	80 83       	st	Z, r24
    2f1e:	04 c0       	rjmp	.+8      	; 0x2f28 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2f20:	e2 e3       	ldi	r30, 0x32	; 50
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	8a 81       	ldd	r24, Y+2	; 0x02
    2f26:	80 83       	st	Z, r24
			break;
		}
	}
}
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	0f 90       	pop	r0
    2f2e:	0f 90       	pop	r0
    2f30:	cf 91       	pop	r28
    2f32:	df 91       	pop	r29
    2f34:	08 95       	ret

00002f36 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2f36:	df 93       	push	r29
    2f38:	cf 93       	push	r28
    2f3a:	00 d0       	rcall	.+0      	; 0x2f3c <GPIO_readPort+0x6>
    2f3c:	00 d0       	rcall	.+0      	; 0x2f3e <GPIO_readPort+0x8>
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
    2f42:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2f44:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	84 30       	cpi	r24, 0x04	; 4
    2f4a:	90 f5       	brcc	.+100    	; 0x2fb0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4e:	28 2f       	mov	r18, r24
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	3c 83       	std	Y+4, r19	; 0x04
    2f54:	2b 83       	std	Y+3, r18	; 0x03
    2f56:	8b 81       	ldd	r24, Y+3	; 0x03
    2f58:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5a:	81 30       	cpi	r24, 0x01	; 1
    2f5c:	91 05       	cpc	r25, r1
    2f5e:	d1 f0       	breq	.+52     	; 0x2f94 <GPIO_readPort+0x5e>
    2f60:	2b 81       	ldd	r18, Y+3	; 0x03
    2f62:	3c 81       	ldd	r19, Y+4	; 0x04
    2f64:	22 30       	cpi	r18, 0x02	; 2
    2f66:	31 05       	cpc	r19, r1
    2f68:	2c f4       	brge	.+10     	; 0x2f74 <GPIO_readPort+0x3e>
    2f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6e:	00 97       	sbiw	r24, 0x00	; 0
    2f70:	61 f0       	breq	.+24     	; 0x2f8a <GPIO_readPort+0x54>
    2f72:	1e c0       	rjmp	.+60     	; 0x2fb0 <GPIO_readPort+0x7a>
    2f74:	2b 81       	ldd	r18, Y+3	; 0x03
    2f76:	3c 81       	ldd	r19, Y+4	; 0x04
    2f78:	22 30       	cpi	r18, 0x02	; 2
    2f7a:	31 05       	cpc	r19, r1
    2f7c:	81 f0       	breq	.+32     	; 0x2f9e <GPIO_readPort+0x68>
    2f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f80:	9c 81       	ldd	r25, Y+4	; 0x04
    2f82:	83 30       	cpi	r24, 0x03	; 3
    2f84:	91 05       	cpc	r25, r1
    2f86:	81 f0       	breq	.+32     	; 0x2fa8 <GPIO_readPort+0x72>
    2f88:	13 c0       	rjmp	.+38     	; 0x2fb0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2f8a:	e9 e3       	ldi	r30, 0x39	; 57
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	89 83       	std	Y+1, r24	; 0x01
    2f92:	0e c0       	rjmp	.+28     	; 0x2fb0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2f94:	e6 e3       	ldi	r30, 0x36	; 54
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	89 83       	std	Y+1, r24	; 0x01
    2f9c:	09 c0       	rjmp	.+18     	; 0x2fb0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2f9e:	e3 e3       	ldi	r30, 0x33	; 51
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	80 81       	ld	r24, Z
    2fa4:	89 83       	std	Y+1, r24	; 0x01
    2fa6:	04 c0       	rjmp	.+8      	; 0x2fb0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2fa8:	e0 e3       	ldi	r30, 0x30	; 48
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	80 81       	ld	r24, Z
    2fae:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	0f 90       	pop	r0
    2fb8:	0f 90       	pop	r0
    2fba:	cf 91       	pop	r28
    2fbc:	df 91       	pop	r29
    2fbe:	08 95       	ret

00002fc0 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2fc0:	df 93       	push	r29
    2fc2:	cf 93       	push	r28
    2fc4:	00 d0       	rcall	.+0      	; 0x2fc6 <KEYPAD_getPressedKey+0x6>
    2fc6:	0f 92       	push	r0
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2fcc:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2fce:	1b 82       	std	Y+3, r1	; 0x03
    2fd0:	43 c0       	rjmp	.+134    	; 0x3058 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	60 e0       	ldi	r22, 0x00	; 0
    2fd6:	0e 94 13 17 	call	0x2e26	; 0x2e26 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2fda:	8b 81       	ldd	r24, Y+3	; 0x03
    2fdc:	98 2f       	mov	r25, r24
    2fde:	9c 5f       	subi	r25, 0xFC	; 252
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	69 2f       	mov	r22, r25
    2fe4:	41 e0       	ldi	r20, 0x01	; 1
    2fe6:	0e 94 a2 14 	call	0x2944	; 0x2944 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2fea:	8b 81       	ldd	r24, Y+3	; 0x03
    2fec:	88 2f       	mov	r24, r24
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	9c 01       	movw	r18, r24
    2ff2:	2c 5f       	subi	r18, 0xFC	; 252
    2ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	02 c0       	rjmp	.+4      	; 0x3000 <KEYPAD_getPressedKey+0x40>
    2ffc:	88 0f       	add	r24, r24
    2ffe:	99 1f       	adc	r25, r25
    3000:	2a 95       	dec	r18
    3002:	e2 f7       	brpl	.-8      	; 0x2ffc <KEYPAD_getPressedKey+0x3c>
    3004:	80 95       	com	r24
    3006:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    3008:	80 e0       	ldi	r24, 0x00	; 0
    300a:	69 81       	ldd	r22, Y+1	; 0x01
    300c:	0e 94 57 17 	call	0x2eae	; 0x2eae <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    3010:	1a 82       	std	Y+2, r1	; 0x02
    3012:	1c c0       	rjmp	.+56     	; 0x304c <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	6a 81       	ldd	r22, Y+2	; 0x02
    3018:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <GPIO_readPin>
    301c:	88 23       	and	r24, r24
    301e:	99 f4       	brne	.+38     	; 0x3046 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    3020:	8a 81       	ldd	r24, Y+2	; 0x02
    3022:	88 2f       	mov	r24, r24
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	88 0f       	add	r24, r24
    3028:	99 1f       	adc	r25, r25
    302a:	88 0f       	add	r24, r24
    302c:	99 1f       	adc	r25, r25
    302e:	98 2f       	mov	r25, r24
    3030:	8b 81       	ldd	r24, Y+3	; 0x03
    3032:	89 0f       	add	r24, r25
    3034:	8f 5f       	subi	r24, 0xFF	; 255
    3036:	0e 94 31 18 	call	0x3062	; 0x3062 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    303a:	0f 90       	pop	r0
    303c:	0f 90       	pop	r0
    303e:	0f 90       	pop	r0
    3040:	cf 91       	pop	r28
    3042:	df 91       	pop	r29
    3044:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    3046:	8a 81       	ldd	r24, Y+2	; 0x02
    3048:	8f 5f       	subi	r24, 0xFF	; 255
    304a:	8a 83       	std	Y+2, r24	; 0x02
    304c:	8a 81       	ldd	r24, Y+2	; 0x02
    304e:	84 30       	cpi	r24, 0x04	; 4
    3050:	08 f3       	brcs	.-62     	; 0x3014 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    3052:	8b 81       	ldd	r24, Y+3	; 0x03
    3054:	8f 5f       	subi	r24, 0xFF	; 255
    3056:	8b 83       	std	Y+3, r24	; 0x03
    3058:	8b 81       	ldd	r24, Y+3	; 0x03
    305a:	84 30       	cpi	r24, 0x04	; 4
    305c:	08 f4       	brcc	.+2      	; 0x3060 <KEYPAD_getPressedKey+0xa0>
    305e:	b9 cf       	rjmp	.-142    	; 0x2fd2 <KEYPAD_getPressedKey+0x12>
    3060:	b6 cf       	rjmp	.-148    	; 0x2fce <KEYPAD_getPressedKey+0xe>

00003062 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    3062:	df 93       	push	r29
    3064:	cf 93       	push	r28
    3066:	00 d0       	rcall	.+0      	; 0x3068 <KEYPAD_4x4_adjustKeyNumber+0x6>
    3068:	00 d0       	rcall	.+0      	; 0x306a <KEYPAD_4x4_adjustKeyNumber+0x8>
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    3070:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	28 2f       	mov	r18, r24
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	3c 83       	std	Y+4, r19	; 0x04
    307a:	2b 83       	std	Y+3, r18	; 0x03
    307c:	8b 81       	ldd	r24, Y+3	; 0x03
    307e:	9c 81       	ldd	r25, Y+4	; 0x04
    3080:	88 30       	cpi	r24, 0x08	; 8
    3082:	91 05       	cpc	r25, r1
    3084:	09 f4       	brne	.+2      	; 0x3088 <KEYPAD_4x4_adjustKeyNumber+0x26>
    3086:	70 c0       	rjmp	.+224    	; 0x3168 <KEYPAD_4x4_adjustKeyNumber+0x106>
    3088:	2b 81       	ldd	r18, Y+3	; 0x03
    308a:	3c 81       	ldd	r19, Y+4	; 0x04
    308c:	29 30       	cpi	r18, 0x09	; 9
    308e:	31 05       	cpc	r19, r1
    3090:	5c f5       	brge	.+86     	; 0x30e8 <KEYPAD_4x4_adjustKeyNumber+0x86>
    3092:	8b 81       	ldd	r24, Y+3	; 0x03
    3094:	9c 81       	ldd	r25, Y+4	; 0x04
    3096:	84 30       	cpi	r24, 0x04	; 4
    3098:	91 05       	cpc	r25, r1
    309a:	09 f4       	brne	.+2      	; 0x309e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    309c:	59 c0       	rjmp	.+178    	; 0x3150 <KEYPAD_4x4_adjustKeyNumber+0xee>
    309e:	2b 81       	ldd	r18, Y+3	; 0x03
    30a0:	3c 81       	ldd	r19, Y+4	; 0x04
    30a2:	25 30       	cpi	r18, 0x05	; 5
    30a4:	31 05       	cpc	r19, r1
    30a6:	9c f4       	brge	.+38     	; 0x30ce <KEYPAD_4x4_adjustKeyNumber+0x6c>
    30a8:	8b 81       	ldd	r24, Y+3	; 0x03
    30aa:	9c 81       	ldd	r25, Y+4	; 0x04
    30ac:	82 30       	cpi	r24, 0x02	; 2
    30ae:	91 05       	cpc	r25, r1
    30b0:	09 f4       	brne	.+2      	; 0x30b4 <KEYPAD_4x4_adjustKeyNumber+0x52>
    30b2:	48 c0       	rjmp	.+144    	; 0x3144 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    30b4:	2b 81       	ldd	r18, Y+3	; 0x03
    30b6:	3c 81       	ldd	r19, Y+4	; 0x04
    30b8:	23 30       	cpi	r18, 0x03	; 3
    30ba:	31 05       	cpc	r19, r1
    30bc:	0c f0       	brlt	.+2      	; 0x30c0 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    30be:	45 c0       	rjmp	.+138    	; 0x314a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    30c0:	8b 81       	ldd	r24, Y+3	; 0x03
    30c2:	9c 81       	ldd	r25, Y+4	; 0x04
    30c4:	81 30       	cpi	r24, 0x01	; 1
    30c6:	91 05       	cpc	r25, r1
    30c8:	09 f4       	brne	.+2      	; 0x30cc <KEYPAD_4x4_adjustKeyNumber+0x6a>
    30ca:	39 c0       	rjmp	.+114    	; 0x313e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    30cc:	67 c0       	rjmp	.+206    	; 0x319c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    30ce:	2b 81       	ldd	r18, Y+3	; 0x03
    30d0:	3c 81       	ldd	r19, Y+4	; 0x04
    30d2:	26 30       	cpi	r18, 0x06	; 6
    30d4:	31 05       	cpc	r19, r1
    30d6:	09 f4       	brne	.+2      	; 0x30da <KEYPAD_4x4_adjustKeyNumber+0x78>
    30d8:	41 c0       	rjmp	.+130    	; 0x315c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    30da:	8b 81       	ldd	r24, Y+3	; 0x03
    30dc:	9c 81       	ldd	r25, Y+4	; 0x04
    30de:	87 30       	cpi	r24, 0x07	; 7
    30e0:	91 05       	cpc	r25, r1
    30e2:	0c f0       	brlt	.+2      	; 0x30e6 <KEYPAD_4x4_adjustKeyNumber+0x84>
    30e4:	3e c0       	rjmp	.+124    	; 0x3162 <KEYPAD_4x4_adjustKeyNumber+0x100>
    30e6:	37 c0       	rjmp	.+110    	; 0x3156 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    30e8:	2b 81       	ldd	r18, Y+3	; 0x03
    30ea:	3c 81       	ldd	r19, Y+4	; 0x04
    30ec:	2c 30       	cpi	r18, 0x0C	; 12
    30ee:	31 05       	cpc	r19, r1
    30f0:	09 f4       	brne	.+2      	; 0x30f4 <KEYPAD_4x4_adjustKeyNumber+0x92>
    30f2:	46 c0       	rjmp	.+140    	; 0x3180 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    30f4:	8b 81       	ldd	r24, Y+3	; 0x03
    30f6:	9c 81       	ldd	r25, Y+4	; 0x04
    30f8:	8d 30       	cpi	r24, 0x0D	; 13
    30fa:	91 05       	cpc	r25, r1
    30fc:	5c f4       	brge	.+22     	; 0x3114 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    30fe:	2b 81       	ldd	r18, Y+3	; 0x03
    3100:	3c 81       	ldd	r19, Y+4	; 0x04
    3102:	2a 30       	cpi	r18, 0x0A	; 10
    3104:	31 05       	cpc	r19, r1
    3106:	b1 f1       	breq	.+108    	; 0x3174 <KEYPAD_4x4_adjustKeyNumber+0x112>
    3108:	8b 81       	ldd	r24, Y+3	; 0x03
    310a:	9c 81       	ldd	r25, Y+4	; 0x04
    310c:	8b 30       	cpi	r24, 0x0B	; 11
    310e:	91 05       	cpc	r25, r1
    3110:	a4 f5       	brge	.+104    	; 0x317a <KEYPAD_4x4_adjustKeyNumber+0x118>
    3112:	2d c0       	rjmp	.+90     	; 0x316e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    3114:	2b 81       	ldd	r18, Y+3	; 0x03
    3116:	3c 81       	ldd	r19, Y+4	; 0x04
    3118:	2e 30       	cpi	r18, 0x0E	; 14
    311a:	31 05       	cpc	r19, r1
    311c:	b9 f1       	breq	.+110    	; 0x318c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    311e:	8b 81       	ldd	r24, Y+3	; 0x03
    3120:	9c 81       	ldd	r25, Y+4	; 0x04
    3122:	8e 30       	cpi	r24, 0x0E	; 14
    3124:	91 05       	cpc	r25, r1
    3126:	7c f1       	brlt	.+94     	; 0x3186 <KEYPAD_4x4_adjustKeyNumber+0x124>
    3128:	2b 81       	ldd	r18, Y+3	; 0x03
    312a:	3c 81       	ldd	r19, Y+4	; 0x04
    312c:	2f 30       	cpi	r18, 0x0F	; 15
    312e:	31 05       	cpc	r19, r1
    3130:	79 f1       	breq	.+94     	; 0x3190 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    3132:	8b 81       	ldd	r24, Y+3	; 0x03
    3134:	9c 81       	ldd	r25, Y+4	; 0x04
    3136:	80 31       	cpi	r24, 0x10	; 16
    3138:	91 05       	cpc	r25, r1
    313a:	69 f1       	breq	.+90     	; 0x3196 <KEYPAD_4x4_adjustKeyNumber+0x134>
    313c:	2f c0       	rjmp	.+94     	; 0x319c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    313e:	87 e0       	ldi	r24, 0x07	; 7
    3140:	89 83       	std	Y+1, r24	; 0x01
    3142:	2e c0       	rjmp	.+92     	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    3144:	88 e0       	ldi	r24, 0x08	; 8
    3146:	89 83       	std	Y+1, r24	; 0x01
    3148:	2b c0       	rjmp	.+86     	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    314a:	89 e0       	ldi	r24, 0x09	; 9
    314c:	89 83       	std	Y+1, r24	; 0x01
    314e:	28 c0       	rjmp	.+80     	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    3150:	85 e2       	ldi	r24, 0x25	; 37
    3152:	89 83       	std	Y+1, r24	; 0x01
    3154:	25 c0       	rjmp	.+74     	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    3156:	84 e0       	ldi	r24, 0x04	; 4
    3158:	89 83       	std	Y+1, r24	; 0x01
    315a:	22 c0       	rjmp	.+68     	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    315c:	85 e0       	ldi	r24, 0x05	; 5
    315e:	89 83       	std	Y+1, r24	; 0x01
    3160:	1f c0       	rjmp	.+62     	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    3162:	86 e0       	ldi	r24, 0x06	; 6
    3164:	89 83       	std	Y+1, r24	; 0x01
    3166:	1c c0       	rjmp	.+56     	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    3168:	8a e2       	ldi	r24, 0x2A	; 42
    316a:	89 83       	std	Y+1, r24	; 0x01
    316c:	19 c0       	rjmp	.+50     	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	89 83       	std	Y+1, r24	; 0x01
    3172:	16 c0       	rjmp	.+44     	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    3174:	82 e0       	ldi	r24, 0x02	; 2
    3176:	89 83       	std	Y+1, r24	; 0x01
    3178:	13 c0       	rjmp	.+38     	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    317a:	83 e0       	ldi	r24, 0x03	; 3
    317c:	89 83       	std	Y+1, r24	; 0x01
    317e:	10 c0       	rjmp	.+32     	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    3180:	8d e2       	ldi	r24, 0x2D	; 45
    3182:	89 83       	std	Y+1, r24	; 0x01
    3184:	0d c0       	rjmp	.+26     	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    3186:	8d e0       	ldi	r24, 0x0D	; 13
    3188:	89 83       	std	Y+1, r24	; 0x01
    318a:	0a c0       	rjmp	.+20     	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    318c:	19 82       	std	Y+1, r1	; 0x01
    318e:	08 c0       	rjmp	.+16     	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    3190:	8d e3       	ldi	r24, 0x3D	; 61
    3192:	89 83       	std	Y+1, r24	; 0x01
    3194:	05 c0       	rjmp	.+10     	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    3196:	8b e2       	ldi	r24, 0x2B	; 43
    3198:	89 83       	std	Y+1, r24	; 0x01
    319a:	02 c0       	rjmp	.+4      	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    319c:	8a 81       	ldd	r24, Y+2	; 0x02
    319e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    31a0:	89 81       	ldd	r24, Y+1	; 0x01
} 
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	cf 91       	pop	r28
    31ac:	df 91       	pop	r29
    31ae:	08 95       	ret

000031b0 <__udivmodsi4>:
    31b0:	a1 e2       	ldi	r26, 0x21	; 33
    31b2:	1a 2e       	mov	r1, r26
    31b4:	aa 1b       	sub	r26, r26
    31b6:	bb 1b       	sub	r27, r27
    31b8:	fd 01       	movw	r30, r26
    31ba:	0d c0       	rjmp	.+26     	; 0x31d6 <__udivmodsi4_ep>

000031bc <__udivmodsi4_loop>:
    31bc:	aa 1f       	adc	r26, r26
    31be:	bb 1f       	adc	r27, r27
    31c0:	ee 1f       	adc	r30, r30
    31c2:	ff 1f       	adc	r31, r31
    31c4:	a2 17       	cp	r26, r18
    31c6:	b3 07       	cpc	r27, r19
    31c8:	e4 07       	cpc	r30, r20
    31ca:	f5 07       	cpc	r31, r21
    31cc:	20 f0       	brcs	.+8      	; 0x31d6 <__udivmodsi4_ep>
    31ce:	a2 1b       	sub	r26, r18
    31d0:	b3 0b       	sbc	r27, r19
    31d2:	e4 0b       	sbc	r30, r20
    31d4:	f5 0b       	sbc	r31, r21

000031d6 <__udivmodsi4_ep>:
    31d6:	66 1f       	adc	r22, r22
    31d8:	77 1f       	adc	r23, r23
    31da:	88 1f       	adc	r24, r24
    31dc:	99 1f       	adc	r25, r25
    31de:	1a 94       	dec	r1
    31e0:	69 f7       	brne	.-38     	; 0x31bc <__udivmodsi4_loop>
    31e2:	60 95       	com	r22
    31e4:	70 95       	com	r23
    31e6:	80 95       	com	r24
    31e8:	90 95       	com	r25
    31ea:	9b 01       	movw	r18, r22
    31ec:	ac 01       	movw	r20, r24
    31ee:	bd 01       	movw	r22, r26
    31f0:	cf 01       	movw	r24, r30
    31f2:	08 95       	ret

000031f4 <__prologue_saves__>:
    31f4:	2f 92       	push	r2
    31f6:	3f 92       	push	r3
    31f8:	4f 92       	push	r4
    31fa:	5f 92       	push	r5
    31fc:	6f 92       	push	r6
    31fe:	7f 92       	push	r7
    3200:	8f 92       	push	r8
    3202:	9f 92       	push	r9
    3204:	af 92       	push	r10
    3206:	bf 92       	push	r11
    3208:	cf 92       	push	r12
    320a:	df 92       	push	r13
    320c:	ef 92       	push	r14
    320e:	ff 92       	push	r15
    3210:	0f 93       	push	r16
    3212:	1f 93       	push	r17
    3214:	cf 93       	push	r28
    3216:	df 93       	push	r29
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
    321c:	ca 1b       	sub	r28, r26
    321e:	db 0b       	sbc	r29, r27
    3220:	0f b6       	in	r0, 0x3f	; 63
    3222:	f8 94       	cli
    3224:	de bf       	out	0x3e, r29	; 62
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	cd bf       	out	0x3d, r28	; 61
    322a:	09 94       	ijmp

0000322c <__epilogue_restores__>:
    322c:	2a 88       	ldd	r2, Y+18	; 0x12
    322e:	39 88       	ldd	r3, Y+17	; 0x11
    3230:	48 88       	ldd	r4, Y+16	; 0x10
    3232:	5f 84       	ldd	r5, Y+15	; 0x0f
    3234:	6e 84       	ldd	r6, Y+14	; 0x0e
    3236:	7d 84       	ldd	r7, Y+13	; 0x0d
    3238:	8c 84       	ldd	r8, Y+12	; 0x0c
    323a:	9b 84       	ldd	r9, Y+11	; 0x0b
    323c:	aa 84       	ldd	r10, Y+10	; 0x0a
    323e:	b9 84       	ldd	r11, Y+9	; 0x09
    3240:	c8 84       	ldd	r12, Y+8	; 0x08
    3242:	df 80       	ldd	r13, Y+7	; 0x07
    3244:	ee 80       	ldd	r14, Y+6	; 0x06
    3246:	fd 80       	ldd	r15, Y+5	; 0x05
    3248:	0c 81       	ldd	r16, Y+4	; 0x04
    324a:	1b 81       	ldd	r17, Y+3	; 0x03
    324c:	aa 81       	ldd	r26, Y+2	; 0x02
    324e:	b9 81       	ldd	r27, Y+1	; 0x01
    3250:	ce 0f       	add	r28, r30
    3252:	d1 1d       	adc	r29, r1
    3254:	0f b6       	in	r0, 0x3f	; 63
    3256:	f8 94       	cli
    3258:	de bf       	out	0x3e, r29	; 62
    325a:	0f be       	out	0x3f, r0	; 63
    325c:	cd bf       	out	0x3d, r28	; 61
    325e:	ed 01       	movw	r28, r26
    3260:	08 95       	ret

00003262 <itoa>:
    3262:	fb 01       	movw	r30, r22
    3264:	9f 01       	movw	r18, r30
    3266:	e8 94       	clt
    3268:	42 30       	cpi	r20, 0x02	; 2
    326a:	c4 f0       	brlt	.+48     	; 0x329c <itoa+0x3a>
    326c:	45 32       	cpi	r20, 0x25	; 37
    326e:	b4 f4       	brge	.+44     	; 0x329c <itoa+0x3a>
    3270:	4a 30       	cpi	r20, 0x0A	; 10
    3272:	29 f4       	brne	.+10     	; 0x327e <itoa+0x1c>
    3274:	97 fb       	bst	r25, 7
    3276:	1e f4       	brtc	.+6      	; 0x327e <itoa+0x1c>
    3278:	90 95       	com	r25
    327a:	81 95       	neg	r24
    327c:	9f 4f       	sbci	r25, 0xFF	; 255
    327e:	64 2f       	mov	r22, r20
    3280:	77 27       	eor	r23, r23
    3282:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__udivmodhi4>
    3286:	80 5d       	subi	r24, 0xD0	; 208
    3288:	8a 33       	cpi	r24, 0x3A	; 58
    328a:	0c f0       	brlt	.+2      	; 0x328e <itoa+0x2c>
    328c:	89 5d       	subi	r24, 0xD9	; 217
    328e:	81 93       	st	Z+, r24
    3290:	cb 01       	movw	r24, r22
    3292:	00 97       	sbiw	r24, 0x00	; 0
    3294:	a1 f7       	brne	.-24     	; 0x327e <itoa+0x1c>
    3296:	16 f4       	brtc	.+4      	; 0x329c <itoa+0x3a>
    3298:	5d e2       	ldi	r21, 0x2D	; 45
    329a:	51 93       	st	Z+, r21
    329c:	10 82       	st	Z, r1
    329e:	c9 01       	movw	r24, r18
    32a0:	0c 94 52 19 	jmp	0x32a4	; 0x32a4 <strrev>

000032a4 <strrev>:
    32a4:	dc 01       	movw	r26, r24
    32a6:	fc 01       	movw	r30, r24
    32a8:	67 2f       	mov	r22, r23
    32aa:	71 91       	ld	r23, Z+
    32ac:	77 23       	and	r23, r23
    32ae:	e1 f7       	brne	.-8      	; 0x32a8 <strrev+0x4>
    32b0:	32 97       	sbiw	r30, 0x02	; 2
    32b2:	04 c0       	rjmp	.+8      	; 0x32bc <strrev+0x18>
    32b4:	7c 91       	ld	r23, X
    32b6:	6d 93       	st	X+, r22
    32b8:	70 83       	st	Z, r23
    32ba:	62 91       	ld	r22, -Z
    32bc:	ae 17       	cp	r26, r30
    32be:	bf 07       	cpc	r27, r31
    32c0:	c8 f3       	brcs	.-14     	; 0x32b4 <strrev+0x10>
    32c2:	08 95       	ret

000032c4 <__udivmodhi4>:
    32c4:	aa 1b       	sub	r26, r26
    32c6:	bb 1b       	sub	r27, r27
    32c8:	51 e1       	ldi	r21, 0x11	; 17
    32ca:	07 c0       	rjmp	.+14     	; 0x32da <__udivmodhi4_ep>

000032cc <__udivmodhi4_loop>:
    32cc:	aa 1f       	adc	r26, r26
    32ce:	bb 1f       	adc	r27, r27
    32d0:	a6 17       	cp	r26, r22
    32d2:	b7 07       	cpc	r27, r23
    32d4:	10 f0       	brcs	.+4      	; 0x32da <__udivmodhi4_ep>
    32d6:	a6 1b       	sub	r26, r22
    32d8:	b7 0b       	sbc	r27, r23

000032da <__udivmodhi4_ep>:
    32da:	88 1f       	adc	r24, r24
    32dc:	99 1f       	adc	r25, r25
    32de:	5a 95       	dec	r21
    32e0:	a9 f7       	brne	.-22     	; 0x32cc <__udivmodhi4_loop>
    32e2:	80 95       	com	r24
    32e4:	90 95       	com	r25
    32e6:	bc 01       	movw	r22, r24
    32e8:	cd 01       	movw	r24, r26
    32ea:	08 95       	ret

000032ec <_exit>:
    32ec:	f8 94       	cli

000032ee <__stop_program>:
    32ee:	ff cf       	rjmp	.-2      	; 0x32ee <__stop_program>
