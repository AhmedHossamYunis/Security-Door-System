
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000257a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000257a  0000260e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080007e  0080007e  0000262c  2**0
                  ALLOC
  3 .stab         00002a00  00000000  00000000  0000262c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015b6  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000065e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006722  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006892  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000084db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000093c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a174  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a2d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a561  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ad2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__vector_3>
      10:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <__vector_6>
      1c:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <__vector_7>
      20:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__vector_8>
      24:	0c 94 5d 0a 	jmp	0x14ba	; 0x14ba <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 90 0a 	jmp	0x1520	; 0x1520 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3e 06 	call	0xc7c	; 0xc7c <main>
      8a:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 97 12 	jmp	0x252e	; 0x252e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 87 12 	jmp	0x250e	; 0x250e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 87 12 	jmp	0x250e	; 0x250e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 97 12 	jmp	0x252e	; 0x252e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 87 12 	jmp	0x250e	; 0x250e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 87 12 	jmp	0x250e	; 0x250e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 87 12 	jmp	0x250e	; 0x250e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUZZER_init>:

/*Description:
 *    Function to initialize the Buzzer by set the connected pin as output
 * */
void BUZZER_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_setupPinDirection>
	return;
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <BUZZER_start>:

/*Description:
 *    Function to start the Buzzer
 * */
void BUZZER_start(void)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	2e 97       	sbiw	r28, 0x0e	; 14
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	62 e0       	ldi	r22, 0x02	; 2
     b76:	41 e0       	ldi	r20, 0x01	; 1
     b78:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_writePin>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	a0 e2       	ldi	r26, 0x20	; 32
     b82:	b1 e4       	ldi	r27, 0x41	; 65
     b84:	8b 87       	std	Y+11, r24	; 0x0b
     b86:	9c 87       	std	Y+12, r25	; 0x0c
     b88:	ad 87       	std	Y+13, r26	; 0x0d
     b8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b90:	8d 85       	ldd	r24, Y+13	; 0x0d
     b92:	9e 85       	ldd	r25, Y+14	; 0x0e
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	4a ef       	ldi	r20, 0xFA	; 250
     b9a:	54 e4       	ldi	r21, 0x44	; 68
     b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba0:	dc 01       	movw	r26, r24
     ba2:	cb 01       	movw	r24, r22
     ba4:	8f 83       	std	Y+7, r24	; 0x07
     ba6:	98 87       	std	Y+8, r25	; 0x08
     ba8:	a9 87       	std	Y+9, r26	; 0x09
     baa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bac:	6f 81       	ldd	r22, Y+7	; 0x07
     bae:	78 85       	ldd	r23, Y+8	; 0x08
     bb0:	89 85       	ldd	r24, Y+9	; 0x09
     bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	40 e8       	ldi	r20, 0x80	; 128
     bba:	5f e3       	ldi	r21, 0x3F	; 63
     bbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc0:	88 23       	and	r24, r24
     bc2:	2c f4       	brge	.+10     	; 0xbce <BUZZER_start+0x70>
		__ticks = 1;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	9e 83       	std	Y+6, r25	; 0x06
     bca:	8d 83       	std	Y+5, r24	; 0x05
     bcc:	3f c0       	rjmp	.+126    	; 0xc4c <BUZZER_start+0xee>
	else if (__tmp > 65535)
     bce:	6f 81       	ldd	r22, Y+7	; 0x07
     bd0:	78 85       	ldd	r23, Y+8	; 0x08
     bd2:	89 85       	ldd	r24, Y+9	; 0x09
     bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	3f ef       	ldi	r19, 0xFF	; 255
     bda:	4f e7       	ldi	r20, 0x7F	; 127
     bdc:	57 e4       	ldi	r21, 0x47	; 71
     bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be2:	18 16       	cp	r1, r24
     be4:	4c f5       	brge	.+82     	; 0xc38 <BUZZER_start+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be6:	6b 85       	ldd	r22, Y+11	; 0x0b
     be8:	7c 85       	ldd	r23, Y+12	; 0x0c
     bea:	8d 85       	ldd	r24, Y+13	; 0x0d
     bec:	9e 85       	ldd	r25, Y+14	; 0x0e
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e2       	ldi	r20, 0x20	; 32
     bf4:	51 e4       	ldi	r21, 0x41	; 65
     bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	bc 01       	movw	r22, r24
     c00:	cd 01       	movw	r24, r26
     c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c06:	dc 01       	movw	r26, r24
     c08:	cb 01       	movw	r24, r22
     c0a:	9e 83       	std	Y+6, r25	; 0x06
     c0c:	8d 83       	std	Y+5, r24	; 0x05
     c0e:	0f c0       	rjmp	.+30     	; 0xc2e <BUZZER_start+0xd0>
     c10:	88 ec       	ldi	r24, 0xC8	; 200
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	9c 83       	std	Y+4, r25	; 0x04
     c16:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	9c 81       	ldd	r25, Y+4	; 0x04
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	f1 f7       	brne	.-4      	; 0xc1c <BUZZER_start+0xbe>
     c20:	9c 83       	std	Y+4, r25	; 0x04
     c22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c24:	8d 81       	ldd	r24, Y+5	; 0x05
     c26:	9e 81       	ldd	r25, Y+6	; 0x06
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	9e 83       	std	Y+6, r25	; 0x06
     c2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2e:	8d 81       	ldd	r24, Y+5	; 0x05
     c30:	9e 81       	ldd	r25, Y+6	; 0x06
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	69 f7       	brne	.-38     	; 0xc10 <BUZZER_start+0xb2>
     c36:	14 c0       	rjmp	.+40     	; 0xc60 <BUZZER_start+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c38:	6f 81       	ldd	r22, Y+7	; 0x07
     c3a:	78 85       	ldd	r23, Y+8	; 0x08
     c3c:	89 85       	ldd	r24, Y+9	; 0x09
     c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	9e 83       	std	Y+6, r25	; 0x06
     c4a:	8d 83       	std	Y+5, r24	; 0x05
     c4c:	8d 81       	ldd	r24, Y+5	; 0x05
     c4e:	9e 81       	ldd	r25, Y+6	; 0x06
     c50:	9a 83       	std	Y+2, r25	; 0x02
     c52:	89 83       	std	Y+1, r24	; 0x01
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	9a 81       	ldd	r25, Y+2	; 0x02
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <BUZZER_start+0xfa>
     c5c:	9a 83       	std	Y+2, r25	; 0x02
     c5e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	62 e0       	ldi	r22, 0x02	; 2
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_writePin>
	return;
}
     c6a:	2e 96       	adiw	r28, 0x0e	; 14
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret

00000c7c <main>:
/*******************************************************************************
 *                               CONTROL ECU MAIN                              *
 *******************************************************************************/

int main()
{
     c7c:	df 93       	push	r29
     c7e:	cf 93       	push	r28
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	a9 97       	sbiw	r28, 0x29	; 41
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
	 * 1- Bit rate = 9600.
	 * 2- Parity is disabled.
	 * 3- No of stop bits = 1.
	 * 4- No of data bit = 8 bits.
	 * */
	USART_configType config_UART = {9600, DISABLED, ONE_BIT, EIGHT_BITS};
     c90:	ce 01       	movw	r24, r28
     c92:	04 96       	adiw	r24, 0x04	; 4
     c94:	9c 8f       	std	Y+28, r25	; 0x1c
     c96:	8b 8f       	std	Y+27, r24	; 0x1b
     c98:	e6 e7       	ldi	r30, 0x76	; 118
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	fe 8f       	std	Y+30, r31	; 0x1e
     c9e:	ed 8f       	std	Y+29, r30	; 0x1d
     ca0:	f7 e0       	ldi	r31, 0x07	; 7
     ca2:	ff 8f       	std	Y+31, r31	; 0x1f
     ca4:	ed 8d       	ldd	r30, Y+29	; 0x1d
     ca6:	fe 8d       	ldd	r31, Y+30	; 0x1e
     ca8:	00 80       	ld	r0, Z
     caa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cac:	9e 8d       	ldd	r25, Y+30	; 0x1e
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	9e 8f       	std	Y+30, r25	; 0x1e
     cb2:	8d 8f       	std	Y+29, r24	; 0x1d
     cb4:	eb 8d       	ldd	r30, Y+27	; 0x1b
     cb6:	fc 8d       	ldd	r31, Y+28	; 0x1c
     cb8:	00 82       	st	Z, r0
     cba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cbe:	01 96       	adiw	r24, 0x01	; 1
     cc0:	9c 8f       	std	Y+28, r25	; 0x1c
     cc2:	8b 8f       	std	Y+27, r24	; 0x1b
     cc4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     cc6:	91 50       	subi	r25, 0x01	; 1
     cc8:	9f 8f       	std	Y+31, r25	; 0x1f
     cca:	ef 8d       	ldd	r30, Y+31	; 0x1f
     ccc:	ee 23       	and	r30, r30
     cce:	51 f7       	brne	.-44     	; 0xca4 <main+0x28>
	 * 3- Prescaler = F_CPU/1024
	 * 4- Normal port operation OC0 is disconnected
	 * 5- insert the initial value = 0.
	 * 6- Insert the channel in case of TIMER 1.
	 * */
	TIMER_ConfigType config_Timer_Motor = {255,NORMAL_MODE, F_CPU_1024, NORMAL_MATCH, 0,'A'};
     cd0:	ce 01       	movw	r24, r28
     cd2:	0b 96       	adiw	r24, 0x0b	; 11
     cd4:	99 a3       	std	Y+33, r25	; 0x21
     cd6:	88 a3       	std	Y+32, r24	; 0x20
     cd8:	ef e6       	ldi	r30, 0x6F	; 111
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	fb a3       	std	Y+35, r31	; 0x23
     cde:	ea a3       	std	Y+34, r30	; 0x22
     ce0:	f7 e0       	ldi	r31, 0x07	; 7
     ce2:	fc a3       	std	Y+36, r31	; 0x24
     ce4:	ea a1       	ldd	r30, Y+34	; 0x22
     ce6:	fb a1       	ldd	r31, Y+35	; 0x23
     ce8:	00 80       	ld	r0, Z
     cea:	8a a1       	ldd	r24, Y+34	; 0x22
     cec:	9b a1       	ldd	r25, Y+35	; 0x23
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	9b a3       	std	Y+35, r25	; 0x23
     cf2:	8a a3       	std	Y+34, r24	; 0x22
     cf4:	e8 a1       	ldd	r30, Y+32	; 0x20
     cf6:	f9 a1       	ldd	r31, Y+33	; 0x21
     cf8:	00 82       	st	Z, r0
     cfa:	88 a1       	ldd	r24, Y+32	; 0x20
     cfc:	99 a1       	ldd	r25, Y+33	; 0x21
     cfe:	01 96       	adiw	r24, 0x01	; 1
     d00:	99 a3       	std	Y+33, r25	; 0x21
     d02:	88 a3       	std	Y+32, r24	; 0x20
     d04:	9c a1       	ldd	r25, Y+36	; 0x24
     d06:	91 50       	subi	r25, 0x01	; 1
     d08:	9c a3       	std	Y+36, r25	; 0x24
     d0a:	ec a1       	ldd	r30, Y+36	; 0x24
     d0c:	ee 23       	and	r30, r30
     d0e:	51 f7       	brne	.-44     	; 0xce4 <main+0x68>
	 * 3- Prescaler = F_CPU/1024
	 * 4- Normal port operation OC0 is disconnected
	 * 5- insert the initial value = 0.
	 * 6- Insert the channel in case of TIMER 1.
	 * */
	TIMER_ConfigType config_Timer_Buzzer = {255,COMPARE, F_CPU_1024, NORMAL_MATCH, 0,'A'};
     d10:	ce 01       	movw	r24, r28
     d12:	42 96       	adiw	r24, 0x12	; 18
     d14:	9e a3       	std	Y+38, r25	; 0x26
     d16:	8d a3       	std	Y+37, r24	; 0x25
     d18:	e8 e6       	ldi	r30, 0x68	; 104
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	f8 a7       	std	Y+40, r31	; 0x28
     d1e:	ef a3       	std	Y+39, r30	; 0x27
     d20:	f7 e0       	ldi	r31, 0x07	; 7
     d22:	f9 a7       	std	Y+41, r31	; 0x29
     d24:	ef a1       	ldd	r30, Y+39	; 0x27
     d26:	f8 a5       	ldd	r31, Y+40	; 0x28
     d28:	00 80       	ld	r0, Z
     d2a:	8f a1       	ldd	r24, Y+39	; 0x27
     d2c:	98 a5       	ldd	r25, Y+40	; 0x28
     d2e:	01 96       	adiw	r24, 0x01	; 1
     d30:	98 a7       	std	Y+40, r25	; 0x28
     d32:	8f a3       	std	Y+39, r24	; 0x27
     d34:	ed a1       	ldd	r30, Y+37	; 0x25
     d36:	fe a1       	ldd	r31, Y+38	; 0x26
     d38:	00 82       	st	Z, r0
     d3a:	8d a1       	ldd	r24, Y+37	; 0x25
     d3c:	9e a1       	ldd	r25, Y+38	; 0x26
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	9e a3       	std	Y+38, r25	; 0x26
     d42:	8d a3       	std	Y+37, r24	; 0x25
     d44:	99 a5       	ldd	r25, Y+41	; 0x29
     d46:	91 50       	subi	r25, 0x01	; 1
     d48:	99 a7       	std	Y+41, r25	; 0x29
     d4a:	e9 a5       	ldd	r30, Y+41	; 0x29
     d4c:	ee 23       	and	r30, r30
     d4e:	51 f7       	brne	.-44     	; 0xd24 <main+0xa8>
	/* Configuration of EEPROM:
	 * 1- Insert the address of the slave device.
	 * Insert the bit rate
	 * */
	TWI_ConfingType configeeprom = {0x01,0x02}; /*Enter the address then bit rate*/
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	89 8f       	std	Y+25, r24	; 0x19
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	8a 8f       	std	Y+26, r24	; 0x1a

	uint8 state = INITIAL;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	8b 83       	std	Y+3, r24	; 0x03
	uint8 check = WRONG;
     d5c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 errorPass = 0;
     d5e:	19 82       	std	Y+1, r1	; 0x01

	TWI_init(&configeeprom);
     d60:	ce 01       	movw	r24, r28
     d62:	49 96       	adiw	r24, 0x19	; 25
     d64:	0e 94 88 09 	call	0x1310	; 0x1310 <TWI_init>

	USART_init(&config_UART);
     d68:	ce 01       	movw	r24, r28
     d6a:	04 96       	adiw	r24, 0x04	; 4
     d6c:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <USART_init>

	BUZZER_init();
     d70:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUZZER_init>

	DcMotor_Init();
     d74:	0e 94 0f 0a 	call	0x141e	; 0x141e <DcMotor_Init>

	/*Enable general interrupt*/
	sei();
     d78:	78 94       	sei
     d7a:	03 c0       	rjmp	.+6      	; 0xd82 <main+0x106>
		/*In case of the system works in the first time or the user wants
		 * to change the password*/
		while((state == INITIAL) && (check == WRONG))
		{

			check = CONTROL_receivePass();
     d7c:	0e 94 8c 07 	call	0xf18	; 0xf18 <CONTROL_receivePass>
     d80:	8a 83       	std	Y+2, r24	; 0x02

	while(1)
	{
		/*In case of the system works in the first time or the user wants
		 * to change the password*/
		while((state == INITIAL) && (check == WRONG))
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	19 f4       	brne	.+6      	; 0xd8e <main+0x112>
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	88 23       	and	r24, r24
     d8c:	b9 f3       	breq	.-18     	; 0xd7c <main+0x100>
		}

		/*When HMI_ECU sends Ready, CONTROL_ECU will start to receive open the door or change password
		 * In case of the password is wrong for 3 times --> Alarm will turn on for 1 minute
		 * */
		while(USART_receiveByte() != READY);
     d8e:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <USART_receiveByte>
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	e1 f7       	brne	.-8      	; 0xd8e <main+0x112>
		state = USART_receiveByte();
     d96:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <USART_receiveByte>
     d9a:	8b 83       	std	Y+3, r24	; 0x03

		if(state == OPEN_DOOR)
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	09 f0       	breq	.+2      	; 0xda4 <main+0x128>
     da2:	42 c0       	rjmp	.+132    	; 0xe28 <main+0x1ac>
		{
			check = CONTROL_matchPassword();
     da4:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CONTROL_matchPassword>
     da8:	8a 83       	std	Y+2, r24	; 0x02
			if(check == MATCH)
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	88 30       	cpi	r24, 0x08	; 8
     dae:	f9 f4       	brne	.+62     	; 0xdee <main+0x172>
			{
				TIMER_SetCallBack(CONTROL_motorProcessing);
     db0:	88 e5       	ldi	r24, 0x58	; 88
     db2:	98 e0       	ldi	r25, 0x08	; 8
     db4:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <TIMER_SetCallBack>
				errorPass = 0;
     db8:	19 82       	std	Y+1, r1	; 0x01
				TIMER_init(TIMER_0,&config_Timer_Motor);
     dba:	9e 01       	movw	r18, r28
     dbc:	25 5f       	subi	r18, 0xF5	; 245
     dbe:	3f 4f       	sbci	r19, 0xFF	; 255
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	b9 01       	movw	r22, r18
     dc4:	0e 94 c2 0b 	call	0x1784	; 0x1784 <TIMER_init>

				CONTROL_motorOpen();
     dc8:	0e 94 2e 08 	call	0x105c	; 0x105c <CONTROL_motorOpen>

				close_flag = 0;
     dcc:	10 92 81 00 	sts	0x0081, r1
				CONTROL_motorClose();
     dd0:	0e 94 3c 08 	call	0x1078	; 0x1078 <CONTROL_motorClose>

				stop_flag = 0;
     dd4:	10 92 82 00 	sts	0x0082, r1
				CONTROL_motorStop();
     dd8:	0e 94 4a 08 	call	0x1094	; 0x1094 <CONTROL_motorStop>

				open_flag = 0;
     ddc:	10 92 80 00 	sts	0x0080, r1
				close_flag = 0;
     de0:	10 92 81 00 	sts	0x0081, r1
				stop_flag = 0;
     de4:	10 92 82 00 	sts	0x0082, r1

				TIMER_Deinit(TIMER_0);
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <TIMER_Deinit>
			}
			if (check == NOT_MATCH)
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	89 30       	cpi	r24, 0x09	; 9
     df2:	39 f6       	brne	.-114    	; 0xd82 <main+0x106>
			{
				errorPass++;
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	8f 5f       	subi	r24, 0xFF	; 255
     df8:	89 83       	std	Y+1, r24	; 0x01
				TIMER_SetCallBack(CONTROL_buzzerProcessing);
     dfa:	8f eb       	ldi	r24, 0xBF	; 191
     dfc:	98 e0       	ldi	r25, 0x08	; 8
     dfe:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <TIMER_SetCallBack>
				if(errorPass >= 3)
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	83 30       	cpi	r24, 0x03	; 3
     e06:	08 f4       	brcc	.+2      	; 0xe0a <main+0x18e>
     e08:	bc cf       	rjmp	.-136    	; 0xd82 <main+0x106>
				{
					TIMER_init(TIMER_0,&config_Timer_Buzzer);
     e0a:	9e 01       	movw	r18, r28
     e0c:	2e 5e       	subi	r18, 0xEE	; 238
     e0e:	3f 4f       	sbci	r19, 0xFF	; 255
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	b9 01       	movw	r22, r18
     e14:	0e 94 c2 0b 	call	0x1784	; 0x1784 <TIMER_init>
					CONTROL_Buzzer();
     e18:	0e 94 8f 08 	call	0x111e	; 0x111e <CONTROL_Buzzer>
					TIMER_Deinit(TIMER_0);
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <TIMER_Deinit>
					stop_buzzer = 0;
     e22:	10 92 83 00 	sts	0x0083, r1
     e26:	ad cf       	rjmp	.-166    	; 0xd82 <main+0x106>
				}
			}
		}
		else if (state == CHANGE_PASS)
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	85 30       	cpi	r24, 0x05	; 5
     e2c:	41 f5       	brne	.+80     	; 0xe7e <main+0x202>
		{
			check = CONTROL_matchPassword();
     e2e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CONTROL_matchPassword>
     e32:	8a 83       	std	Y+2, r24	; 0x02
			if(check == MATCH)
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	88 30       	cpi	r24, 0x08	; 8
     e38:	21 f4       	brne	.+8      	; 0xe42 <main+0x1c6>
			{
				errorPass = 0;
     e3a:	19 82       	std	Y+1, r1	; 0x01
				state = INITIAL;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	8b 83       	std	Y+3, r24	; 0x03
				check = WRONG;
     e40:	1a 82       	std	Y+2, r1	; 0x02
			}
			if (check == NOT_MATCH)
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	89 30       	cpi	r24, 0x09	; 9
     e46:	09 f0       	breq	.+2      	; 0xe4a <main+0x1ce>
     e48:	9c cf       	rjmp	.-200    	; 0xd82 <main+0x106>
			{

				errorPass++;
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	8f 5f       	subi	r24, 0xFF	; 255
     e4e:	89 83       	std	Y+1, r24	; 0x01
				TIMER_SetCallBack(CONTROL_buzzerProcessing);
     e50:	8f eb       	ldi	r24, 0xBF	; 191
     e52:	98 e0       	ldi	r25, 0x08	; 8
     e54:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <TIMER_SetCallBack>
				if(errorPass >= 3)
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	83 30       	cpi	r24, 0x03	; 3
     e5c:	08 f4       	brcc	.+2      	; 0xe60 <main+0x1e4>
     e5e:	91 cf       	rjmp	.-222    	; 0xd82 <main+0x106>
				{
					TIMER_init(TIMER_0,&config_Timer_Buzzer);
     e60:	9e 01       	movw	r18, r28
     e62:	2e 5e       	subi	r18, 0xEE	; 238
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	b9 01       	movw	r22, r18
     e6a:	0e 94 c2 0b 	call	0x1784	; 0x1784 <TIMER_init>
					CONTROL_Buzzer();
     e6e:	0e 94 8f 08 	call	0x111e	; 0x111e <CONTROL_Buzzer>
					TIMER_Deinit(TIMER_0);
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <TIMER_Deinit>
					stop_buzzer = 0;
     e78:	10 92 83 00 	sts	0x0083, r1
     e7c:	82 cf       	rjmp	.-252    	; 0xd82 <main+0x106>
				}
			}
		}
		else
		{
			state = INITIAL;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	8b 83       	std	Y+3, r24	; 0x03
			check = WRONG;
     e82:	1a 82       	std	Y+2, r1	; 0x02
     e84:	7e cf       	rjmp	.-260    	; 0xd82 <main+0x106>

00000e86 <storePassword>:
/*
 * Description:
 *    Function to store the password after comparing them and they are matched.
 * */
static void storePassword(char *pass_ptr)
{
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	27 97       	sbiw	r28, 0x07	; 7
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	9f 83       	std	Y+7, r25	; 0x07
     e9c:	8e 83       	std	Y+6, r24	; 0x06
	uint8 i;

	for(i = 0; i<ARR_SIZE;i++)
     e9e:	19 82       	std	Y+1, r1	; 0x01
     ea0:	2f c0       	rjmp	.+94     	; 0xf00 <storePassword+0x7a>
	{
		EEPROM_writeByte(i,pass_ptr[i]);
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	48 2f       	mov	r20, r24
     ea6:	50 e0       	ldi	r21, 0x00	; 0
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	8e 81       	ldd	r24, Y+6	; 0x06
     eb0:	9f 81       	ldd	r25, Y+7	; 0x07
     eb2:	fc 01       	movw	r30, r24
     eb4:	e2 0f       	add	r30, r18
     eb6:	f3 1f       	adc	r31, r19
     eb8:	20 81       	ld	r18, Z
     eba:	ca 01       	movw	r24, r20
     ebc:	62 2f       	mov	r22, r18
     ebe:	0e 94 e7 08 	call	0x11ce	; 0x11ce <EEPROM_writeByte>
		for (volatile long cnt = 10000; cnt; cnt--);
     ec2:	80 e1       	ldi	r24, 0x10	; 16
     ec4:	97 e2       	ldi	r25, 0x27	; 39
     ec6:	a0 e0       	ldi	r26, 0x00	; 0
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	8a 83       	std	Y+2, r24	; 0x02
     ecc:	9b 83       	std	Y+3, r25	; 0x03
     ece:	ac 83       	std	Y+4, r26	; 0x04
     ed0:	bd 83       	std	Y+5, r27	; 0x05
     ed2:	0b c0       	rjmp	.+22     	; 0xeea <storePassword+0x64>
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	9b 81       	ldd	r25, Y+3	; 0x03
     ed8:	ac 81       	ldd	r26, Y+4	; 0x04
     eda:	bd 81       	ldd	r27, Y+5	; 0x05
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	a1 09       	sbc	r26, r1
     ee0:	b1 09       	sbc	r27, r1
     ee2:	8a 83       	std	Y+2, r24	; 0x02
     ee4:	9b 83       	std	Y+3, r25	; 0x03
     ee6:	ac 83       	std	Y+4, r26	; 0x04
     ee8:	bd 83       	std	Y+5, r27	; 0x05
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	9b 81       	ldd	r25, Y+3	; 0x03
     eee:	ac 81       	ldd	r26, Y+4	; 0x04
     ef0:	bd 81       	ldd	r27, Y+5	; 0x05
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	a1 05       	cpc	r26, r1
     ef6:	b1 05       	cpc	r27, r1
     ef8:	69 f7       	brne	.-38     	; 0xed4 <storePassword+0x4e>
 * */
static void storePassword(char *pass_ptr)
{
	uint8 i;

	for(i = 0; i<ARR_SIZE;i++)
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	8f 5f       	subi	r24, 0xFF	; 255
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	85 30       	cpi	r24, 0x05	; 5
     f04:	70 f2       	brcs	.-100    	; 0xea2 <storePassword+0x1c>
	{
		EEPROM_writeByte(i,pass_ptr[i]);
		for (volatile long cnt = 10000; cnt; cnt--);
	}

}
     f06:	27 96       	adiw	r28, 0x07	; 7
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	f8 94       	cli
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	cd bf       	out	0x3d, r28	; 61
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <CONTROL_receivePass>:
 * 	  3- Compare between them.
 * 	  4- In case of the two passwords are not matched return not match.
 * 	  5- In case of the two passwords are matched return wrong.
 * */
uint8 CONTROL_receivePass(void)
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	2e 97       	sbiw	r28, 0x0e	; 14
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
	char pass1_arr[ARR_SIZE+1];
	char pass2_arr[ARR_SIZE+1];
	uint8 check;

	while(USART_receiveByte() != READY){};
     f2c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <USART_receiveByte>
     f30:	82 30       	cpi	r24, 0x02	; 2
     f32:	e1 f7       	brne	.-8      	; 0xf2c <CONTROL_receivePass+0x14>
	USART_receiveString(pass1_arr);
     f34:	ce 01       	movw	r24, r28
     f36:	02 96       	adiw	r24, 0x02	; 2
     f38:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <USART_receiveString>

	while(USART_receiveByte() != READY){};
     f3c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <USART_receiveByte>
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	e1 f7       	brne	.-8      	; 0xf3c <CONTROL_receivePass+0x24>
	USART_receiveString(pass2_arr);
     f44:	ce 01       	movw	r24, r28
     f46:	08 96       	adiw	r24, 0x08	; 8
     f48:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <USART_receiveString>

	check = strcmp(pass1_arr, pass2_arr);
     f4c:	ce 01       	movw	r24, r28
     f4e:	02 96       	adiw	r24, 0x02	; 2
     f50:	9e 01       	movw	r18, r28
     f52:	28 5f       	subi	r18, 0xF8	; 248
     f54:	3f 4f       	sbci	r19, 0xFF	; 255
     f56:	b9 01       	movw	r22, r18
     f58:	0e 94 b2 12 	call	0x2564	; 0x2564 <strcmp>
     f5c:	89 83       	std	Y+1, r24	; 0x01

	if (check == 0)
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	88 23       	and	r24, r24
     f62:	71 f4       	brne	.+28     	; 0xf80 <CONTROL_receivePass+0x68>
	{

		storePassword(pass2_arr);
     f64:	ce 01       	movw	r24, r28
     f66:	08 96       	adiw	r24, 0x08	; 8
     f68:	0e 94 43 07 	call	0xe86	; 0xe86 <storePassword>
		while(USART_receiveByte() != READY);
     f6c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <USART_receiveByte>
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	e1 f7       	brne	.-8      	; 0xf6c <CONTROL_receivePass+0x54>
		USART_sendByte(MATCH);
     f74:	88 e0       	ldi	r24, 0x08	; 8
     f76:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <USART_sendByte>
		return MATCH;
     f7a:	88 e0       	ldi	r24, 0x08	; 8
     f7c:	8e 87       	std	Y+14, r24	; 0x0e
     f7e:	08 c0       	rjmp	.+16     	; 0xf90 <CONTROL_receivePass+0x78>
	}
	else
	{
		while(USART_receiveByte() != READY);
     f80:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <USART_receiveByte>
     f84:	82 30       	cpi	r24, 0x02	; 2
     f86:	e1 f7       	brne	.-8      	; 0xf80 <CONTROL_receivePass+0x68>
		USART_sendByte(WRONG);
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <USART_sendByte>
		return WRONG;
     f8e:	1e 86       	std	Y+14, r1	; 0x0e
     f90:	8e 85       	ldd	r24, Y+14	; 0x0e
	}
}
     f92:	2e 96       	adiw	r28, 0x0e	; 14
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <CONTROL_matchPassword>:
 * 	  3- Compare between them.
 * 	  4- In case of the two passwords are not matched return not match.
 * 	  5- In case of the two passwords are matched return match.
 * */
uint8 CONTROL_matchPassword(void)
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	60 97       	sbiw	r28, 0x10	; 16
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
	char check;

	char passIsMatch_arr[ARR_SIZE+1];
	char storedPAss_arr[ARR_SIZE+1];

	while(USART_receiveByte() != READY);
     fb8:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <USART_receiveByte>
     fbc:	82 30       	cpi	r24, 0x02	; 2
     fbe:	e1 f7       	brne	.-8      	; 0xfb8 <CONTROL_matchPassword+0x14>
	USART_receiveString(passIsMatch_arr);
     fc0:	ce 01       	movw	r24, r28
     fc2:	04 96       	adiw	r24, 0x04	; 4
     fc4:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <USART_receiveString>

	for(counter = 0; counter < ARR_SIZE; counter++ )
     fc8:	1b 82       	std	Y+3, r1	; 0x03
     fca:	13 c0       	rjmp	.+38     	; 0xff2 <CONTROL_matchPassword+0x4e>
	{
		check = EEPROM_readByte(counter,&storedPAss_arr[counter]);
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	48 2f       	mov	r20, r24
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	9e 01       	movw	r18, r28
     fda:	26 5f       	subi	r18, 0xF6	; 246
     fdc:	3f 4f       	sbci	r19, 0xFF	; 255
     fde:	28 0f       	add	r18, r24
     fe0:	39 1f       	adc	r19, r25
     fe2:	ca 01       	movw	r24, r20
     fe4:	b9 01       	movw	r22, r18
     fe6:	0e 94 28 09 	call	0x1250	; 0x1250 <EEPROM_readByte>
     fea:	89 83       	std	Y+1, r24	; 0x01
	char storedPAss_arr[ARR_SIZE+1];

	while(USART_receiveByte() != READY);
	USART_receiveString(passIsMatch_arr);

	for(counter = 0; counter < ARR_SIZE; counter++ )
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	8f 5f       	subi	r24, 0xFF	; 255
     ff0:	8b 83       	std	Y+3, r24	; 0x03
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	85 30       	cpi	r24, 0x05	; 5
     ff6:	50 f3       	brcs	.-44     	; 0xfcc <CONTROL_matchPassword+0x28>
		check = EEPROM_readByte(counter,&storedPAss_arr[counter]);


	}

	storedPAss_arr[counter] = '\0';
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	ce 01       	movw	r24, r28
    1000:	0a 96       	adiw	r24, 0x0a	; 10
    1002:	fc 01       	movw	r30, r24
    1004:	e2 0f       	add	r30, r18
    1006:	f3 1f       	adc	r31, r19
    1008:	10 82       	st	Z, r1

	checkMatch = strcmp(passIsMatch_arr, storedPAss_arr);
    100a:	ce 01       	movw	r24, r28
    100c:	04 96       	adiw	r24, 0x04	; 4
    100e:	9e 01       	movw	r18, r28
    1010:	26 5f       	subi	r18, 0xF6	; 246
    1012:	3f 4f       	sbci	r19, 0xFF	; 255
    1014:	b9 01       	movw	r22, r18
    1016:	0e 94 b2 12 	call	0x2564	; 0x2564 <strcmp>
    101a:	8a 83       	std	Y+2, r24	; 0x02

	if(checkMatch == 0)
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	88 23       	and	r24, r24
    1020:	51 f4       	brne	.+20     	; 0x1036 <CONTROL_matchPassword+0x92>
	{
		while(USART_receiveByte() != READY);
    1022:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <USART_receiveByte>
    1026:	82 30       	cpi	r24, 0x02	; 2
    1028:	e1 f7       	brne	.-8      	; 0x1022 <CONTROL_matchPassword+0x7e>
		USART_sendByte(MATCH);
    102a:	88 e0       	ldi	r24, 0x08	; 8
    102c:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <USART_sendByte>
		return MATCH;
    1030:	88 e0       	ldi	r24, 0x08	; 8
    1032:	88 8b       	std	Y+16, r24	; 0x10
    1034:	09 c0       	rjmp	.+18     	; 0x1048 <CONTROL_matchPassword+0xa4>
	}
	else
	{
		while(USART_receiveByte() != READY);
    1036:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <USART_receiveByte>
    103a:	82 30       	cpi	r24, 0x02	; 2
    103c:	e1 f7       	brne	.-8      	; 0x1036 <CONTROL_matchPassword+0x92>
		USART_sendByte(NOT_MATCH);
    103e:	89 e0       	ldi	r24, 0x09	; 9
    1040:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <USART_sendByte>
		return NOT_MATCH;
    1044:	89 e0       	ldi	r24, 0x09	; 9
    1046:	88 8b       	std	Y+16, r24	; 0x10
    1048:	88 89       	ldd	r24, Y+16	; 0x10
	}
}
    104a:	60 96       	adiw	r28, 0x10	; 16
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <CONTROL_motorOpen>:
/*
 * Description:
 *		Function to rotate the motor to open the door
 * */
void CONTROL_motorOpen(void)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate(MOTOR_CCW);
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DcMotor_Rotate>
	while(open_flag == 0);
    106a:	80 91 80 00 	lds	r24, 0x0080
    106e:	88 23       	and	r24, r24
    1070:	e1 f3       	breq	.-8      	; 0x106a <CONTROL_motorOpen+0xe>
}
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <CONTROL_motorClose>:
/*
 * Description:
 *		Function to rotate the motor to close the door
 * */
void CONTROL_motorClose(void)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate(MOTOR_CW);
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DcMotor_Rotate>
	while(close_flag != 1);
    1086:	80 91 81 00 	lds	r24, 0x0081
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	e1 f7       	brne	.-8      	; 0x1086 <CONTROL_motorClose+0xe>
}
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <CONTROL_motorStop>:
/*
 * Description:
 *		Function to stop the motor.
 * */
void CONTROL_motorStop(void)
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate(MOTOR_STOP);
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DcMotor_Rotate>
	while(stop_flag != 1);
    10a2:	80 91 82 00 	lds	r24, 0x0082
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	e1 f7       	brne	.-8      	; 0x10a2 <CONTROL_motorStop+0xe>
}
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <CONTROL_motorProcessing>:
 * Description:
 *		Function to rotate the motor 15 second in clockwise direction
 *		and 15 seconds in counter clockwise direction.
 * */
void CONTROL_motorProcessing(void)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    10b8:	80 91 7e 00 	lds	r24, 0x007E
    10bc:	90 91 7f 00 	lds	r25, 0x007F
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	90 93 7f 00 	sts	0x007F, r25
    10c6:	80 93 7e 00 	sts	0x007E, r24

	if(g_tick == OPEN_MOTOR_TIMER_PER_SECOND)
    10ca:	80 91 7e 00 	lds	r24, 0x007E
    10ce:	90 91 7f 00 	lds	r25, 0x007F
    10d2:	21 e0       	ldi	r18, 0x01	; 1
    10d4:	82 3c       	cpi	r24, 0xC2	; 194
    10d6:	92 07       	cpc	r25, r18
    10d8:	21 f4       	brne	.+8      	; 0x10e2 <CONTROL_motorProcessing+0x32>
	{
		open_flag = 1;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	80 93 80 00 	sts	0x0080, r24
    10e0:	1b c0       	rjmp	.+54     	; 0x1118 <CONTROL_motorProcessing+0x68>

	}
	else if(g_tick == CLOSE_MOTOR_TIMER_PER_SECOND)
    10e2:	80 91 7e 00 	lds	r24, 0x007E
    10e6:	90 91 7f 00 	lds	r25, 0x007F
    10ea:	23 e0       	ldi	r18, 0x03	; 3
    10ec:	84 38       	cpi	r24, 0x84	; 132
    10ee:	92 07       	cpc	r25, r18
    10f0:	21 f4       	brne	.+8      	; 0x10fa <CONTROL_motorProcessing+0x4a>
	{

		close_flag = 1;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	80 93 81 00 	sts	0x0081, r24
    10f8:	0f c0       	rjmp	.+30     	; 0x1118 <CONTROL_motorProcessing+0x68>

	}
	else if(g_tick > CLOSE_MOTOR_TIMER_PER_SECOND)
    10fa:	80 91 7e 00 	lds	r24, 0x007E
    10fe:	90 91 7f 00 	lds	r25, 0x007F
    1102:	23 e0       	ldi	r18, 0x03	; 3
    1104:	85 38       	cpi	r24, 0x85	; 133
    1106:	92 07       	cpc	r25, r18
    1108:	38 f0       	brcs	.+14     	; 0x1118 <CONTROL_motorProcessing+0x68>
	{
		g_tick = 0;
    110a:	10 92 7f 00 	sts	0x007F, r1
    110e:	10 92 7e 00 	sts	0x007E, r1
		stop_flag = 1;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	80 93 82 00 	sts	0x0082, r24
	}
}
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <CONTROL_Buzzer>:
/*
 * Description:
 *		Function to start the alarm for 1 minute.
 * */
void CONTROL_Buzzer(void)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	00 d0       	rcall	.+0      	; 0x1124 <CONTROL_Buzzer+0x6>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <CONTROL_Buzzer+0x8>
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
	while (1)
	{
		if(stop_buzzer > 0)
    112a:	80 91 83 00 	lds	r24, 0x0083
    112e:	88 23       	and	r24, r24
    1130:	f9 f4       	brne	.+62     	; 0x1170 <CONTROL_Buzzer+0x52>
		{
			break;
		}
		else
		{
			BUZZER_start();
    1132:	0e 94 af 05 	call	0xb5e	; 0xb5e <BUZZER_start>
			for (volatile long cnt = 128000; cnt; cnt--);
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	94 ef       	ldi	r25, 0xF4	; 244
    113a:	a1 e0       	ldi	r26, 0x01	; 1
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	9a 83       	std	Y+2, r25	; 0x02
    1142:	ab 83       	std	Y+3, r26	; 0x03
    1144:	bc 83       	std	Y+4, r27	; 0x04
    1146:	0b c0       	rjmp	.+22     	; 0x115e <CONTROL_Buzzer+0x40>
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	9a 81       	ldd	r25, Y+2	; 0x02
    114c:	ab 81       	ldd	r26, Y+3	; 0x03
    114e:	bc 81       	ldd	r27, Y+4	; 0x04
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	a1 09       	sbc	r26, r1
    1154:	b1 09       	sbc	r27, r1
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	ab 83       	std	Y+3, r26	; 0x03
    115c:	bc 83       	std	Y+4, r27	; 0x04
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	9a 81       	ldd	r25, Y+2	; 0x02
    1162:	ab 81       	ldd	r26, Y+3	; 0x03
    1164:	bc 81       	ldd	r27, Y+4	; 0x04
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	a1 05       	cpc	r26, r1
    116a:	b1 05       	cpc	r27, r1
    116c:	69 f7       	brne	.-38     	; 0x1148 <CONTROL_Buzzer+0x2a>
    116e:	dd cf       	rjmp	.-70     	; 0x112a <CONTROL_Buzzer+0xc>
		}
	}
}
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <CONTROL_buzzerProcessing>:
/*
 * Description:
 *		Function to start buzzer and stop after one minute
 * */
void CONTROL_buzzerProcessing(void)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1186:	80 91 7e 00 	lds	r24, 0x007E
    118a:	90 91 7f 00 	lds	r25, 0x007F
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	90 93 7f 00 	sts	0x007F, r25
    1194:	80 93 7e 00 	sts	0x007E, r24

	if(g_tick == CLOSE_BUZZER_TIMER_FOR_ONE_MIN)
    1198:	80 91 7e 00 	lds	r24, 0x007E
    119c:	90 91 7f 00 	lds	r25, 0x007F
    11a0:	27 e0       	ldi	r18, 0x07	; 7
    11a2:	84 34       	cpi	r24, 0x44	; 68
    11a4:	92 07       	cpc	r25, r18
    11a6:	21 f4       	brne	.+8      	; 0x11b0 <CONTROL_buzzerProcessing+0x32>
	{
		stop_buzzer = 1;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	80 93 83 00 	sts	0x0083, r24
    11ae:	0c c0       	rjmp	.+24     	; 0x11c8 <CONTROL_buzzerProcessing+0x4a>

	}
	else if(g_tick > CLOSE_BUZZER_TIMER_FOR_ONE_MIN)
    11b0:	80 91 7e 00 	lds	r24, 0x007E
    11b4:	90 91 7f 00 	lds	r25, 0x007F
    11b8:	27 e0       	ldi	r18, 0x07	; 7
    11ba:	85 34       	cpi	r24, 0x45	; 69
    11bc:	92 07       	cpc	r25, r18
    11be:	20 f0       	brcs	.+8      	; 0x11c8 <CONTROL_buzzerProcessing+0x4a>
	{
		g_tick = 0;
    11c0:	10 92 7f 00 	sts	0x007F, r1
    11c4:	10 92 7e 00 	sts	0x007E, r1
	}
}
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <EEPROM_writeByte>:
 * 	  6- Send stop bit.
 * 	  7- return SUCCESS or ERROR.
 *
 * */
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <EEPROM_writeByte+0x6>
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <EEPROM_writeByte+0x8>
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	6b 83       	std	Y+3, r22	; 0x03

	TWI_start();
    11e0:	0e 94 a8 09 	call	0x1350	; 0x1350 <TWI_start>
	if(TWI_getStatus() != TWI_START)
    11e4:	0e 94 00 0a 	call	0x1400	; 0x1400 <TWI_getStatus>
    11e8:	88 30       	cpi	r24, 0x08	; 8
    11ea:	11 f0       	breq	.+4      	; 0x11f0 <EEPROM_writeByte+0x22>
	{
		return ERROR;
    11ec:	1c 82       	std	Y+4, r1	; 0x04
    11ee:	28 c0       	rjmp	.+80     	; 0x1240 <EEPROM_writeByte+0x72>
	}

	TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	80 70       	andi	r24, 0x00	; 0
    11f6:	97 70       	andi	r25, 0x07	; 7
    11f8:	88 0f       	add	r24, r24
    11fa:	89 2f       	mov	r24, r25
    11fc:	88 1f       	adc	r24, r24
    11fe:	99 0b       	sbc	r25, r25
    1200:	91 95       	neg	r25
    1202:	80 6a       	ori	r24, 0xA0	; 160
    1204:	0e 94 c3 09 	call	0x1386	; 0x1386 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1208:	0e 94 00 0a 	call	0x1400	; 0x1400 <TWI_getStatus>
    120c:	88 31       	cpi	r24, 0x18	; 24
    120e:	11 f0       	breq	.+4      	; 0x1214 <EEPROM_writeByte+0x46>
	{
		return ERROR;
    1210:	1c 82       	std	Y+4, r1	; 0x04
    1212:	16 c0       	rjmp	.+44     	; 0x1240 <EEPROM_writeByte+0x72>
	}

	TWI_writeByte((uint8)(u16addr));
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	0e 94 c3 09 	call	0x1386	; 0x1386 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    121a:	0e 94 00 0a 	call	0x1400	; 0x1400 <TWI_getStatus>
    121e:	88 32       	cpi	r24, 0x28	; 40
    1220:	11 f0       	breq	.+4      	; 0x1226 <EEPROM_writeByte+0x58>
	{
		return ERROR;
    1222:	1c 82       	std	Y+4, r1	; 0x04
    1224:	0d c0       	rjmp	.+26     	; 0x1240 <EEPROM_writeByte+0x72>
	}

	TWI_writeByte(u8data);
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	0e 94 c3 09 	call	0x1386	; 0x1386 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    122c:	0e 94 00 0a 	call	0x1400	; 0x1400 <TWI_getStatus>
    1230:	88 32       	cpi	r24, 0x28	; 40
    1232:	11 f0       	breq	.+4      	; 0x1238 <EEPROM_writeByte+0x6a>
	{
		return ERROR;
    1234:	1c 82       	std	Y+4, r1	; 0x04
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <EEPROM_writeByte+0x72>
	}

	TWI_stop();
    1238:	0e 94 b8 09 	call	0x1370	; 0x1370 <TWI_stop>

	return SUCCESS;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	8c 83       	std	Y+4, r24	; 0x04
    1240:	8c 81       	ldd	r24, Y+4	; 0x04

}
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <EEPROM_readByte>:
 * 	  6- Read byte from EEPROM.
 * 	  7- Send stop bit.
 *
 * */
uint8 EEPROM_readByte(uint16 u16addr, char *u8data)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	00 d0       	rcall	.+0      	; 0x1256 <EEPROM_readByte+0x6>
    1256:	00 d0       	rcall	.+0      	; 0x1258 <EEPROM_readByte+0x8>
    1258:	0f 92       	push	r0
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	9a 83       	std	Y+2, r25	; 0x02
    1260:	89 83       	std	Y+1, r24	; 0x01
    1262:	7c 83       	std	Y+4, r23	; 0x04
    1264:	6b 83       	std	Y+3, r22	; 0x03

	TWI_start();
    1266:	0e 94 a8 09 	call	0x1350	; 0x1350 <TWI_start>
	if(TWI_getStatus() != TWI_START)
    126a:	0e 94 00 0a 	call	0x1400	; 0x1400 <TWI_getStatus>
    126e:	88 30       	cpi	r24, 0x08	; 8
    1270:	11 f0       	breq	.+4      	; 0x1276 <EEPROM_readByte+0x26>
	{
		return ERROR;
    1272:	1d 82       	std	Y+5, r1	; 0x05
    1274:	44 c0       	rjmp	.+136    	; 0x12fe <EEPROM_readByte+0xae>
	}

	TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	80 70       	andi	r24, 0x00	; 0
    127c:	97 70       	andi	r25, 0x07	; 7
    127e:	88 0f       	add	r24, r24
    1280:	89 2f       	mov	r24, r25
    1282:	88 1f       	adc	r24, r24
    1284:	99 0b       	sbc	r25, r25
    1286:	91 95       	neg	r25
    1288:	80 6a       	ori	r24, 0xA0	; 160
    128a:	0e 94 c3 09 	call	0x1386	; 0x1386 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK)
    128e:	0e 94 00 0a 	call	0x1400	; 0x1400 <TWI_getStatus>
    1292:	88 31       	cpi	r24, 0x18	; 24
    1294:	11 f0       	breq	.+4      	; 0x129a <EEPROM_readByte+0x4a>
	{
		return ERROR;
    1296:	1d 82       	std	Y+5, r1	; 0x05
    1298:	32 c0       	rjmp	.+100    	; 0x12fe <EEPROM_readByte+0xae>
	}

	TWI_writeByte((uint8)(u16addr));
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	0e 94 c3 09 	call	0x1386	; 0x1386 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    12a0:	0e 94 00 0a 	call	0x1400	; 0x1400 <TWI_getStatus>
    12a4:	88 32       	cpi	r24, 0x28	; 40
    12a6:	11 f0       	breq	.+4      	; 0x12ac <EEPROM_readByte+0x5c>
	{
		return ERROR;
    12a8:	1d 82       	std	Y+5, r1	; 0x05
    12aa:	29 c0       	rjmp	.+82     	; 0x12fe <EEPROM_readByte+0xae>
	}

	TWI_start();
    12ac:	0e 94 a8 09 	call	0x1350	; 0x1350 <TWI_start>
	if(TWI_getStatus() != TWI_REP_START)
    12b0:	0e 94 00 0a 	call	0x1400	; 0x1400 <TWI_getStatus>
    12b4:	80 31       	cpi	r24, 0x10	; 16
    12b6:	11 f0       	breq	.+4      	; 0x12bc <EEPROM_readByte+0x6c>
	{
		return ERROR;
    12b8:	1d 82       	std	Y+5, r1	; 0x05
    12ba:	21 c0       	rjmp	.+66     	; 0x12fe <EEPROM_readByte+0xae>
	}

	TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)|1));
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	9a 81       	ldd	r25, Y+2	; 0x02
    12c0:	80 70       	andi	r24, 0x00	; 0
    12c2:	97 70       	andi	r25, 0x07	; 7
    12c4:	88 0f       	add	r24, r24
    12c6:	89 2f       	mov	r24, r25
    12c8:	88 1f       	adc	r24, r24
    12ca:	99 0b       	sbc	r25, r25
    12cc:	91 95       	neg	r25
    12ce:	81 6a       	ori	r24, 0xA1	; 161
    12d0:	0e 94 c3 09 	call	0x1386	; 0x1386 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_SLA_R_ACK)
    12d4:	0e 94 00 0a 	call	0x1400	; 0x1400 <TWI_getStatus>
    12d8:	80 34       	cpi	r24, 0x40	; 64
    12da:	11 f0       	breq	.+4      	; 0x12e0 <EEPROM_readByte+0x90>
	{
		return ERROR;
    12dc:	1d 82       	std	Y+5, r1	; 0x05
    12de:	0f c0       	rjmp	.+30     	; 0x12fe <EEPROM_readByte+0xae>
	}

	*u8data = TWI_readByteWithNACK();
    12e0:	0e 94 ed 09 	call	0x13da	; 0x13da <TWI_readByteWithNACK>
    12e4:	eb 81       	ldd	r30, Y+3	; 0x03
    12e6:	fc 81       	ldd	r31, Y+4	; 0x04
    12e8:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
    12ea:	0e 94 00 0a 	call	0x1400	; 0x1400 <TWI_getStatus>
    12ee:	88 35       	cpi	r24, 0x58	; 88
    12f0:	11 f0       	breq	.+4      	; 0x12f6 <EEPROM_readByte+0xa6>
	{
		return ERROR;
    12f2:	1d 82       	std	Y+5, r1	; 0x05
    12f4:	04 c0       	rjmp	.+8      	; 0x12fe <EEPROM_readByte+0xae>
	}

	TWI_stop();
    12f6:	0e 94 b8 09 	call	0x1370	; 0x1370 <TWI_stop>

	return SUCCESS;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	8d 83       	std	Y+5, r24	; 0x05
    12fe:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <TWI_init>:
  * 	2- Insert the required address.
  * 	3- zero prescaler.
  * 	4- Enable TWI module.
  * */
void TWI_init(const TWI_ConfingType *config)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	00 d0       	rcall	.+0      	; 0x1316 <TWI_init+0x6>
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	9a 83       	std	Y+2, r25	; 0x02
    131c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Bit rate 400 kbps (fast mode)
	 * TWBR --> Value of the TWI Bit Rate Register.
	 * TWPS --> Value of the prescaler bits in the TWI Status Register.
	 * */
	TWBR = config->bit_rate;
    131e:	a0 e2       	ldi	r26, 0x20	; 32
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e9 81       	ldd	r30, Y+1	; 0x01
    1324:	fa 81       	ldd	r31, Y+2	; 0x02
    1326:	81 81       	ldd	r24, Z+1	; 0x01
    1328:	8c 93       	st	X, r24
//	TWBR = 0x02;
	/*Using zero prescaler*/
	TWSR = 0x00;
    132a:	e1 e2       	ldi	r30, 0x21	; 33
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	10 82       	st	Z, r1
	/*
	 * Two Wire Bus address my address if any master device want to call me
	 * use the inserted address(used in case this MC is a slave device)
	 * General Call Recognition: Off
	 * */
	TWAR = (config->address)<<1; // my address = 0x01 :)
    1330:	a2 e2       	ldi	r26, 0x22	; 34
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e9 81       	ldd	r30, Y+1	; 0x01
    1336:	fa 81       	ldd	r31, Y+2	; 0x02
    1338:	80 81       	ld	r24, Z
    133a:	88 0f       	add	r24, r24
    133c:	8c 93       	st	X, r24
//	TWAR = 0b00000010;
	/*Enable TWI module*/
	TWCR = (1<<TWEN);
    133e:	e6 e5       	ldi	r30, 0x56	; 86
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	84 e0       	ldi	r24, 0x04	; 4
    1344:	80 83       	st	Z, r24
}
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <TWI_start>:
//    status = TWSR & 0xF8;
//    return status;
//}

void TWI_start(void)
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1358:	e6 e5       	ldi	r30, 0x56	; 86
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	84 ea       	ldi	r24, 0xA4	; 164
    135e:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1360:	e6 e5       	ldi	r30, 0x56	; 86
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	88 23       	and	r24, r24
    1368:	dc f7       	brge	.-10     	; 0x1360 <TWI_start+0x10>
}
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <TWI_stop>:

void TWI_stop(void)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1378:	e6 e5       	ldi	r30, 0x56	; 86
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	84 e9       	ldi	r24, 0x94	; 148
    137e:	80 83       	st	Z, r24
}
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	0f 92       	push	r0
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1392:	e3 e2       	ldi	r30, 0x23	; 35
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    139a:	e6 e5       	ldi	r30, 0x56	; 86
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	84 e8       	ldi	r24, 0x84	; 132
    13a0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    13a2:	e6 e5       	ldi	r30, 0x56	; 86
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	88 23       	and	r24, r24
    13aa:	dc f7       	brge	.-10     	; 0x13a2 <TWI_writeByte+0x1c>
}
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    13bc:	e6 e5       	ldi	r30, 0x56	; 86
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	84 ec       	ldi	r24, 0xC4	; 196
    13c2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    13c4:	e6 e5       	ldi	r30, 0x56	; 86
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	88 23       	and	r24, r24
    13cc:	dc f7       	brge	.-10     	; 0x13c4 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    13ce:	e3 e2       	ldi	r30, 0x23	; 35
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
}
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    13e2:	e6 e5       	ldi	r30, 0x56	; 86
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	84 e8       	ldi	r24, 0x84	; 132
    13e8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    13ea:	e6 e5       	ldi	r30, 0x56	; 86
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	88 23       	and	r24, r24
    13f2:	dc f7       	brge	.-10     	; 0x13ea <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    13f4:	e3 e2       	ldi	r30, 0x23	; 35
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
}
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	0f 92       	push	r0
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    140a:	e1 e2       	ldi	r30, 0x21	; 33
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	88 7f       	andi	r24, 0xF8	; 248
    1412:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1414:	89 81       	ldd	r24, Y+1	; 0x01
}
    1416:	0f 90       	pop	r0
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <DcMotor_Init>:
/*Description:
 * 1- The Function responsible for setup the direction for the two motor pins
 *  through the GPIO driver.
 * 2- Stop at the DC-Motor at the beginning through the GPIO driver. */
void DcMotor_Init(void)
{
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_PIN0_ID, PIN_OUTPUT);
    1426:	83 e0       	ldi	r24, 0x03	; 3
    1428:	62 e0       	ldi	r22, 0x02	; 2
    142a:	41 e0       	ldi	r20, 0x01	; 1
    142c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_PIN1_ID, PIN_OUTPUT);
    1430:	83 e0       	ldi	r24, 0x03	; 3
    1432:	63 e0       	ldi	r22, 0x03	; 3
    1434:	41 e0       	ldi	r20, 0x01	; 1
    1436:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GPIO_setupPinDirection>
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN0_ID, LOGIC_LOW);
    143a:	83 e0       	ldi	r24, 0x03	; 3
    143c:	62 e0       	ldi	r22, 0x02	; 2
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN1_ID, LOGIC_LOW);
    1444:	83 e0       	ldi	r24, 0x03	; 3
    1446:	63 e0       	ldi	r22, 0x03	; 3
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_writePin>
	return ;
}
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <DcMotor_Rotate>:
/*Description:
 *1- The function responsible for rotate the DC Motor CW/ or A-CW or
 *   stop the motor based on the state input state value.
 */
void DcMotor_Rotate(uint8 direction)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	0f 92       	push	r0
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	89 83       	std	Y+1, r24	; 0x01
	if(direction == MOTOR_CCW){
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	82 30       	cpi	r24, 0x02	; 2
    1464:	59 f4       	brne	.+22     	; 0x147c <DcMotor_Rotate+0x28>
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN0_ID, LOGIC_HIGH);
    1466:	83 e0       	ldi	r24, 0x03	; 3
    1468:	62 e0       	ldi	r22, 0x02	; 2
    146a:	41 e0       	ldi	r20, 0x01	; 1
    146c:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN1_ID, LOGIC_LOW);
    1470:	83 e0       	ldi	r24, 0x03	; 3
    1472:	63 e0       	ldi	r22, 0x03	; 3
    1474:	40 e0       	ldi	r20, 0x00	; 0
    1476:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_writePin>
    147a:	1b c0       	rjmp	.+54     	; 0x14b2 <DcMotor_Rotate+0x5e>
	}
	else if (direction == MOTOR_CW)
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	59 f4       	brne	.+22     	; 0x1498 <DcMotor_Rotate+0x44>
	{
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN0_ID, LOGIC_LOW);
    1482:	83 e0       	ldi	r24, 0x03	; 3
    1484:	62 e0       	ldi	r22, 0x02	; 2
    1486:	40 e0       	ldi	r20, 0x00	; 0
    1488:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN1_ID, LOGIC_HIGH);
    148c:	83 e0       	ldi	r24, 0x03	; 3
    148e:	63 e0       	ldi	r22, 0x03	; 3
    1490:	41 e0       	ldi	r20, 0x01	; 1
    1492:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_writePin>
    1496:	0d c0       	rjmp	.+26     	; 0x14b2 <DcMotor_Rotate+0x5e>
	}
	else if (direction == MOTOR_STOP)
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	88 23       	and	r24, r24
    149c:	51 f4       	brne	.+20     	; 0x14b2 <DcMotor_Rotate+0x5e>
	{
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN0_ID, LOGIC_LOW);
    149e:	83 e0       	ldi	r24, 0x03	; 3
    14a0:	62 e0       	ldi	r22, 0x02	; 2
    14a2:	40 e0       	ldi	r20, 0x00	; 0
    14a4:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN1_ID, LOGIC_LOW);
    14a8:	83 e0       	ldi	r24, 0x03	; 3
    14aa:	63 e0       	ldi	r22, 0x03	; 3
    14ac:	40 e0       	ldi	r20, 0x00	; 0
    14ae:	0e 94 06 10 	call	0x200c	; 0x200c <GPIO_writePin>
	}
	return;
}
    14b2:	0f 90       	pop	r0
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <__vector_9>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/


ISR(TIMER0_OVF_vect)
{
    14ba:	1f 92       	push	r1
    14bc:	0f 92       	push	r0
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	0f 92       	push	r0
    14c2:	11 24       	eor	r1, r1
    14c4:	2f 93       	push	r18
    14c6:	3f 93       	push	r19
    14c8:	4f 93       	push	r20
    14ca:	5f 93       	push	r21
    14cc:	6f 93       	push	r22
    14ce:	7f 93       	push	r23
    14d0:	8f 93       	push	r24
    14d2:	9f 93       	push	r25
    14d4:	af 93       	push	r26
    14d6:	bf 93       	push	r27
    14d8:	ef 93       	push	r30
    14da:	ff 93       	push	r31
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62

	if(g_callBack_ptr != NULL_PTR)
    14e4:	80 91 84 00 	lds	r24, 0x0084
    14e8:	90 91 85 00 	lds	r25, 0x0085
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	29 f0       	breq	.+10     	; 0x14fa <__vector_9+0x40>
	{
		/* Call the call back function in the application after counting the required time*/
		(*g_callBack_ptr)();
    14f0:	e0 91 84 00 	lds	r30, 0x0084
    14f4:	f0 91 85 00 	lds	r31, 0x0085
    14f8:	09 95       	icall
	}

}
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	ff 91       	pop	r31
    1500:	ef 91       	pop	r30
    1502:	bf 91       	pop	r27
    1504:	af 91       	pop	r26
    1506:	9f 91       	pop	r25
    1508:	8f 91       	pop	r24
    150a:	7f 91       	pop	r23
    150c:	6f 91       	pop	r22
    150e:	5f 91       	pop	r21
    1510:	4f 91       	pop	r20
    1512:	3f 91       	pop	r19
    1514:	2f 91       	pop	r18
    1516:	0f 90       	pop	r0
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	0f 90       	pop	r0
    151c:	1f 90       	pop	r1
    151e:	18 95       	reti

00001520 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    1520:	1f 92       	push	r1
    1522:	0f 92       	push	r0
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	0f 92       	push	r0
    1528:	11 24       	eor	r1, r1
    152a:	2f 93       	push	r18
    152c:	3f 93       	push	r19
    152e:	4f 93       	push	r20
    1530:	5f 93       	push	r21
    1532:	6f 93       	push	r22
    1534:	7f 93       	push	r23
    1536:	8f 93       	push	r24
    1538:	9f 93       	push	r25
    153a:	af 93       	push	r26
    153c:	bf 93       	push	r27
    153e:	ef 93       	push	r30
    1540:	ff 93       	push	r31
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    154a:	80 91 84 00 	lds	r24, 0x0084
    154e:	90 91 85 00 	lds	r25, 0x0085
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	29 f0       	breq	.+10     	; 0x1560 <__vector_19+0x40>
	{
		/* Call the call back function in the application after counting the required time*/
		(*g_callBack_ptr)();
    1556:	e0 91 84 00 	lds	r30, 0x0084
    155a:	f0 91 85 00 	lds	r31, 0x0085
    155e:	09 95       	icall
	}

}
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	ff 91       	pop	r31
    1566:	ef 91       	pop	r30
    1568:	bf 91       	pop	r27
    156a:	af 91       	pop	r26
    156c:	9f 91       	pop	r25
    156e:	8f 91       	pop	r24
    1570:	7f 91       	pop	r23
    1572:	6f 91       	pop	r22
    1574:	5f 91       	pop	r21
    1576:	4f 91       	pop	r20
    1578:	3f 91       	pop	r19
    157a:	2f 91       	pop	r18
    157c:	0f 90       	pop	r0
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	0f 90       	pop	r0
    1582:	1f 90       	pop	r1
    1584:	18 95       	reti

00001586 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    1586:	1f 92       	push	r1
    1588:	0f 92       	push	r0
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	0f 92       	push	r0
    158e:	11 24       	eor	r1, r1
    1590:	2f 93       	push	r18
    1592:	3f 93       	push	r19
    1594:	4f 93       	push	r20
    1596:	5f 93       	push	r21
    1598:	6f 93       	push	r22
    159a:	7f 93       	push	r23
    159c:	8f 93       	push	r24
    159e:	9f 93       	push	r25
    15a0:	af 93       	push	r26
    15a2:	bf 93       	push	r27
    15a4:	ef 93       	push	r30
    15a6:	ff 93       	push	r31
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62

	if(g_callBack_ptr != NULL_PTR)
    15b0:	80 91 84 00 	lds	r24, 0x0084
    15b4:	90 91 85 00 	lds	r25, 0x0085
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	29 f0       	breq	.+10     	; 0x15c6 <__vector_8+0x40>
	{
		/* Call the call back function in the application after counting the required time*/
		(*g_callBack_ptr)();
    15bc:	e0 91 84 00 	lds	r30, 0x0084
    15c0:	f0 91 85 00 	lds	r31, 0x0085
    15c4:	09 95       	icall
	}

}
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	ff 91       	pop	r31
    15cc:	ef 91       	pop	r30
    15ce:	bf 91       	pop	r27
    15d0:	af 91       	pop	r26
    15d2:	9f 91       	pop	r25
    15d4:	8f 91       	pop	r24
    15d6:	7f 91       	pop	r23
    15d8:	6f 91       	pop	r22
    15da:	5f 91       	pop	r21
    15dc:	4f 91       	pop	r20
    15de:	3f 91       	pop	r19
    15e0:	2f 91       	pop	r18
    15e2:	0f 90       	pop	r0
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	0f 90       	pop	r0
    15e8:	1f 90       	pop	r1
    15ea:	18 95       	reti

000015ec <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    15ec:	1f 92       	push	r1
    15ee:	0f 92       	push	r0
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	0f 92       	push	r0
    15f4:	11 24       	eor	r1, r1
    15f6:	2f 93       	push	r18
    15f8:	3f 93       	push	r19
    15fa:	4f 93       	push	r20
    15fc:	5f 93       	push	r21
    15fe:	6f 93       	push	r22
    1600:	7f 93       	push	r23
    1602:	8f 93       	push	r24
    1604:	9f 93       	push	r25
    1606:	af 93       	push	r26
    1608:	bf 93       	push	r27
    160a:	ef 93       	push	r30
    160c:	ff 93       	push	r31
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    1616:	80 91 84 00 	lds	r24, 0x0084
    161a:	90 91 85 00 	lds	r25, 0x0085
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	29 f0       	breq	.+10     	; 0x162c <__vector_6+0x40>
	{
		/* Call the call back function in the application after counting the required time*/
		(*g_callBack_ptr)();
    1622:	e0 91 84 00 	lds	r30, 0x0084
    1626:	f0 91 85 00 	lds	r31, 0x0085
    162a:	09 95       	icall
	}

}
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	ff 91       	pop	r31
    1632:	ef 91       	pop	r30
    1634:	bf 91       	pop	r27
    1636:	af 91       	pop	r26
    1638:	9f 91       	pop	r25
    163a:	8f 91       	pop	r24
    163c:	7f 91       	pop	r23
    163e:	6f 91       	pop	r22
    1640:	5f 91       	pop	r21
    1642:	4f 91       	pop	r20
    1644:	3f 91       	pop	r19
    1646:	2f 91       	pop	r18
    1648:	0f 90       	pop	r0
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	0f 90       	pop	r0
    164e:	1f 90       	pop	r1
    1650:	18 95       	reti

00001652 <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    1652:	1f 92       	push	r1
    1654:	0f 92       	push	r0
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	0f 92       	push	r0
    165a:	11 24       	eor	r1, r1
    165c:	2f 93       	push	r18
    165e:	3f 93       	push	r19
    1660:	4f 93       	push	r20
    1662:	5f 93       	push	r21
    1664:	6f 93       	push	r22
    1666:	7f 93       	push	r23
    1668:	8f 93       	push	r24
    166a:	9f 93       	push	r25
    166c:	af 93       	push	r26
    166e:	bf 93       	push	r27
    1670:	ef 93       	push	r30
    1672:	ff 93       	push	r31
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    167c:	80 91 84 00 	lds	r24, 0x0084
    1680:	90 91 85 00 	lds	r25, 0x0085
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	29 f0       	breq	.+10     	; 0x1692 <__vector_7+0x40>
	{
		/* Call the call back function in the application after counting the required time*/
		(*g_callBack_ptr)();
    1688:	e0 91 84 00 	lds	r30, 0x0084
    168c:	f0 91 85 00 	lds	r31, 0x0085
    1690:	09 95       	icall
	}

}
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	ff 91       	pop	r31
    1698:	ef 91       	pop	r30
    169a:	bf 91       	pop	r27
    169c:	af 91       	pop	r26
    169e:	9f 91       	pop	r25
    16a0:	8f 91       	pop	r24
    16a2:	7f 91       	pop	r23
    16a4:	6f 91       	pop	r22
    16a6:	5f 91       	pop	r21
    16a8:	4f 91       	pop	r20
    16aa:	3f 91       	pop	r19
    16ac:	2f 91       	pop	r18
    16ae:	0f 90       	pop	r0
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	0f 90       	pop	r0
    16b4:	1f 90       	pop	r1
    16b6:	18 95       	reti

000016b8 <__vector_4>:


ISR(TIMER2_OVF_vect)
{
    16b8:	1f 92       	push	r1
    16ba:	0f 92       	push	r0
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	0f 92       	push	r0
    16c0:	11 24       	eor	r1, r1
    16c2:	2f 93       	push	r18
    16c4:	3f 93       	push	r19
    16c6:	4f 93       	push	r20
    16c8:	5f 93       	push	r21
    16ca:	6f 93       	push	r22
    16cc:	7f 93       	push	r23
    16ce:	8f 93       	push	r24
    16d0:	9f 93       	push	r25
    16d2:	af 93       	push	r26
    16d4:	bf 93       	push	r27
    16d6:	ef 93       	push	r30
    16d8:	ff 93       	push	r31
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62

	if(g_callBack_ptr != NULL_PTR)
    16e2:	80 91 84 00 	lds	r24, 0x0084
    16e6:	90 91 85 00 	lds	r25, 0x0085
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	29 f0       	breq	.+10     	; 0x16f8 <__vector_4+0x40>
	{
		/* Call the call back function in the application after counting the required time*/
		(*g_callBack_ptr)();
    16ee:	e0 91 84 00 	lds	r30, 0x0084
    16f2:	f0 91 85 00 	lds	r31, 0x0085
    16f6:	09 95       	icall
	}

}
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	ff 91       	pop	r31
    16fe:	ef 91       	pop	r30
    1700:	bf 91       	pop	r27
    1702:	af 91       	pop	r26
    1704:	9f 91       	pop	r25
    1706:	8f 91       	pop	r24
    1708:	7f 91       	pop	r23
    170a:	6f 91       	pop	r22
    170c:	5f 91       	pop	r21
    170e:	4f 91       	pop	r20
    1710:	3f 91       	pop	r19
    1712:	2f 91       	pop	r18
    1714:	0f 90       	pop	r0
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	0f 90       	pop	r0
    171a:	1f 90       	pop	r1
    171c:	18 95       	reti

0000171e <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    171e:	1f 92       	push	r1
    1720:	0f 92       	push	r0
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	0f 92       	push	r0
    1726:	11 24       	eor	r1, r1
    1728:	2f 93       	push	r18
    172a:	3f 93       	push	r19
    172c:	4f 93       	push	r20
    172e:	5f 93       	push	r21
    1730:	6f 93       	push	r22
    1732:	7f 93       	push	r23
    1734:	8f 93       	push	r24
    1736:	9f 93       	push	r25
    1738:	af 93       	push	r26
    173a:	bf 93       	push	r27
    173c:	ef 93       	push	r30
    173e:	ff 93       	push	r31
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    1748:	80 91 84 00 	lds	r24, 0x0084
    174c:	90 91 85 00 	lds	r25, 0x0085
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	29 f0       	breq	.+10     	; 0x175e <__vector_3+0x40>
	{
		/* Call the call back function in the application after counting the required time*/
		(*g_callBack_ptr)();
    1754:	e0 91 84 00 	lds	r30, 0x0084
    1758:	f0 91 85 00 	lds	r31, 0x0085
    175c:	09 95       	icall
	}

}
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	ff 91       	pop	r31
    1764:	ef 91       	pop	r30
    1766:	bf 91       	pop	r27
    1768:	af 91       	pop	r26
    176a:	9f 91       	pop	r25
    176c:	8f 91       	pop	r24
    176e:	7f 91       	pop	r23
    1770:	6f 91       	pop	r22
    1772:	5f 91       	pop	r21
    1774:	4f 91       	pop	r20
    1776:	3f 91       	pop	r19
    1778:	2f 91       	pop	r18
    177a:	0f 90       	pop	r0
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	0f 90       	pop	r0
    1780:	1f 90       	pop	r1
    1782:	18 95       	reti

00001784 <TIMER_init>:
 *   6- Insert the compare mode time value in case of Compare mode is inserted.
 *   7- Enable timer interrupt module.
 *   8- Insert the required timer --> 0, 1 or 2.
 *   9- In case of timer1 --> Insert the required channel -> A or B.
 **/
void TIMER_init(uint8 timerNo,const TIMER_ConfigType *config){
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	00 d0       	rcall	.+0      	; 0x178a <TIMER_init+0x6>
    178a:	0f 92       	push	r0
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	7b 83       	std	Y+3, r23	; 0x03
    1794:	6a 83       	std	Y+2, r22	; 0x02

	if(timerNo == TIMER_0)
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	88 23       	and	r24, r24
    179a:	09 f0       	breq	.+2      	; 0x179e <TIMER_init+0x1a>
    179c:	6b c0       	rjmp	.+214    	; 0x1874 <TIMER_init+0xf0>
	{
		/*Non PWM mode*/
		SET_BIT(TCCR0,FOC0);
    179e:	a3 e5       	ldi	r26, 0x53	; 83
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e3 e5       	ldi	r30, 0x53	; 83
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	80 68       	ori	r24, 0x80	; 128
    17aa:	8c 93       	st	X, r24

		/*Insert the required prescaler*/
		TCCR0 = (TCCR0 & 0xF8) | ((config->prescaler));
    17ac:	a3 e5       	ldi	r26, 0x53	; 83
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e3 e5       	ldi	r30, 0x53	; 83
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	98 2f       	mov	r25, r24
    17b8:	98 7f       	andi	r25, 0xF8	; 248
    17ba:	ea 81       	ldd	r30, Y+2	; 0x02
    17bc:	fb 81       	ldd	r31, Y+3	; 0x03
    17be:	83 81       	ldd	r24, Z+3	; 0x03
    17c0:	89 2b       	or	r24, r25
    17c2:	8c 93       	st	X, r24

		/*Insert the required initial time value*/
		TCNT0 = config->Timer_Initial_Time_Value;
    17c4:	a2 e5       	ldi	r26, 0x52	; 82
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	ea 81       	ldd	r30, Y+2	; 0x02
    17ca:	fb 81       	ldd	r31, Y+3	; 0x03
    17cc:	85 81       	ldd	r24, Z+5	; 0x05
    17ce:	8c 93       	st	X, r24

		if ((config->mode) == COMPARE)
    17d0:	ea 81       	ldd	r30, Y+2	; 0x02
    17d2:	fb 81       	ldd	r31, Y+3	; 0x03
    17d4:	82 81       	ldd	r24, Z+2	; 0x02
    17d6:	82 30       	cpi	r24, 0x02	; 2
    17d8:	89 f5       	brne	.+98     	; 0x183c <TIMER_init+0xb8>
		{

			/*Insert the required mode */
			CLEAR_BIT(TCCR0, WGM00);
    17da:	a3 e5       	ldi	r26, 0x53	; 83
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e3 e5       	ldi	r30, 0x53	; 83
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	8f 7b       	andi	r24, 0xBF	; 191
    17e6:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM01);
    17e8:	a3 e5       	ldi	r26, 0x53	; 83
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e3 e5       	ldi	r30, 0x53	; 83
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	88 60       	ori	r24, 0x08	; 8
    17f4:	8c 93       	st	X, r24

			/*Insert the required compare time value.*/
			OCR0 = config->Timer_Compare_Time_Value;
    17f6:	ac e5       	ldi	r26, 0x5C	; 92
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	ea 81       	ldd	r30, Y+2	; 0x02
    17fc:	fb 81       	ldd	r31, Y+3	; 0x03
    17fe:	80 81       	ld	r24, Z
    1800:	91 81       	ldd	r25, Z+1	; 0x01
    1802:	8c 93       	st	X, r24

			/*Insert the required the compare output mode*/
			TCCR0 = (TCCR0 & 0xCF) | ((config->compareMatch)<<4);
    1804:	a3 e5       	ldi	r26, 0x53	; 83
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e3 e5       	ldi	r30, 0x53	; 83
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	28 2f       	mov	r18, r24
    1810:	2f 7c       	andi	r18, 0xCF	; 207
    1812:	ea 81       	ldd	r30, Y+2	; 0x02
    1814:	fb 81       	ldd	r31, Y+3	; 0x03
    1816:	84 81       	ldd	r24, Z+4	; 0x04
    1818:	88 2f       	mov	r24, r24
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	82 95       	swap	r24
    181e:	92 95       	swap	r25
    1820:	90 7f       	andi	r25, 0xF0	; 240
    1822:	98 27       	eor	r25, r24
    1824:	80 7f       	andi	r24, 0xF0	; 240
    1826:	98 27       	eor	r25, r24
    1828:	82 2b       	or	r24, r18
    182a:	8c 93       	st	X, r24


			/*Enable interrupt for compare mode*/
			SET_BIT(TIMSK, OCIE0);
    182c:	a9 e5       	ldi	r26, 0x59	; 89
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e9 e5       	ldi	r30, 0x59	; 89
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	82 60       	ori	r24, 0x02	; 2
    1838:	8c 93       	st	X, r24
    183a:	5a c1       	rjmp	.+692    	; 0x1af0 <TIMER_init+0x36c>
		}
		else if((config->mode) == NORMAL_MODE)
    183c:	ea 81       	ldd	r30, Y+2	; 0x02
    183e:	fb 81       	ldd	r31, Y+3	; 0x03
    1840:	82 81       	ldd	r24, Z+2	; 0x02
    1842:	88 23       	and	r24, r24
    1844:	09 f0       	breq	.+2      	; 0x1848 <TIMER_init+0xc4>
    1846:	54 c1       	rjmp	.+680    	; 0x1af0 <TIMER_init+0x36c>
		{
			/*The required mode */
			CLEAR_BIT(TCCR0, WGM00);
    1848:	a3 e5       	ldi	r26, 0x53	; 83
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e3 e5       	ldi	r30, 0x53	; 83
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	8f 7b       	andi	r24, 0xBF	; 191
    1854:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0, WGM01);
    1856:	a3 e5       	ldi	r26, 0x53	; 83
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e3 e5       	ldi	r30, 0x53	; 83
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	87 7f       	andi	r24, 0xF7	; 247
    1862:	8c 93       	st	X, r24

			/*Enable interrupt for normal mode*/
			SET_BIT(TIMSK, TOIE0);
    1864:	a9 e5       	ldi	r26, 0x59	; 89
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e9 e5       	ldi	r30, 0x59	; 89
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	81 60       	ori	r24, 0x01	; 1
    1870:	8c 93       	st	X, r24
    1872:	3e c1       	rjmp	.+636    	; 0x1af0 <TIMER_init+0x36c>
		}
	}
	else if(timerNo == TIMER_1)
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	09 f0       	breq	.+2      	; 0x187c <TIMER_init+0xf8>
    187a:	cd c0       	rjmp	.+410    	; 0x1a16 <TIMER_init+0x292>
	{
		SET_BIT(TCCR1A,FOC1A);
    187c:	af e4       	ldi	r26, 0x4F	; 79
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	ef e4       	ldi	r30, 0x4F	; 79
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	88 60       	ori	r24, 0x08	; 8
    1888:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    188a:	af e4       	ldi	r26, 0x4F	; 79
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	ef e4       	ldi	r30, 0x4F	; 79
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	84 60       	ori	r24, 0x04	; 4
    1896:	8c 93       	st	X, r24

		TCNT1 = config->Timer_Initial_Time_Value;
    1898:	ac e4       	ldi	r26, 0x4C	; 76
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	ea 81       	ldd	r30, Y+2	; 0x02
    189e:	fb 81       	ldd	r31, Y+3	; 0x03
    18a0:	85 81       	ldd	r24, Z+5	; 0x05
    18a2:	88 2f       	mov	r24, r24
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	11 96       	adiw	r26, 0x01	; 1
    18a8:	9c 93       	st	X, r25
    18aa:	8e 93       	st	-X, r24

		TCCR1B = (TCCR1B & 0xF8) | (config->prescaler);
    18ac:	ae e4       	ldi	r26, 0x4E	; 78
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	ee e4       	ldi	r30, 0x4E	; 78
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	98 2f       	mov	r25, r24
    18b8:	98 7f       	andi	r25, 0xF8	; 248
    18ba:	ea 81       	ldd	r30, Y+2	; 0x02
    18bc:	fb 81       	ldd	r31, Y+3	; 0x03
    18be:	83 81       	ldd	r24, Z+3	; 0x03
    18c0:	89 2b       	or	r24, r25
    18c2:	8c 93       	st	X, r24

		if ((config->mode) == COMPARE)
    18c4:	ea 81       	ldd	r30, Y+2	; 0x02
    18c6:	fb 81       	ldd	r31, Y+3	; 0x03
    18c8:	82 81       	ldd	r24, Z+2	; 0x02
    18ca:	82 30       	cpi	r24, 0x02	; 2
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <TIMER_init+0x14c>
    18ce:	5d c0       	rjmp	.+186    	; 0x198a <TIMER_init+0x206>
		{
			TCCR1A = (TCCR1A & 0x0F) | ((config->compareMatch)<<4);
    18d0:	af e4       	ldi	r26, 0x4F	; 79
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	ef e4       	ldi	r30, 0x4F	; 79
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	28 2f       	mov	r18, r24
    18dc:	2f 70       	andi	r18, 0x0F	; 15
    18de:	ea 81       	ldd	r30, Y+2	; 0x02
    18e0:	fb 81       	ldd	r31, Y+3	; 0x03
    18e2:	84 81       	ldd	r24, Z+4	; 0x04
    18e4:	88 2f       	mov	r24, r24
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	82 95       	swap	r24
    18ea:	92 95       	swap	r25
    18ec:	90 7f       	andi	r25, 0xF0	; 240
    18ee:	98 27       	eor	r25, r24
    18f0:	80 7f       	andi	r24, 0xF0	; 240
    18f2:	98 27       	eor	r25, r24
    18f4:	82 2b       	or	r24, r18
    18f6:	8c 93       	st	X, r24

			CLEAR_BIT(TCCR1A, WGM10);
    18f8:	af e4       	ldi	r26, 0x4F	; 79
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	ef e4       	ldi	r30, 0x4F	; 79
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	8e 7f       	andi	r24, 0xFE	; 254
    1904:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    1906:	af e4       	ldi	r26, 0x4F	; 79
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	ef e4       	ldi	r30, 0x4F	; 79
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	8d 7f       	andi	r24, 0xFD	; 253
    1912:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM12);
    1914:	ae e4       	ldi	r26, 0x4E	; 78
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	ee e4       	ldi	r30, 0x4E	; 78
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	88 60       	ori	r24, 0x08	; 8
    1920:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM13);
    1922:	ae e4       	ldi	r26, 0x4E	; 78
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	ee e4       	ldi	r30, 0x4E	; 78
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	8f 7e       	andi	r24, 0xEF	; 239
    192e:	8c 93       	st	X, r24

			if((config->channel) == 'A')
    1930:	ea 81       	ldd	r30, Y+2	; 0x02
    1932:	fb 81       	ldd	r31, Y+3	; 0x03
    1934:	86 81       	ldd	r24, Z+6	; 0x06
    1936:	81 34       	cpi	r24, 0x41	; 65
    1938:	89 f4       	brne	.+34     	; 0x195c <TIMER_init+0x1d8>
			{
				OCR1A = config->Timer_Compare_Time_Value;
    193a:	aa e4       	ldi	r26, 0x4A	; 74
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	ea 81       	ldd	r30, Y+2	; 0x02
    1940:	fb 81       	ldd	r31, Y+3	; 0x03
    1942:	80 81       	ld	r24, Z
    1944:	91 81       	ldd	r25, Z+1	; 0x01
    1946:	11 96       	adiw	r26, 0x01	; 1
    1948:	9c 93       	st	X, r25
    194a:	8e 93       	st	-X, r24

				/*Enable interrupt for normal mode*/
				SET_BIT(TIMSK, OCIE1A);
    194c:	a9 e5       	ldi	r26, 0x59	; 89
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e9 e5       	ldi	r30, 0x59	; 89
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	80 61       	ori	r24, 0x10	; 16
    1958:	8c 93       	st	X, r24
    195a:	ca c0       	rjmp	.+404    	; 0x1af0 <TIMER_init+0x36c>
			}
			else if ((config->channel) == 'B')
    195c:	ea 81       	ldd	r30, Y+2	; 0x02
    195e:	fb 81       	ldd	r31, Y+3	; 0x03
    1960:	86 81       	ldd	r24, Z+6	; 0x06
    1962:	82 34       	cpi	r24, 0x42	; 66
    1964:	09 f0       	breq	.+2      	; 0x1968 <TIMER_init+0x1e4>
    1966:	c4 c0       	rjmp	.+392    	; 0x1af0 <TIMER_init+0x36c>
			{
				OCR1B = config->Timer_Compare_Time_Value;
    1968:	a8 e4       	ldi	r26, 0x48	; 72
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	ea 81       	ldd	r30, Y+2	; 0x02
    196e:	fb 81       	ldd	r31, Y+3	; 0x03
    1970:	80 81       	ld	r24, Z
    1972:	91 81       	ldd	r25, Z+1	; 0x01
    1974:	11 96       	adiw	r26, 0x01	; 1
    1976:	9c 93       	st	X, r25
    1978:	8e 93       	st	-X, r24

				/*Enable interrupt for normal mode*/
				SET_BIT(TIMSK, OCIE1B);
    197a:	a9 e5       	ldi	r26, 0x59	; 89
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e9 e5       	ldi	r30, 0x59	; 89
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	88 60       	ori	r24, 0x08	; 8
    1986:	8c 93       	st	X, r24
    1988:	b3 c0       	rjmp	.+358    	; 0x1af0 <TIMER_init+0x36c>
			}

		}
		else if((config->mode) == NORMAL_MODE)
    198a:	ea 81       	ldd	r30, Y+2	; 0x02
    198c:	fb 81       	ldd	r31, Y+3	; 0x03
    198e:	82 81       	ldd	r24, Z+2	; 0x02
    1990:	88 23       	and	r24, r24
    1992:	09 f0       	breq	.+2      	; 0x1996 <TIMER_init+0x212>
    1994:	ad c0       	rjmp	.+346    	; 0x1af0 <TIMER_init+0x36c>
		{
			CLEAR_BIT(TCCR1A, COM1B0);
    1996:	af e4       	ldi	r26, 0x4F	; 79
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	ef e4       	ldi	r30, 0x4F	; 79
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	8f 7e       	andi	r24, 0xEF	; 239
    19a2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, COM1B1);
    19a4:	af e4       	ldi	r26, 0x4F	; 79
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	ef e4       	ldi	r30, 0x4F	; 79
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	8f 7d       	andi	r24, 0xDF	; 223
    19b0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, COM1A0);
    19b2:	af e4       	ldi	r26, 0x4F	; 79
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	ef e4       	ldi	r30, 0x4F	; 79
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	8f 7b       	andi	r24, 0xBF	; 191
    19be:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, COM1A1);
    19c0:	af e4       	ldi	r26, 0x4F	; 79
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	ef e4       	ldi	r30, 0x4F	; 79
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	8f 77       	andi	r24, 0x7F	; 127
    19cc:	8c 93       	st	X, r24

			CLEAR_BIT(TCCR1A, WGM10);
    19ce:	af e4       	ldi	r26, 0x4F	; 79
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ef e4       	ldi	r30, 0x4F	; 79
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	8e 7f       	andi	r24, 0xFE	; 254
    19da:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A, WGM11);
    19dc:	af e4       	ldi	r26, 0x4F	; 79
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	ef e4       	ldi	r30, 0x4F	; 79
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	8d 7f       	andi	r24, 0xFD	; 253
    19e8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM12);
    19ea:	ae e4       	ldi	r26, 0x4E	; 78
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	ee e4       	ldi	r30, 0x4E	; 78
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	87 7f       	andi	r24, 0xF7	; 247
    19f6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, WGM13);
    19f8:	ae e4       	ldi	r26, 0x4E	; 78
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	ee e4       	ldi	r30, 0x4E	; 78
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	8f 7e       	andi	r24, 0xEF	; 239
    1a04:	8c 93       	st	X, r24

			/*Enable interrupt for normal mode*/
			SET_BIT(TIMSK, TOIE1);
    1a06:	a9 e5       	ldi	r26, 0x59	; 89
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e9 e5       	ldi	r30, 0x59	; 89
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	84 60       	ori	r24, 0x04	; 4
    1a12:	8c 93       	st	X, r24
    1a14:	6d c0       	rjmp	.+218    	; 0x1af0 <TIMER_init+0x36c>
		}
	}
	else if(timerNo == TIMER_2)
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	82 30       	cpi	r24, 0x02	; 2
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <TIMER_init+0x29a>
    1a1c:	69 c0       	rjmp	.+210    	; 0x1af0 <TIMER_init+0x36c>
	{
		/*Non PWM mode*/
		SET_BIT(TCCR2,FOC2);
    1a1e:	a5 e4       	ldi	r26, 0x45	; 69
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e5 e4       	ldi	r30, 0x45	; 69
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	80 68       	ori	r24, 0x80	; 128
    1a2a:	8c 93       	st	X, r24

		/*Insert the required prescaler*/
		TCCR2 = (TCCR2 & 0xF8) | ((config->prescaler));
    1a2c:	a5 e4       	ldi	r26, 0x45	; 69
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e5 e4       	ldi	r30, 0x45	; 69
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	98 2f       	mov	r25, r24
    1a38:	98 7f       	andi	r25, 0xF8	; 248
    1a3a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a3c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a3e:	83 81       	ldd	r24, Z+3	; 0x03
    1a40:	89 2b       	or	r24, r25
    1a42:	8c 93       	st	X, r24

		/*Insert the required initial time value*/
		TCNT2 = config->Timer_Initial_Time_Value;
    1a44:	a4 e4       	ldi	r26, 0x44	; 68
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	ea 81       	ldd	r30, Y+2	; 0x02
    1a4a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a4c:	85 81       	ldd	r24, Z+5	; 0x05
    1a4e:	8c 93       	st	X, r24

		if ((config->mode) == COMPARE)
    1a50:	ea 81       	ldd	r30, Y+2	; 0x02
    1a52:	fb 81       	ldd	r31, Y+3	; 0x03
    1a54:	82 81       	ldd	r24, Z+2	; 0x02
    1a56:	82 30       	cpi	r24, 0x02	; 2
    1a58:	89 f5       	brne	.+98     	; 0x1abc <TIMER_init+0x338>
		{

			/*Insert the required mode */
			CLEAR_BIT(TCCR2, WGM20);
    1a5a:	a5 e4       	ldi	r26, 0x45	; 69
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e5 e4       	ldi	r30, 0x45	; 69
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	8f 7b       	andi	r24, 0xBF	; 191
    1a66:	8c 93       	st	X, r24
			SET_BIT(TCCR2, WGM21);
    1a68:	a5 e4       	ldi	r26, 0x45	; 69
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e5 e4       	ldi	r30, 0x45	; 69
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	88 60       	ori	r24, 0x08	; 8
    1a74:	8c 93       	st	X, r24

			/*Insert the required compare time value.*/
			OCR2 = config->Timer_Compare_Time_Value;
    1a76:	a3 e4       	ldi	r26, 0x43	; 67
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a7c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a7e:	80 81       	ld	r24, Z
    1a80:	91 81       	ldd	r25, Z+1	; 0x01
    1a82:	8c 93       	st	X, r24

			/*Insert the required the compare output mode*/
			TCCR2 = (TCCR2 & 0xCF) | ((config->compareMatch)<<4);
    1a84:	a5 e4       	ldi	r26, 0x45	; 69
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e5 e4       	ldi	r30, 0x45	; 69
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	28 2f       	mov	r18, r24
    1a90:	2f 7c       	andi	r18, 0xCF	; 207
    1a92:	ea 81       	ldd	r30, Y+2	; 0x02
    1a94:	fb 81       	ldd	r31, Y+3	; 0x03
    1a96:	84 81       	ldd	r24, Z+4	; 0x04
    1a98:	88 2f       	mov	r24, r24
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	82 95       	swap	r24
    1a9e:	92 95       	swap	r25
    1aa0:	90 7f       	andi	r25, 0xF0	; 240
    1aa2:	98 27       	eor	r25, r24
    1aa4:	80 7f       	andi	r24, 0xF0	; 240
    1aa6:	98 27       	eor	r25, r24
    1aa8:	82 2b       	or	r24, r18
    1aaa:	8c 93       	st	X, r24


			/*Enable interrupt for compare mode*/
			SET_BIT(TIMSK, OCIE2);
    1aac:	a9 e5       	ldi	r26, 0x59	; 89
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e9 e5       	ldi	r30, 0x59	; 89
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	80 68       	ori	r24, 0x80	; 128
    1ab8:	8c 93       	st	X, r24
    1aba:	1a c0       	rjmp	.+52     	; 0x1af0 <TIMER_init+0x36c>
		}
		else if((config->mode) == NORMAL_MODE)
    1abc:	ea 81       	ldd	r30, Y+2	; 0x02
    1abe:	fb 81       	ldd	r31, Y+3	; 0x03
    1ac0:	82 81       	ldd	r24, Z+2	; 0x02
    1ac2:	88 23       	and	r24, r24
    1ac4:	a9 f4       	brne	.+42     	; 0x1af0 <TIMER_init+0x36c>
		{
			/*The required mode */
			CLEAR_BIT(TCCR2, WGM20);
    1ac6:	a5 e4       	ldi	r26, 0x45	; 69
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e5 e4       	ldi	r30, 0x45	; 69
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	8f 7b       	andi	r24, 0xBF	; 191
    1ad2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2, WGM21);
    1ad4:	a5 e4       	ldi	r26, 0x45	; 69
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e5 e4       	ldi	r30, 0x45	; 69
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	87 7f       	andi	r24, 0xF7	; 247
    1ae0:	8c 93       	st	X, r24

			/*Enable interrupt for normal mode*/
			SET_BIT(TIMSK, TOIE2);
    1ae2:	a9 e5       	ldi	r26, 0x59	; 89
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e9 e5       	ldi	r30, 0x59	; 89
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	80 64       	ori	r24, 0x40	; 64
    1aee:	8c 93       	st	X, r24
		}
	}

	return;
}
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <TIMER_Deinit>:

/*Description:
 *   1- Insert the required timer to stop it
 *  */
void TIMER_Deinit(uint8 timer_type)
{
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	0f 92       	push	r0
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	89 83       	std	Y+1, r24	; 0x01
	if(timer_type == TIMER_0)
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	88 23       	and	r24, r24
    1b0c:	39 f4       	brne	.+14     	; 0x1b1c <TIMER_Deinit+0x20>
	{
		TCCR0 = 0;
    1b0e:	e3 e5       	ldi	r30, 0x53	; 83
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	10 82       	st	Z, r1
		TIMSK = 0;
    1b14:	e9 e5       	ldi	r30, 0x59	; 89
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	10 82       	st	Z, r1
    1b1a:	1a c0       	rjmp	.+52     	; 0x1b50 <TIMER_Deinit+0x54>
	}
	else if(timer_type == TIMER_1)
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	81 30       	cpi	r24, 0x01	; 1
    1b20:	71 f4       	brne	.+28     	; 0x1b3e <TIMER_Deinit+0x42>
	{
		TCCR1A = 0;
    1b22:	ef e4       	ldi	r30, 0x4F	; 79
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	10 82       	st	Z, r1
		TCCR1B = 0;
    1b28:	ee e4       	ldi	r30, 0x4E	; 78
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	10 82       	st	Z, r1
		OCR1A = 0;
    1b2e:	ea e4       	ldi	r30, 0x4A	; 74
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	11 82       	std	Z+1, r1	; 0x01
    1b34:	10 82       	st	Z, r1
		TIMSK = 0;
    1b36:	e9 e5       	ldi	r30, 0x59	; 89
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	10 82       	st	Z, r1
    1b3c:	09 c0       	rjmp	.+18     	; 0x1b50 <TIMER_Deinit+0x54>
	}
	else if (timer_type == TIMER_2)
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	82 30       	cpi	r24, 0x02	; 2
    1b42:	31 f4       	brne	.+12     	; 0x1b50 <TIMER_Deinit+0x54>
	{
		TCCR2 = 0;
    1b44:	e5 e4       	ldi	r30, 0x45	; 69
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	10 82       	st	Z, r1
		TIMSK = 0;
    1b4a:	e9 e5       	ldi	r30, 0x59	; 89
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	10 82       	st	Z, r1
	}

}
    1b50:	0f 90       	pop	r0
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <TIMER_SetCallBack>:

/*Description:
 *   Function to set call back function address for timer 0.
 * */
void TIMER_SetCallBack(void(*a_ptr)(void))
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <TIMER_SetCallBack+0x6>
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	9a 83       	std	Y+2, r25	; 0x02
    1b64:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBack_ptr = (void*)a_ptr;
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6a:	90 93 85 00 	sts	0x0085, r25
    1b6e:	80 93 84 00 	sts	0x0084, r24
}
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <TIMER1_SetCallBack>:

/*Description:
 *   Function to set call back function address for timer 1.
 * */
void TIMER1_SetCallBack(void(*a_ptr)(void))
{
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <TIMER1_SetCallBack+0x6>
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	9a 83       	std	Y+2, r25	; 0x02
    1b88:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBack_ptr1 = (void*)a_ptr;
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8e:	90 93 87 00 	sts	0x0087, r25
    1b92:	80 93 86 00 	sts	0x0086, r24
}
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <TIMER2_SetCallBack>:

/*Description:
 *   Function to set call back function address for timer 2.
 * */
void TIMER2_SetCallBack(void(*a_ptr)(void))
{
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <TIMER2_SetCallBack+0x6>
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	9a 83       	std	Y+2, r25	; 0x02
    1bac:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBack_ptr2 = (void*)a_ptr;
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb2:	90 93 89 00 	sts	0x0089, r25
    1bb6:	80 93 88 00 	sts	0x0088, r24
}
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <USART_init>:
 *	  1- Insert the frame format as parity mode, no of stop bits, no of data bits.
 *	  2- Insert UART baud rate.
 *	  3- Enable UART.
 * */
void USART_init( const USART_configType *config)
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <USART_init+0x6>
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <USART_init+0x8>
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	9c 83       	std	Y+4, r25	; 0x04
    1bd2:	8b 83       	std	Y+3, r24	; 0x03

	uint16 ubrr_value = 0;
    1bd4:	1a 82       	std	Y+2, r1	; 0x02
    1bd6:	19 82       	std	Y+1, r1	; 0x01

	/*For double transmission speed, this bit has effect for the asynchronous operation*/
	SET_BIT(UCSRA,U2X);
    1bd8:	ab e2       	ldi	r26, 0x2B	; 43
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	eb e2       	ldi	r30, 0x2B	; 43
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	82 60       	ori	r24, 0x02	; 2
    1be4:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * Insert no of bits data mode (UCSZ2).
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	SET_BIT(UCSRB, RXEN);
    1be6:	aa e2       	ldi	r26, 0x2A	; 42
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	ea e2       	ldi	r30, 0x2A	; 42
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	80 61       	ori	r24, 0x10	; 16
    1bf2:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
    1bf4:	aa e2       	ldi	r26, 0x2A	; 42
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	ea e2       	ldi	r30, 0x2A	; 42
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	88 60       	ori	r24, 0x08	; 8
    1c00:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0xFB) | (((config->data_bit) & 0x04)<<2);
    1c02:	aa e2       	ldi	r26, 0x2A	; 42
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	ea e2       	ldi	r30, 0x2A	; 42
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	2b 7f       	andi	r18, 0xFB	; 251
    1c10:	eb 81       	ldd	r30, Y+3	; 0x03
    1c12:	fc 81       	ldd	r31, Y+4	; 0x04
    1c14:	86 81       	ldd	r24, Z+6	; 0x06
    1c16:	88 2f       	mov	r24, r24
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	84 70       	andi	r24, 0x04	; 4
    1c1c:	90 70       	andi	r25, 0x00	; 0
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	82 2b       	or	r24, r18
    1c28:	8c 93       	st	X, r24
	 * Insert parity mode (UPM1:0).
	 * Insert no of stop bits (USBS).
	 * Insert no of data bits (UCSZ1:0).
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (UCSRC & 0xCF) | ((config->parity)<<4);
    1c2a:	a0 e4       	ldi	r26, 0x40	; 64
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e0 e4       	ldi	r30, 0x40	; 64
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	28 2f       	mov	r18, r24
    1c36:	2f 7c       	andi	r18, 0xCF	; 207
    1c38:	eb 81       	ldd	r30, Y+3	; 0x03
    1c3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c3c:	84 81       	ldd	r24, Z+4	; 0x04
    1c3e:	88 2f       	mov	r24, r24
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	82 95       	swap	r24
    1c44:	92 95       	swap	r25
    1c46:	90 7f       	andi	r25, 0xF0	; 240
    1c48:	98 27       	eor	r25, r24
    1c4a:	80 7f       	andi	r24, 0xF0	; 240
    1c4c:	98 27       	eor	r25, r24
    1c4e:	82 2b       	or	r24, r18
    1c50:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((config->stop_bit)<<3);
    1c52:	a0 e4       	ldi	r26, 0x40	; 64
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e0 e4       	ldi	r30, 0x40	; 64
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	27 7f       	andi	r18, 0xF7	; 247
    1c60:	eb 81       	ldd	r30, Y+3	; 0x03
    1c62:	fc 81       	ldd	r31, Y+4	; 0x04
    1c64:	85 81       	ldd	r24, Z+5	; 0x05
    1c66:	88 2f       	mov	r24, r24
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	82 2b       	or	r24, r18
    1c78:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | (((config->data_bit) & 0x03)<<1);
    1c7a:	a0 e4       	ldi	r26, 0x40	; 64
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e0 e4       	ldi	r30, 0x40	; 64
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	28 2f       	mov	r18, r24
    1c86:	29 7f       	andi	r18, 0xF9	; 249
    1c88:	eb 81       	ldd	r30, Y+3	; 0x03
    1c8a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c8c:	86 81       	ldd	r24, Z+6	; 0x06
    1c8e:	88 2f       	mov	r24, r24
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	83 70       	andi	r24, 0x03	; 3
    1c94:	90 70       	andi	r25, 0x00	; 0
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	82 2b       	or	r24, r18
    1c9c:	8c 93       	st	X, r24

	SET_BIT(UCSRC, RXEN);
    1c9e:	a0 e4       	ldi	r26, 0x40	; 64
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e0 e4       	ldi	r30, 0x40	; 64
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	80 61       	ori	r24, 0x10	; 16
    1caa:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((config->baud_rate) * 8UL))) - 1);
    1cac:	eb 81       	ldd	r30, Y+3	; 0x03
    1cae:	fc 81       	ldd	r31, Y+4	; 0x04
    1cb0:	80 81       	ld	r24, Z
    1cb2:	91 81       	ldd	r25, Z+1	; 0x01
    1cb4:	a2 81       	ldd	r26, Z+2	; 0x02
    1cb6:	b3 81       	ldd	r27, Z+3	; 0x03
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	aa 1f       	adc	r26, r26
    1cbe:	bb 1f       	adc	r27, r27
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	aa 1f       	adc	r26, r26
    1cc6:	bb 1f       	adc	r27, r27
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	aa 1f       	adc	r26, r26
    1cce:	bb 1f       	adc	r27, r27
    1cd0:	9c 01       	movw	r18, r24
    1cd2:	ad 01       	movw	r20, r26
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	92 e1       	ldi	r25, 0x12	; 18
    1cd8:	aa e7       	ldi	r26, 0x7A	; 122
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	bc 01       	movw	r22, r24
    1cde:	cd 01       	movw	r24, r26
    1ce0:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__udivmodsi4>
    1ce4:	da 01       	movw	r26, r20
    1ce6:	c9 01       	movw	r24, r18
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	9a 83       	std	Y+2, r25	; 0x02
    1cec:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/

	UBRRH = ubrr_value>>8;
    1cee:	e0 e4       	ldi	r30, 0x40	; 64
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf6:	89 2f       	mov	r24, r25
    1cf8:	99 27       	eor	r25, r25
    1cfa:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1cfc:	e9 e2       	ldi	r30, 0x29	; 41
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	80 83       	st	Z, r24
	return;
}
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <USART_sendByte>:
/*
 * Description:
 * 		Functional responsible for send byte to another UART device.
 * */
void USART_sendByte(const uint8 data)
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	0f 92       	push	r0
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA, UDRE)){}
    1d1e:	eb e2       	ldi	r30, 0x2B	; 43
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	88 2f       	mov	r24, r24
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	80 72       	andi	r24, 0x20	; 32
    1d2a:	90 70       	andi	r25, 0x00	; 0
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	b9 f3       	breq	.-18     	; 0x1d1e <USART_sendByte+0xc>

	/*
	 * The Transmit Data Buffer Register (TXB) will be the destination
	 * for data written to the UDR Register location.
	 * */
	UDR = data;
    1d30:	ec e2       	ldi	r30, 0x2C	; 44
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	80 83       	st	Z, r24

	return;
}
    1d38:	0f 90       	pop	r0
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <USART_receiveByte>:
/*
 * Description:
 * 		Functional responsible for receive byte to another UART device.
 * */
uint8 USART_receiveByte(void)
{
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
	/*
	 *  RXC flag is set when the UART receive data so wait until this flag is set to one
	 * */
	while(BIT_IS_CLEAR(UCSRA, RXC)){}
    1d48:	eb e2       	ldi	r30, 0x2B	; 43
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	88 23       	and	r24, r24
    1d50:	dc f7       	brge	.-10     	; 0x1d48 <USART_receiveByte+0x8>

	/*
	 * Reading the UDR Register location will return the contents of the Receive Data
	 * Buffer Register (RXB).
	 * */
	return UDR;
    1d52:	ec e2       	ldi	r30, 0x2C	; 44
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
}
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <USART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void USART_sendString(const char *str_ptr)
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <USART_sendString+0x6>
    1d64:	0f 92       	push	r0
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	9b 83       	std	Y+3, r25	; 0x03
    1d6c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d6e:	19 82       	std	Y+1, r1	; 0x01
    1d70:	0e c0       	rjmp	.+28     	; 0x1d8e <USART_sendString+0x30>

	while(str_ptr[i] != '\0')
	{
		USART_sendByte(str_ptr[i]);
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	e2 0f       	add	r30, r18
    1d80:	f3 1f       	adc	r31, r19
    1d82:	80 81       	ld	r24, Z
    1d84:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <USART_sendByte>
		i++;
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	8f 5f       	subi	r24, 0xFF	; 255
    1d8c:	89 83       	std	Y+1, r24	; 0x01
 */
void USART_sendString(const char *str_ptr)
{
	uint8 i = 0;

	while(str_ptr[i] != '\0')
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	9b 81       	ldd	r25, Y+3	; 0x03
    1d98:	fc 01       	movw	r30, r24
    1d9a:	e2 0f       	add	r30, r18
    1d9c:	f3 1f       	adc	r31, r19
    1d9e:	80 81       	ld	r24, Z
    1da0:	88 23       	and	r24, r24
    1da2:	39 f7       	brne	.-50     	; 0x1d72 <USART_sendString+0x14>
		USART_sendByte(str_ptr[i]);
		i++;
	}

	return;
}
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <USART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void USART_receiveString(char *str_ptr)
{
    1db0:	0f 93       	push	r16
    1db2:	1f 93       	push	r17
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <USART_receiveString+0xa>
    1dba:	0f 92       	push	r0
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	9b 83       	std	Y+3, r25	; 0x03
    1dc2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1dc4:	19 82       	std	Y+1, r1	; 0x01

	str_ptr[i] = USART_receiveByte();
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd0:	8c 01       	movw	r16, r24
    1dd2:	02 0f       	add	r16, r18
    1dd4:	13 1f       	adc	r17, r19
    1dd6:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <USART_receiveByte>
    1dda:	f8 01       	movw	r30, r16
    1ddc:	80 83       	st	Z, r24
    1dde:	0f c0       	rjmp	.+30     	; 0x1dfe <USART_receiveString+0x4e>

	while(str_ptr[i] != '#')
	{
		i++;
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	8f 5f       	subi	r24, 0xFF	; 255
    1de4:	89 83       	std	Y+1, r24	; 0x01
		str_ptr[i] = USART_receiveByte();
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	9b 81       	ldd	r25, Y+3	; 0x03
    1df0:	8c 01       	movw	r16, r24
    1df2:	02 0f       	add	r16, r18
    1df4:	13 1f       	adc	r17, r19
    1df6:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <USART_receiveByte>
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	80 83       	st	Z, r24
{
	uint8 i = 0;

	str_ptr[i] = USART_receiveByte();

	while(str_ptr[i] != '#')
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	9b 81       	ldd	r25, Y+3	; 0x03
    1e08:	fc 01       	movw	r30, r24
    1e0a:	e2 0f       	add	r30, r18
    1e0c:	f3 1f       	adc	r31, r19
    1e0e:	80 81       	ld	r24, Z
    1e10:	83 32       	cpi	r24, 0x23	; 35
    1e12:	31 f7       	brne	.-52     	; 0x1de0 <USART_receiveString+0x30>
	{
		i++;
		str_ptr[i] = USART_receiveByte();
	}

	str_ptr[i] = '\0';
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e1e:	fc 01       	movw	r30, r24
    1e20:	e2 0f       	add	r30, r18
    1e22:	f3 1f       	adc	r31, r19
    1e24:	10 82       	st	Z, r1
	return;
}
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	08 95       	ret

00001e36 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <GPIO_setupPinDirection+0x6>
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <GPIO_setupPinDirection+0x8>
    1e3e:	0f 92       	push	r0
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	89 83       	std	Y+1, r24	; 0x01
    1e46:	6a 83       	std	Y+2, r22	; 0x02
    1e48:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	88 30       	cpi	r24, 0x08	; 8
    1e4e:	08 f0       	brcs	.+2      	; 0x1e52 <GPIO_setupPinDirection+0x1c>
    1e50:	d5 c0       	rjmp	.+426    	; 0x1ffc <GPIO_setupPinDirection+0x1c6>
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	84 30       	cpi	r24, 0x04	; 4
    1e56:	08 f0       	brcs	.+2      	; 0x1e5a <GPIO_setupPinDirection+0x24>
    1e58:	d1 c0       	rjmp	.+418    	; 0x1ffc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	3d 83       	std	Y+5, r19	; 0x05
    1e62:	2c 83       	std	Y+4, r18	; 0x04
    1e64:	8c 81       	ldd	r24, Y+4	; 0x04
    1e66:	9d 81       	ldd	r25, Y+5	; 0x05
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <GPIO_setupPinDirection+0x3a>
    1e6e:	43 c0       	rjmp	.+134    	; 0x1ef6 <GPIO_setupPinDirection+0xc0>
    1e70:	2c 81       	ldd	r18, Y+4	; 0x04
    1e72:	3d 81       	ldd	r19, Y+5	; 0x05
    1e74:	22 30       	cpi	r18, 0x02	; 2
    1e76:	31 05       	cpc	r19, r1
    1e78:	2c f4       	brge	.+10     	; 0x1e84 <GPIO_setupPinDirection+0x4e>
    1e7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	71 f0       	breq	.+28     	; 0x1e9e <GPIO_setupPinDirection+0x68>
    1e82:	bc c0       	rjmp	.+376    	; 0x1ffc <GPIO_setupPinDirection+0x1c6>
    1e84:	2c 81       	ldd	r18, Y+4	; 0x04
    1e86:	3d 81       	ldd	r19, Y+5	; 0x05
    1e88:	22 30       	cpi	r18, 0x02	; 2
    1e8a:	31 05       	cpc	r19, r1
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <GPIO_setupPinDirection+0x5a>
    1e8e:	5f c0       	rjmp	.+190    	; 0x1f4e <GPIO_setupPinDirection+0x118>
    1e90:	8c 81       	ldd	r24, Y+4	; 0x04
    1e92:	9d 81       	ldd	r25, Y+5	; 0x05
    1e94:	83 30       	cpi	r24, 0x03	; 3
    1e96:	91 05       	cpc	r25, r1
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <GPIO_setupPinDirection+0x66>
    1e9a:	85 c0       	rjmp	.+266    	; 0x1fa6 <GPIO_setupPinDirection+0x170>
    1e9c:	af c0       	rjmp	.+350    	; 0x1ffc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	a1 f4       	brne	.+40     	; 0x1ecc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1ea4:	aa e3       	ldi	r26, 0x3A	; 58
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	ea e3       	ldi	r30, 0x3A	; 58
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	48 2f       	mov	r20, r24
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	02 2e       	mov	r0, r18
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <GPIO_setupPinDirection+0x8c>
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	0a 94       	dec	r0
    1ec4:	e2 f7       	brpl	.-8      	; 0x1ebe <GPIO_setupPinDirection+0x88>
    1ec6:	84 2b       	or	r24, r20
    1ec8:	8c 93       	st	X, r24
    1eca:	98 c0       	rjmp	.+304    	; 0x1ffc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1ecc:	aa e3       	ldi	r26, 0x3A	; 58
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	ea e3       	ldi	r30, 0x3A	; 58
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	48 2f       	mov	r20, r24
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	02 2e       	mov	r0, r18
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <GPIO_setupPinDirection+0xb4>
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	0a 94       	dec	r0
    1eec:	e2 f7       	brpl	.-8      	; 0x1ee6 <GPIO_setupPinDirection+0xb0>
    1eee:	80 95       	com	r24
    1ef0:	84 23       	and	r24, r20
    1ef2:	8c 93       	st	X, r24
    1ef4:	83 c0       	rjmp	.+262    	; 0x1ffc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	81 30       	cpi	r24, 0x01	; 1
    1efa:	a1 f4       	brne	.+40     	; 0x1f24 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1efc:	a7 e3       	ldi	r26, 0x37	; 55
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	e7 e3       	ldi	r30, 0x37	; 55
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	48 2f       	mov	r20, r24
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	02 2e       	mov	r0, r18
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <GPIO_setupPinDirection+0xe4>
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	0a 94       	dec	r0
    1f1c:	e2 f7       	brpl	.-8      	; 0x1f16 <GPIO_setupPinDirection+0xe0>
    1f1e:	84 2b       	or	r24, r20
    1f20:	8c 93       	st	X, r24
    1f22:	6c c0       	rjmp	.+216    	; 0x1ffc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1f24:	a7 e3       	ldi	r26, 0x37	; 55
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e7 e3       	ldi	r30, 0x37	; 55
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	48 2f       	mov	r20, r24
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	02 2e       	mov	r0, r18
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <GPIO_setupPinDirection+0x10c>
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	0a 94       	dec	r0
    1f44:	e2 f7       	brpl	.-8      	; 0x1f3e <GPIO_setupPinDirection+0x108>
    1f46:	80 95       	com	r24
    1f48:	84 23       	and	r24, r20
    1f4a:	8c 93       	st	X, r24
    1f4c:	57 c0       	rjmp	.+174    	; 0x1ffc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	81 30       	cpi	r24, 0x01	; 1
    1f52:	a1 f4       	brne	.+40     	; 0x1f7c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1f54:	a4 e3       	ldi	r26, 0x34	; 52
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e4 e3       	ldi	r30, 0x34	; 52
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	48 2f       	mov	r20, r24
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	02 2e       	mov	r0, r18
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <GPIO_setupPinDirection+0x13c>
    1f6e:	88 0f       	add	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	0a 94       	dec	r0
    1f74:	e2 f7       	brpl	.-8      	; 0x1f6e <GPIO_setupPinDirection+0x138>
    1f76:	84 2b       	or	r24, r20
    1f78:	8c 93       	st	X, r24
    1f7a:	40 c0       	rjmp	.+128    	; 0x1ffc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1f7c:	a4 e3       	ldi	r26, 0x34	; 52
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e4 e3       	ldi	r30, 0x34	; 52
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	48 2f       	mov	r20, r24
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	02 2e       	mov	r0, r18
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <GPIO_setupPinDirection+0x164>
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	0a 94       	dec	r0
    1f9c:	e2 f7       	brpl	.-8      	; 0x1f96 <GPIO_setupPinDirection+0x160>
    1f9e:	80 95       	com	r24
    1fa0:	84 23       	and	r24, r20
    1fa2:	8c 93       	st	X, r24
    1fa4:	2b c0       	rjmp	.+86     	; 0x1ffc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	81 30       	cpi	r24, 0x01	; 1
    1faa:	a1 f4       	brne	.+40     	; 0x1fd4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1fac:	a1 e3       	ldi	r26, 0x31	; 49
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e1 e3       	ldi	r30, 0x31	; 49
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	48 2f       	mov	r20, r24
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	02 2e       	mov	r0, r18
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <GPIO_setupPinDirection+0x194>
    1fc6:	88 0f       	add	r24, r24
    1fc8:	99 1f       	adc	r25, r25
    1fca:	0a 94       	dec	r0
    1fcc:	e2 f7       	brpl	.-8      	; 0x1fc6 <GPIO_setupPinDirection+0x190>
    1fce:	84 2b       	or	r24, r20
    1fd0:	8c 93       	st	X, r24
    1fd2:	14 c0       	rjmp	.+40     	; 0x1ffc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1fd4:	a1 e3       	ldi	r26, 0x31	; 49
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e1 e3       	ldi	r30, 0x31	; 49
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	48 2f       	mov	r20, r24
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	02 2e       	mov	r0, r18
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <GPIO_setupPinDirection+0x1bc>
    1fee:	88 0f       	add	r24, r24
    1ff0:	99 1f       	adc	r25, r25
    1ff2:	0a 94       	dec	r0
    1ff4:	e2 f7       	brpl	.-8      	; 0x1fee <GPIO_setupPinDirection+0x1b8>
    1ff6:	80 95       	com	r24
    1ff8:	84 23       	and	r24, r20
    1ffa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	00 d0       	rcall	.+0      	; 0x2012 <GPIO_writePin+0x6>
    2012:	00 d0       	rcall	.+0      	; 0x2014 <GPIO_writePin+0x8>
    2014:	0f 92       	push	r0
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	89 83       	std	Y+1, r24	; 0x01
    201c:	6a 83       	std	Y+2, r22	; 0x02
    201e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	88 30       	cpi	r24, 0x08	; 8
    2024:	08 f0       	brcs	.+2      	; 0x2028 <GPIO_writePin+0x1c>
    2026:	d5 c0       	rjmp	.+426    	; 0x21d2 <GPIO_writePin+0x1c6>
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	84 30       	cpi	r24, 0x04	; 4
    202c:	08 f0       	brcs	.+2      	; 0x2030 <GPIO_writePin+0x24>
    202e:	d1 c0       	rjmp	.+418    	; 0x21d2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	28 2f       	mov	r18, r24
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	3d 83       	std	Y+5, r19	; 0x05
    2038:	2c 83       	std	Y+4, r18	; 0x04
    203a:	8c 81       	ldd	r24, Y+4	; 0x04
    203c:	9d 81       	ldd	r25, Y+5	; 0x05
    203e:	81 30       	cpi	r24, 0x01	; 1
    2040:	91 05       	cpc	r25, r1
    2042:	09 f4       	brne	.+2      	; 0x2046 <GPIO_writePin+0x3a>
    2044:	43 c0       	rjmp	.+134    	; 0x20cc <GPIO_writePin+0xc0>
    2046:	2c 81       	ldd	r18, Y+4	; 0x04
    2048:	3d 81       	ldd	r19, Y+5	; 0x05
    204a:	22 30       	cpi	r18, 0x02	; 2
    204c:	31 05       	cpc	r19, r1
    204e:	2c f4       	brge	.+10     	; 0x205a <GPIO_writePin+0x4e>
    2050:	8c 81       	ldd	r24, Y+4	; 0x04
    2052:	9d 81       	ldd	r25, Y+5	; 0x05
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	71 f0       	breq	.+28     	; 0x2074 <GPIO_writePin+0x68>
    2058:	bc c0       	rjmp	.+376    	; 0x21d2 <GPIO_writePin+0x1c6>
    205a:	2c 81       	ldd	r18, Y+4	; 0x04
    205c:	3d 81       	ldd	r19, Y+5	; 0x05
    205e:	22 30       	cpi	r18, 0x02	; 2
    2060:	31 05       	cpc	r19, r1
    2062:	09 f4       	brne	.+2      	; 0x2066 <GPIO_writePin+0x5a>
    2064:	5f c0       	rjmp	.+190    	; 0x2124 <GPIO_writePin+0x118>
    2066:	8c 81       	ldd	r24, Y+4	; 0x04
    2068:	9d 81       	ldd	r25, Y+5	; 0x05
    206a:	83 30       	cpi	r24, 0x03	; 3
    206c:	91 05       	cpc	r25, r1
    206e:	09 f4       	brne	.+2      	; 0x2072 <GPIO_writePin+0x66>
    2070:	85 c0       	rjmp	.+266    	; 0x217c <GPIO_writePin+0x170>
    2072:	af c0       	rjmp	.+350    	; 0x21d2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	81 30       	cpi	r24, 0x01	; 1
    2078:	a1 f4       	brne	.+40     	; 0x20a2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    207a:	ab e3       	ldi	r26, 0x3B	; 59
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	eb e3       	ldi	r30, 0x3B	; 59
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	48 2f       	mov	r20, r24
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	28 2f       	mov	r18, r24
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	02 2e       	mov	r0, r18
    2092:	02 c0       	rjmp	.+4      	; 0x2098 <GPIO_writePin+0x8c>
    2094:	88 0f       	add	r24, r24
    2096:	99 1f       	adc	r25, r25
    2098:	0a 94       	dec	r0
    209a:	e2 f7       	brpl	.-8      	; 0x2094 <GPIO_writePin+0x88>
    209c:	84 2b       	or	r24, r20
    209e:	8c 93       	st	X, r24
    20a0:	98 c0       	rjmp	.+304    	; 0x21d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    20a2:	ab e3       	ldi	r26, 0x3B	; 59
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	eb e3       	ldi	r30, 0x3B	; 59
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	48 2f       	mov	r20, r24
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	28 2f       	mov	r18, r24
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	02 2e       	mov	r0, r18
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <GPIO_writePin+0xb4>
    20bc:	88 0f       	add	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	0a 94       	dec	r0
    20c2:	e2 f7       	brpl	.-8      	; 0x20bc <GPIO_writePin+0xb0>
    20c4:	80 95       	com	r24
    20c6:	84 23       	and	r24, r20
    20c8:	8c 93       	st	X, r24
    20ca:	83 c0       	rjmp	.+262    	; 0x21d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	81 30       	cpi	r24, 0x01	; 1
    20d0:	a1 f4       	brne	.+40     	; 0x20fa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    20d2:	a8 e3       	ldi	r26, 0x38	; 56
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e8 e3       	ldi	r30, 0x38	; 56
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	48 2f       	mov	r20, r24
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	02 2e       	mov	r0, r18
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <GPIO_writePin+0xe4>
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	0a 94       	dec	r0
    20f2:	e2 f7       	brpl	.-8      	; 0x20ec <GPIO_writePin+0xe0>
    20f4:	84 2b       	or	r24, r20
    20f6:	8c 93       	st	X, r24
    20f8:	6c c0       	rjmp	.+216    	; 0x21d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    20fa:	a8 e3       	ldi	r26, 0x38	; 56
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e8 e3       	ldi	r30, 0x38	; 56
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	48 2f       	mov	r20, r24
    2106:	8a 81       	ldd	r24, Y+2	; 0x02
    2108:	28 2f       	mov	r18, r24
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	02 2e       	mov	r0, r18
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <GPIO_writePin+0x10c>
    2114:	88 0f       	add	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	0a 94       	dec	r0
    211a:	e2 f7       	brpl	.-8      	; 0x2114 <GPIO_writePin+0x108>
    211c:	80 95       	com	r24
    211e:	84 23       	and	r24, r20
    2120:	8c 93       	st	X, r24
    2122:	57 c0       	rjmp	.+174    	; 0x21d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	81 30       	cpi	r24, 0x01	; 1
    2128:	a1 f4       	brne	.+40     	; 0x2152 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    212a:	a5 e3       	ldi	r26, 0x35	; 53
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e5 e3       	ldi	r30, 0x35	; 53
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	48 2f       	mov	r20, r24
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	02 2e       	mov	r0, r18
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <GPIO_writePin+0x13c>
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	0a 94       	dec	r0
    214a:	e2 f7       	brpl	.-8      	; 0x2144 <GPIO_writePin+0x138>
    214c:	84 2b       	or	r24, r20
    214e:	8c 93       	st	X, r24
    2150:	40 c0       	rjmp	.+128    	; 0x21d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2152:	a5 e3       	ldi	r26, 0x35	; 53
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e5 e3       	ldi	r30, 0x35	; 53
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	48 2f       	mov	r20, r24
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	02 2e       	mov	r0, r18
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <GPIO_writePin+0x164>
    216c:	88 0f       	add	r24, r24
    216e:	99 1f       	adc	r25, r25
    2170:	0a 94       	dec	r0
    2172:	e2 f7       	brpl	.-8      	; 0x216c <GPIO_writePin+0x160>
    2174:	80 95       	com	r24
    2176:	84 23       	and	r24, r20
    2178:	8c 93       	st	X, r24
    217a:	2b c0       	rjmp	.+86     	; 0x21d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	81 30       	cpi	r24, 0x01	; 1
    2180:	a1 f4       	brne	.+40     	; 0x21aa <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2182:	a2 e3       	ldi	r26, 0x32	; 50
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e2 e3       	ldi	r30, 0x32	; 50
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	48 2f       	mov	r20, r24
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	28 2f       	mov	r18, r24
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	02 2e       	mov	r0, r18
    219a:	02 c0       	rjmp	.+4      	; 0x21a0 <GPIO_writePin+0x194>
    219c:	88 0f       	add	r24, r24
    219e:	99 1f       	adc	r25, r25
    21a0:	0a 94       	dec	r0
    21a2:	e2 f7       	brpl	.-8      	; 0x219c <GPIO_writePin+0x190>
    21a4:	84 2b       	or	r24, r20
    21a6:	8c 93       	st	X, r24
    21a8:	14 c0       	rjmp	.+40     	; 0x21d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    21aa:	a2 e3       	ldi	r26, 0x32	; 50
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	e2 e3       	ldi	r30, 0x32	; 50
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	48 2f       	mov	r20, r24
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	28 2f       	mov	r18, r24
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	02 2e       	mov	r0, r18
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <GPIO_writePin+0x1bc>
    21c4:	88 0f       	add	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	0a 94       	dec	r0
    21ca:	e2 f7       	brpl	.-8      	; 0x21c4 <GPIO_writePin+0x1b8>
    21cc:	80 95       	com	r24
    21ce:	84 23       	and	r24, r20
    21d0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <GPIO_readPin+0x6>
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <GPIO_readPin+0x8>
    21ea:	0f 92       	push	r0
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	8a 83       	std	Y+2, r24	; 0x02
    21f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    21f4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	88 30       	cpi	r24, 0x08	; 8
    21fa:	08 f0       	brcs	.+2      	; 0x21fe <GPIO_readPin+0x1c>
    21fc:	84 c0       	rjmp	.+264    	; 0x2306 <GPIO_readPin+0x124>
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	84 30       	cpi	r24, 0x04	; 4
    2202:	08 f0       	brcs	.+2      	; 0x2206 <GPIO_readPin+0x24>
    2204:	80 c0       	rjmp	.+256    	; 0x2306 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2206:	8a 81       	ldd	r24, Y+2	; 0x02
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	3d 83       	std	Y+5, r19	; 0x05
    220e:	2c 83       	std	Y+4, r18	; 0x04
    2210:	4c 81       	ldd	r20, Y+4	; 0x04
    2212:	5d 81       	ldd	r21, Y+5	; 0x05
    2214:	41 30       	cpi	r20, 0x01	; 1
    2216:	51 05       	cpc	r21, r1
    2218:	79 f1       	breq	.+94     	; 0x2278 <GPIO_readPin+0x96>
    221a:	8c 81       	ldd	r24, Y+4	; 0x04
    221c:	9d 81       	ldd	r25, Y+5	; 0x05
    221e:	82 30       	cpi	r24, 0x02	; 2
    2220:	91 05       	cpc	r25, r1
    2222:	34 f4       	brge	.+12     	; 0x2230 <GPIO_readPin+0x4e>
    2224:	2c 81       	ldd	r18, Y+4	; 0x04
    2226:	3d 81       	ldd	r19, Y+5	; 0x05
    2228:	21 15       	cp	r18, r1
    222a:	31 05       	cpc	r19, r1
    222c:	69 f0       	breq	.+26     	; 0x2248 <GPIO_readPin+0x66>
    222e:	6b c0       	rjmp	.+214    	; 0x2306 <GPIO_readPin+0x124>
    2230:	4c 81       	ldd	r20, Y+4	; 0x04
    2232:	5d 81       	ldd	r21, Y+5	; 0x05
    2234:	42 30       	cpi	r20, 0x02	; 2
    2236:	51 05       	cpc	r21, r1
    2238:	b9 f1       	breq	.+110    	; 0x22a8 <GPIO_readPin+0xc6>
    223a:	8c 81       	ldd	r24, Y+4	; 0x04
    223c:	9d 81       	ldd	r25, Y+5	; 0x05
    223e:	83 30       	cpi	r24, 0x03	; 3
    2240:	91 05       	cpc	r25, r1
    2242:	09 f4       	brne	.+2      	; 0x2246 <GPIO_readPin+0x64>
    2244:	49 c0       	rjmp	.+146    	; 0x22d8 <GPIO_readPin+0xf6>
    2246:	5f c0       	rjmp	.+190    	; 0x2306 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2248:	e9 e3       	ldi	r30, 0x39	; 57
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	28 2f       	mov	r18, r24
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	88 2f       	mov	r24, r24
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	a9 01       	movw	r20, r18
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <GPIO_readPin+0x7e>
    225c:	55 95       	asr	r21
    225e:	47 95       	ror	r20
    2260:	8a 95       	dec	r24
    2262:	e2 f7       	brpl	.-8      	; 0x225c <GPIO_readPin+0x7a>
    2264:	ca 01       	movw	r24, r20
    2266:	81 70       	andi	r24, 0x01	; 1
    2268:	90 70       	andi	r25, 0x00	; 0
    226a:	88 23       	and	r24, r24
    226c:	19 f0       	breq	.+6      	; 0x2274 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	49 c0       	rjmp	.+146    	; 0x2306 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2274:	19 82       	std	Y+1, r1	; 0x01
    2276:	47 c0       	rjmp	.+142    	; 0x2306 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2278:	e6 e3       	ldi	r30, 0x36	; 54
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	28 2f       	mov	r18, r24
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	88 2f       	mov	r24, r24
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	a9 01       	movw	r20, r18
    228a:	02 c0       	rjmp	.+4      	; 0x2290 <GPIO_readPin+0xae>
    228c:	55 95       	asr	r21
    228e:	47 95       	ror	r20
    2290:	8a 95       	dec	r24
    2292:	e2 f7       	brpl	.-8      	; 0x228c <GPIO_readPin+0xaa>
    2294:	ca 01       	movw	r24, r20
    2296:	81 70       	andi	r24, 0x01	; 1
    2298:	90 70       	andi	r25, 0x00	; 0
    229a:	88 23       	and	r24, r24
    229c:	19 f0       	breq	.+6      	; 0x22a4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	31 c0       	rjmp	.+98     	; 0x2306 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    22a4:	19 82       	std	Y+1, r1	; 0x01
    22a6:	2f c0       	rjmp	.+94     	; 0x2306 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    22a8:	e3 e3       	ldi	r30, 0x33	; 51
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	28 2f       	mov	r18, r24
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	88 2f       	mov	r24, r24
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	a9 01       	movw	r20, r18
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <GPIO_readPin+0xde>
    22bc:	55 95       	asr	r21
    22be:	47 95       	ror	r20
    22c0:	8a 95       	dec	r24
    22c2:	e2 f7       	brpl	.-8      	; 0x22bc <GPIO_readPin+0xda>
    22c4:	ca 01       	movw	r24, r20
    22c6:	81 70       	andi	r24, 0x01	; 1
    22c8:	90 70       	andi	r25, 0x00	; 0
    22ca:	88 23       	and	r24, r24
    22cc:	19 f0       	breq	.+6      	; 0x22d4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	89 83       	std	Y+1, r24	; 0x01
    22d2:	19 c0       	rjmp	.+50     	; 0x2306 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    22d4:	19 82       	std	Y+1, r1	; 0x01
    22d6:	17 c0       	rjmp	.+46     	; 0x2306 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    22d8:	e0 e3       	ldi	r30, 0x30	; 48
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	28 2f       	mov	r18, r24
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	88 2f       	mov	r24, r24
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	a9 01       	movw	r20, r18
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <GPIO_readPin+0x10e>
    22ec:	55 95       	asr	r21
    22ee:	47 95       	ror	r20
    22f0:	8a 95       	dec	r24
    22f2:	e2 f7       	brpl	.-8      	; 0x22ec <GPIO_readPin+0x10a>
    22f4:	ca 01       	movw	r24, r20
    22f6:	81 70       	andi	r24, 0x01	; 1
    22f8:	90 70       	andi	r25, 0x00	; 0
    22fa:	88 23       	and	r24, r24
    22fc:	19 f0       	breq	.+6      	; 0x2304 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	89 83       	std	Y+1, r24	; 0x01
    2302:	01 c0       	rjmp	.+2      	; 0x2306 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2304:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2306:	89 81       	ldd	r24, Y+1	; 0x01
}
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	cf 91       	pop	r28
    2314:	df 91       	pop	r29
    2316:	08 95       	ret

00002318 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2318:	df 93       	push	r29
    231a:	cf 93       	push	r28
    231c:	00 d0       	rcall	.+0      	; 0x231e <GPIO_setupPortDirection+0x6>
    231e:	00 d0       	rcall	.+0      	; 0x2320 <GPIO_setupPortDirection+0x8>
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    2324:	89 83       	std	Y+1, r24	; 0x01
    2326:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	84 30       	cpi	r24, 0x04	; 4
    232c:	90 f5       	brcc	.+100    	; 0x2392 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	28 2f       	mov	r18, r24
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	3c 83       	std	Y+4, r19	; 0x04
    2336:	2b 83       	std	Y+3, r18	; 0x03
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	9c 81       	ldd	r25, Y+4	; 0x04
    233c:	81 30       	cpi	r24, 0x01	; 1
    233e:	91 05       	cpc	r25, r1
    2340:	d1 f0       	breq	.+52     	; 0x2376 <GPIO_setupPortDirection+0x5e>
    2342:	2b 81       	ldd	r18, Y+3	; 0x03
    2344:	3c 81       	ldd	r19, Y+4	; 0x04
    2346:	22 30       	cpi	r18, 0x02	; 2
    2348:	31 05       	cpc	r19, r1
    234a:	2c f4       	brge	.+10     	; 0x2356 <GPIO_setupPortDirection+0x3e>
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	9c 81       	ldd	r25, Y+4	; 0x04
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	61 f0       	breq	.+24     	; 0x236c <GPIO_setupPortDirection+0x54>
    2354:	1e c0       	rjmp	.+60     	; 0x2392 <GPIO_setupPortDirection+0x7a>
    2356:	2b 81       	ldd	r18, Y+3	; 0x03
    2358:	3c 81       	ldd	r19, Y+4	; 0x04
    235a:	22 30       	cpi	r18, 0x02	; 2
    235c:	31 05       	cpc	r19, r1
    235e:	81 f0       	breq	.+32     	; 0x2380 <GPIO_setupPortDirection+0x68>
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	9c 81       	ldd	r25, Y+4	; 0x04
    2364:	83 30       	cpi	r24, 0x03	; 3
    2366:	91 05       	cpc	r25, r1
    2368:	81 f0       	breq	.+32     	; 0x238a <GPIO_setupPortDirection+0x72>
    236a:	13 c0       	rjmp	.+38     	; 0x2392 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    236c:	ea e3       	ldi	r30, 0x3A	; 58
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	8a 81       	ldd	r24, Y+2	; 0x02
    2372:	80 83       	st	Z, r24
    2374:	0e c0       	rjmp	.+28     	; 0x2392 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2376:	e7 e3       	ldi	r30, 0x37	; 55
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	80 83       	st	Z, r24
    237e:	09 c0       	rjmp	.+18     	; 0x2392 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2380:	e4 e3       	ldi	r30, 0x34	; 52
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	80 83       	st	Z, r24
    2388:	04 c0       	rjmp	.+8      	; 0x2392 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    238a:	e1 e3       	ldi	r30, 0x31	; 49
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	8a 81       	ldd	r24, Y+2	; 0x02
    2390:	80 83       	st	Z, r24
			break;
		}
	}
}
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	00 d0       	rcall	.+0      	; 0x23a6 <GPIO_writePort+0x6>
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <GPIO_writePort+0x8>
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	89 83       	std	Y+1, r24	; 0x01
    23ae:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	84 30       	cpi	r24, 0x04	; 4
    23b4:	90 f5       	brcc	.+100    	; 0x241a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	28 2f       	mov	r18, r24
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	3c 83       	std	Y+4, r19	; 0x04
    23be:	2b 83       	std	Y+3, r18	; 0x03
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	9c 81       	ldd	r25, Y+4	; 0x04
    23c4:	81 30       	cpi	r24, 0x01	; 1
    23c6:	91 05       	cpc	r25, r1
    23c8:	d1 f0       	breq	.+52     	; 0x23fe <GPIO_writePort+0x5e>
    23ca:	2b 81       	ldd	r18, Y+3	; 0x03
    23cc:	3c 81       	ldd	r19, Y+4	; 0x04
    23ce:	22 30       	cpi	r18, 0x02	; 2
    23d0:	31 05       	cpc	r19, r1
    23d2:	2c f4       	brge	.+10     	; 0x23de <GPIO_writePort+0x3e>
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	00 97       	sbiw	r24, 0x00	; 0
    23da:	61 f0       	breq	.+24     	; 0x23f4 <GPIO_writePort+0x54>
    23dc:	1e c0       	rjmp	.+60     	; 0x241a <GPIO_writePort+0x7a>
    23de:	2b 81       	ldd	r18, Y+3	; 0x03
    23e0:	3c 81       	ldd	r19, Y+4	; 0x04
    23e2:	22 30       	cpi	r18, 0x02	; 2
    23e4:	31 05       	cpc	r19, r1
    23e6:	81 f0       	breq	.+32     	; 0x2408 <GPIO_writePort+0x68>
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	9c 81       	ldd	r25, Y+4	; 0x04
    23ec:	83 30       	cpi	r24, 0x03	; 3
    23ee:	91 05       	cpc	r25, r1
    23f0:	81 f0       	breq	.+32     	; 0x2412 <GPIO_writePort+0x72>
    23f2:	13 c0       	rjmp	.+38     	; 0x241a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    23f4:	eb e3       	ldi	r30, 0x3B	; 59
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	8a 81       	ldd	r24, Y+2	; 0x02
    23fa:	80 83       	st	Z, r24
    23fc:	0e c0       	rjmp	.+28     	; 0x241a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    23fe:	e8 e3       	ldi	r30, 0x38	; 56
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	8a 81       	ldd	r24, Y+2	; 0x02
    2404:	80 83       	st	Z, r24
    2406:	09 c0       	rjmp	.+18     	; 0x241a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2408:	e5 e3       	ldi	r30, 0x35	; 53
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	8a 81       	ldd	r24, Y+2	; 0x02
    240e:	80 83       	st	Z, r24
    2410:	04 c0       	rjmp	.+8      	; 0x241a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2412:	e2 e3       	ldi	r30, 0x32	; 50
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	8a 81       	ldd	r24, Y+2	; 0x02
    2418:	80 83       	st	Z, r24
			break;
		}
	}
}
    241a:	0f 90       	pop	r0
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	08 95       	ret

00002428 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	00 d0       	rcall	.+0      	; 0x242e <GPIO_readPort+0x6>
    242e:	00 d0       	rcall	.+0      	; 0x2430 <GPIO_readPort+0x8>
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
    2434:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2436:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2438:	8a 81       	ldd	r24, Y+2	; 0x02
    243a:	84 30       	cpi	r24, 0x04	; 4
    243c:	90 f5       	brcc	.+100    	; 0x24a2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    243e:	8a 81       	ldd	r24, Y+2	; 0x02
    2440:	28 2f       	mov	r18, r24
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	3c 83       	std	Y+4, r19	; 0x04
    2446:	2b 83       	std	Y+3, r18	; 0x03
    2448:	8b 81       	ldd	r24, Y+3	; 0x03
    244a:	9c 81       	ldd	r25, Y+4	; 0x04
    244c:	81 30       	cpi	r24, 0x01	; 1
    244e:	91 05       	cpc	r25, r1
    2450:	d1 f0       	breq	.+52     	; 0x2486 <GPIO_readPort+0x5e>
    2452:	2b 81       	ldd	r18, Y+3	; 0x03
    2454:	3c 81       	ldd	r19, Y+4	; 0x04
    2456:	22 30       	cpi	r18, 0x02	; 2
    2458:	31 05       	cpc	r19, r1
    245a:	2c f4       	brge	.+10     	; 0x2466 <GPIO_readPort+0x3e>
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	9c 81       	ldd	r25, Y+4	; 0x04
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	61 f0       	breq	.+24     	; 0x247c <GPIO_readPort+0x54>
    2464:	1e c0       	rjmp	.+60     	; 0x24a2 <GPIO_readPort+0x7a>
    2466:	2b 81       	ldd	r18, Y+3	; 0x03
    2468:	3c 81       	ldd	r19, Y+4	; 0x04
    246a:	22 30       	cpi	r18, 0x02	; 2
    246c:	31 05       	cpc	r19, r1
    246e:	81 f0       	breq	.+32     	; 0x2490 <GPIO_readPort+0x68>
    2470:	8b 81       	ldd	r24, Y+3	; 0x03
    2472:	9c 81       	ldd	r25, Y+4	; 0x04
    2474:	83 30       	cpi	r24, 0x03	; 3
    2476:	91 05       	cpc	r25, r1
    2478:	81 f0       	breq	.+32     	; 0x249a <GPIO_readPort+0x72>
    247a:	13 c0       	rjmp	.+38     	; 0x24a2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    247c:	e9 e3       	ldi	r30, 0x39	; 57
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	89 83       	std	Y+1, r24	; 0x01
    2484:	0e c0       	rjmp	.+28     	; 0x24a2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2486:	e6 e3       	ldi	r30, 0x36	; 54
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	89 83       	std	Y+1, r24	; 0x01
    248e:	09 c0       	rjmp	.+18     	; 0x24a2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2490:	e3 e3       	ldi	r30, 0x33	; 51
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	89 83       	std	Y+1, r24	; 0x01
    2498:	04 c0       	rjmp	.+8      	; 0x24a2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    249a:	e0 e3       	ldi	r30, 0x30	; 48
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	0f 90       	pop	r0
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <__udivmodsi4>:
    24b2:	a1 e2       	ldi	r26, 0x21	; 33
    24b4:	1a 2e       	mov	r1, r26
    24b6:	aa 1b       	sub	r26, r26
    24b8:	bb 1b       	sub	r27, r27
    24ba:	fd 01       	movw	r30, r26
    24bc:	0d c0       	rjmp	.+26     	; 0x24d8 <__udivmodsi4_ep>

000024be <__udivmodsi4_loop>:
    24be:	aa 1f       	adc	r26, r26
    24c0:	bb 1f       	adc	r27, r27
    24c2:	ee 1f       	adc	r30, r30
    24c4:	ff 1f       	adc	r31, r31
    24c6:	a2 17       	cp	r26, r18
    24c8:	b3 07       	cpc	r27, r19
    24ca:	e4 07       	cpc	r30, r20
    24cc:	f5 07       	cpc	r31, r21
    24ce:	20 f0       	brcs	.+8      	; 0x24d8 <__udivmodsi4_ep>
    24d0:	a2 1b       	sub	r26, r18
    24d2:	b3 0b       	sbc	r27, r19
    24d4:	e4 0b       	sbc	r30, r20
    24d6:	f5 0b       	sbc	r31, r21

000024d8 <__udivmodsi4_ep>:
    24d8:	66 1f       	adc	r22, r22
    24da:	77 1f       	adc	r23, r23
    24dc:	88 1f       	adc	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	1a 94       	dec	r1
    24e2:	69 f7       	brne	.-38     	; 0x24be <__udivmodsi4_loop>
    24e4:	60 95       	com	r22
    24e6:	70 95       	com	r23
    24e8:	80 95       	com	r24
    24ea:	90 95       	com	r25
    24ec:	9b 01       	movw	r18, r22
    24ee:	ac 01       	movw	r20, r24
    24f0:	bd 01       	movw	r22, r26
    24f2:	cf 01       	movw	r24, r30
    24f4:	08 95       	ret

000024f6 <__prologue_saves__>:
    24f6:	2f 92       	push	r2
    24f8:	3f 92       	push	r3
    24fa:	4f 92       	push	r4
    24fc:	5f 92       	push	r5
    24fe:	6f 92       	push	r6
    2500:	7f 92       	push	r7
    2502:	8f 92       	push	r8
    2504:	9f 92       	push	r9
    2506:	af 92       	push	r10
    2508:	bf 92       	push	r11
    250a:	cf 92       	push	r12
    250c:	df 92       	push	r13
    250e:	ef 92       	push	r14
    2510:	ff 92       	push	r15
    2512:	0f 93       	push	r16
    2514:	1f 93       	push	r17
    2516:	cf 93       	push	r28
    2518:	df 93       	push	r29
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	ca 1b       	sub	r28, r26
    2520:	db 0b       	sbc	r29, r27
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	09 94       	ijmp

0000252e <__epilogue_restores__>:
    252e:	2a 88       	ldd	r2, Y+18	; 0x12
    2530:	39 88       	ldd	r3, Y+17	; 0x11
    2532:	48 88       	ldd	r4, Y+16	; 0x10
    2534:	5f 84       	ldd	r5, Y+15	; 0x0f
    2536:	6e 84       	ldd	r6, Y+14	; 0x0e
    2538:	7d 84       	ldd	r7, Y+13	; 0x0d
    253a:	8c 84       	ldd	r8, Y+12	; 0x0c
    253c:	9b 84       	ldd	r9, Y+11	; 0x0b
    253e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2540:	b9 84       	ldd	r11, Y+9	; 0x09
    2542:	c8 84       	ldd	r12, Y+8	; 0x08
    2544:	df 80       	ldd	r13, Y+7	; 0x07
    2546:	ee 80       	ldd	r14, Y+6	; 0x06
    2548:	fd 80       	ldd	r15, Y+5	; 0x05
    254a:	0c 81       	ldd	r16, Y+4	; 0x04
    254c:	1b 81       	ldd	r17, Y+3	; 0x03
    254e:	aa 81       	ldd	r26, Y+2	; 0x02
    2550:	b9 81       	ldd	r27, Y+1	; 0x01
    2552:	ce 0f       	add	r28, r30
    2554:	d1 1d       	adc	r29, r1
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	f8 94       	cli
    255a:	de bf       	out	0x3e, r29	; 62
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	cd bf       	out	0x3d, r28	; 61
    2560:	ed 01       	movw	r28, r26
    2562:	08 95       	ret

00002564 <strcmp>:
    2564:	fb 01       	movw	r30, r22
    2566:	dc 01       	movw	r26, r24
    2568:	8d 91       	ld	r24, X+
    256a:	01 90       	ld	r0, Z+
    256c:	80 19       	sub	r24, r0
    256e:	01 10       	cpse	r0, r1
    2570:	d9 f3       	breq	.-10     	; 0x2568 <strcmp+0x4>
    2572:	99 0b       	sbc	r25, r25
    2574:	08 95       	ret

00002576 <_exit>:
    2576:	f8 94       	cli

00002578 <__stop_program>:
    2578:	ff cf       	rjmp	.-2      	; 0x2578 <__stop_program>
